(** {1 Operations} *)


(** Maker of REST clients.

    A web agent is a low-level actor that executes web
    requests and notifies you of the response.

    You provide an [Agent] module as the functor parameter.
    The [Agent] module must be able to execute web requests
    in [Agent.execute], and interfaces to the web agent's
    concurrency and notification model in [Agent.bind] and
    [Agent.return].

    An [Agent] is available that uses the cohttp curl web client.

    Regardless of which [Agent] you use, when you execute
    a REST call you may get an
    [Error (`Invalid_agent_attribute "error message")].
    That means the web agent does not have enough information
    to complete the web request. One example is where you
    have not told the [Agent] which REST server to use.

    Another error you can get is
    [Error (`Unparseable_response ("error message", loc))]
    when the response body should be JSON but had an invalid
    syntax. [loc] will be the location
    [((start_line, start_col), (end_line, end_col))] with
    0-indexed lines and 1-indexed columns.

    The last error you can get is
    [Error (`Nonconforming_response ("error message", Some loc))]
    when the JSON response does not match its OpenAPI specification.
    [Some loc] will be JSON pointer location in the OpenAPI
    specification of the Schema Object that could not be matched.
    If the JSON pointer is not known then [None] will be used. *)
module Client (Agent : sig
  type 'a thread

  val execute :
       [ `Headers of (string * string) list
       | `HttpVersion_1_1
       | `Method of
         [`DELETE | `GET | `HEAD | `OPTIONS | `PATCH | `POST | `PUT | `TRACE]
       | `Path of string
       | `RequestBody of string * string
       | `Server of string ]
       list
    -> ( [> `Headers of (string * string) list
         | `HttpStatus of int
         | `ResponseBody of string ]
         list
       , [> `Invalid_agent_attribute of string
         | `Nonconforming_response of string * string option
         | `Unparseable_response of
           string * ((int * int) * (int * int)) option ] )
       result
       thread

  val bind : 'a thread -> ('a -> 'b thread) -> 'b thread

  val return : 'c -> 'c thread
end)
 =
struct

  open StripeTypes
  open StripeBodies
  open StripeEncdrs
  open StripeParams
  open StripePaths
  
  
  (** <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p>
      
      @see "openapi/spec3.json" /v1/webhook_endpoints *)
  let postWebhookEndpoints =
    let _op = "/v1/webhook_endpoints" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (webhook_endpoint * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_ef97b53327
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.webhook_endpoint) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postWebhookEndpoints ())
  
  (** <p>Returns a list of your webhook endpoints.</p>
      
      @see "openapi/spec3.json" /v1/webhook_endpoints *)
  let getWebhookEndpoints =
    let _op = "/v1/webhook_endpoints" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_009f7b6355 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_009f7b6355) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getWebhookEndpoints ())
  
  (** <p>Retrieves a list of Transaction objects.</p>
      
      @see "openapi/spec3.json" /v1/treasury/transactions *)
  let getTreasuryTransactions =
    let _op = "/v1/treasury/transactions" in
    let _k _path ?created ?ending_before ?expand ~financial_account ?limit
        ?order_by ?starting_after ?status ?status_transitions
        _req :
          ([`CH_OK of (t_7daf65bc51 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_2bb01eccbd ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"financial_account" ~op:_op ~loc:`Query ~style:`Form ~explode:true financial_account in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match order_by with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_65e58eb6da ~p:"order_by" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_6f04380d09 ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status_transitions with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_b458f1b6fb ~p:"status_transitions" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_7daf65bc51) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTreasuryTransactions ())
  
  (** <p>Creates an InboundTransfer.</p>
      
      @see "openapi/spec3.json" /v1/treasury/inbound_transfers *)
  let postTreasuryInboundTransfers =
    let _op = "/v1/treasury/inbound_transfers" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_inbound_transfer * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_d051225f0e
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_inbound_transfer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTreasuryInboundTransfers ())
  
  (** <p>Returns a list of InboundTransfers sent from the specified FinancialAccount.</p>
      
      @see "openapi/spec3.json" /v1/treasury/inbound_transfers *)
  let getTreasuryInboundTransfers =
    let _op = "/v1/treasury/inbound_transfers" in
    let _k _path ?ending_before ?expand ~financial_account ?limit
        ?starting_after ?status
        _req :
          ([`CH_OK of (t_4c6dd8f0e1 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"financial_account" ~op:_op ~loc:`Query ~style:`Form ~explode:true financial_account in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_bda61eb198 ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_4c6dd8f0e1) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTreasuryInboundTransfers ())
  
  (** <p>Reverses a ReceivedDebit and creates a DebitReversal object.</p>
      
      @see "openapi/spec3.json" /v1/treasury/debit_reversals *)
  let postTreasuryDebitReversals =
    let _op = "/v1/treasury/debit_reversals" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_debit_reversal * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_82a5266788
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_debit_reversal) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTreasuryDebitReversals ())
  
  (** <p>Returns a list of DebitReversals.</p>
      
      @see "openapi/spec3.json" /v1/treasury/debit_reversals *)
  let getTreasuryDebitReversals =
    let _op = "/v1/treasury/debit_reversals" in
    let _k _path ?ending_before ?expand ~financial_account ?limit
        ?received_debit ?resolution ?starting_after ?status
        _req :
          ([`CH_OK of (t_85b19d50f4 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"financial_account" ~op:_op ~loc:`Query ~style:`Form ~explode:true financial_account in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match received_debit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"received_debit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match resolution with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_ed1d428d1e ~p:"resolution" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_e27a5a13e2 ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_85b19d50f4) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTreasuryDebitReversals ())
  
  (** <p>Allows the user to capture an arbitrary amount, also known as a forced capture.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/issuing/transactions/create_force_capture *)
  let postTestHelpersIssuingTransactionsCreateForceCapture =
    let _op = "/v1/test_helpers/issuing/transactions/create_force_capture" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_transaction * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_4088bc30cc
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_transaction) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersIssuingTransactionsCreateForceCapture ())
  
  (** <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/reviews *)
  let getReviews =
    let _op = "/v1/reviews" in
    let _k _path ?created ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_4b4add6b74 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_91991d11ce ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_4b4add6b74) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getReviews ())
  
  (** <p>Creates a new price for an existing product. The price can be recurring or one-time.</p>
      
      @see "openapi/spec3.json" /v1/prices *)
  let postPrices =
    let _op = "/v1/prices" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (price * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_7db5a18132
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.price) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPrices ())
  
  (** <p>Returns a list of your active prices, excluding <a href="/docs/products-prices/pricing-models#inline-pricing">inline prices</a>. For the list of inactive prices, set <code>active</code> to false.</p>
      
      @see "openapi/spec3.json" /v1/prices *)
  let getPrices =
    let _op = "/v1/prices" in
    let _k _path ?active ?created ?currency ?ending_before ?expand ?limit
        ?lookup_keys ?product ?recurring ?starting_after ?type_
        _req :
          ([`CH_OK of (t_74158d6312 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match active with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"active" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_5c423aae2d ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match currency with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"currency" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match lookup_keys with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"lookup_keys" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match product with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"product" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match recurring with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_54d3503cdb ~p:"recurring" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match type_ with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_806c738ca8 ~p:"type" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_74158d6312) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPrices ())
  
  (** <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p>
      
      @see "openapi/spec3.json" /v1/exchange_rates *)
  let getExchangeRates =
    let _op = "/v1/exchange_rates" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_7fe89e0e5d * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_7fe89e0e5d) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getExchangeRates ())
  
  (** <p>Creates a Session object.</p>
      
      @see "openapi/spec3.json" /v1/checkout/sessions *)
  let postCheckoutSessions =
    let _op = "/v1/checkout/sessions" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (checkout_session * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_5a1ce40dda
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.checkout_session) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCheckoutSessions ())
  
  (** <p>Returns a list of Checkout Sessions.</p>
      
      @see "openapi/spec3.json" /v1/checkout/sessions *)
  let getCheckoutSessions =
    let _op = "/v1/checkout/sessions" in
    let _k _path ?created ?customer ?customer_details ?ending_before ?expand
        ?limit ?payment_intent ?payment_link ?starting_after ?status
        ?subscription
        _req :
          ([`CH_OK of (t_be210268f2 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_0b0b7bdb7e ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match customer with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"customer" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match customer_details with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_12bf81c281 ~p:"customer_details" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match payment_intent with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"payment_intent" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match payment_link with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"payment_link" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_976c399de7 ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"subscription" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_be210268f2) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCheckoutSessions ())
  
  (** <p>Creates a personalization design object.</p>
      
      @see "openapi/spec3.json" /v1/issuing/personalization_designs *)
  let postIssuingPersonalizationDesigns =
    let _op = "/v1/issuing/personalization_designs" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_personalization_design * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_2a790f7673
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_personalization_design) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postIssuingPersonalizationDesigns ())
  
  (** <p>Returns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/personalization_designs *)
  let getIssuingPersonalizationDesigns =
    let _op = "/v1/issuing/personalization_designs" in
    let _k _path ?ending_before ?expand ?limit ?lookup_keys ?preferences
        ?starting_after ?status
        _req :
          ([`CH_OK of (t_a6474a2d5e * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match lookup_keys with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"lookup_keys" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match preferences with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_6565ec2878 ~p:"preferences" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_386a8a09fc ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_a6474a2d5e) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIssuingPersonalizationDesigns ())
  
  (** <p>Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.</p>
      
      @see "openapi/spec3.json" /v1/invoiceitems *)
  let postInvoiceitems =
    let _op = "/v1/invoiceitems" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (invoiceitem * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_8fdaacf028
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.invoiceitem) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postInvoiceitems ())
  
  (** <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p>
      
      @see "openapi/spec3.json" /v1/invoiceitems *)
  let getInvoiceitems =
    let _op = "/v1/invoiceitems" in
    let _k _path ?created ?customer ?ending_before ?expand ?invoice ?limit
        ?pending ?starting_after
        _req :
          ([`CH_OK of (t_fc9322fc50 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_7181394bbb ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match customer with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"customer" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match invoice with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"invoice" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match pending with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"pending" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_fc9322fc50) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getInvoiceitems ())
  
  (** <p>Retrieves the details of an account.</p>
      
      @see "openapi/spec3.json" /v1/account *)
  let getAccount =
    let _op = "/v1/account" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (account * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getAccount ())
  
  (** <p>Creates a short-lived API key for a given resource.</p>
      
      @see "openapi/spec3.json" /v1/ephemeral_keys *)
  let postEphemeralKeys =
    let _op = "/v1/ephemeral_keys" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (ephemeral_key * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_6c44d9c7d2
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.ephemeral_key) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postEphemeralKeys ())
  
  (** <p>Search for customers you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/customers/search *)
  let getCustomersSearch =
    let _op = "/v1/customers/search" in
    let _k _path ?expand ?limit ?page ~query
        _req :
          ([`CH_OK of (t_ada489b57e * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match page with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"page" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"query" ~op:_op ~loc:`Query ~style:`Form ~explode:true query in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_ada489b57e) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCustomersSearch ())
  
  (** <p>Retrieves the current account balance, based on the authentication that was used to make the request.
       For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
      
      @see "openapi/spec3.json" /v1/balance *)
  let getBalance =
    let _op = "/v1/balance" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (balance * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.balance) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getBalance ())
  
  (** <p>Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/treasury/received_credits *)
  let postTestHelpersTreasuryReceivedCredits =
    let _op = "/v1/test_helpers/treasury/received_credits" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_received_credit * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_0f1eb7e9e5
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_received_credit) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTestHelpersTreasuryReceivedCredits ())
  
  (** <p>Search for subscriptions you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/subscriptions/search *)
  let getSubscriptionsSearch =
    let _op = "/v1/subscriptions/search" in
    let _k _path ?expand ?limit ?page ~query
        _req :
          ([`CH_OK of (t_511c6be270 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match page with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"page" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"query" ~op:_op ~loc:`Query ~style:`Form ~explode:true query in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_511c6be270) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getSubscriptionsSearch ())
  
  (** <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
      
      <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
      Funds will be refunded to the credit or debit card that was originally charged.</p>
      
      <p>You can optionally refund only part of a charge.
      You can do so multiple times, until the entire charge has been refunded.</p>
      
      <p>Once entirely refunded, a charge can’t be refunded again.
      This method will raise an error when called on an already-refunded charge,
      or when trying to refund more money than is left on a charge.</p>
      
      @see "openapi/spec3.json" /v1/refunds *)
  let postRefunds =
    let _op = "/v1/refunds" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (refund * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_3131e049b3
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.refund) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postRefunds ())
  
  (** <p>Returns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first The 10 most recent refunds are always available by default on the Charge object.</p>
      
      @see "openapi/spec3.json" /v1/refunds *)
  let getRefunds =
    let _op = "/v1/refunds" in
    let _k _path ?charge ?created ?ending_before ?expand ?limit
        ?payment_intent ?starting_after
        _req :
          ([`CH_OK of (t_84023f4c8c * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match charge with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"charge" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_c862988285 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match payment_intent with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"payment_intent" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_84023f4c8c) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getRefunds ())
  
  (** <p>Create or replace a secret in the secret store.</p>
      
      @see "openapi/spec3.json" /v1/apps/secrets *)
  let postAppsSecrets =
    let _op = "/v1/apps/secrets" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (apps_secret * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_63665b08a9
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.apps_secret) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postAppsSecrets ())
  
  (** <p>List all secrets stored on the given scope.</p>
      
      @see "openapi/spec3.json" /v1/apps/secrets *)
  let getAppsSecrets =
    let _op = "/v1/apps/secrets" in
    let _k _path ?ending_before ?expand ?limit ~scope ?starting_after
        _req :
          ([`CH_OK of (t_a753848072 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_t_4ce91395e3 ~p:"scope" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true scope in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_a753848072) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getAppsSecrets ())
  
  (** <p>Search for PaymentIntents you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/payment_intents/search *)
  let getPaymentIntentsSearch =
    let _op = "/v1/payment_intents/search" in
    let _k _path ?expand ?limit ?page ~query
        _req :
          ([`CH_OK of (t_2b5089e91b * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match page with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"page" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"query" ~op:_op ~loc:`Query ~style:`Form ~explode:true query in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_2b5089e91b) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPaymentIntentsSearch ())
  
  (** <p>Retrieve a list of active entitlements for a customer</p>
      
      @see "openapi/spec3.json" /v1/entitlements/active_entitlements *)
  let getEntitlementsActiveEntitlements =
    let _op = "/v1/entitlements/active_entitlements" in
    let _k _path ~customer ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_a59bf7d41a * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"customer" ~op:_op ~loc:`Query ~style:`Form ~explode:true customer in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_a59bf7d41a) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getEntitlementsActiveEntitlements ())
  
  (** <p>Creates a new <code>Configuration</code> object.</p>
      
      @see "openapi/spec3.json" /v1/terminal/configurations *)
  let postTerminalConfigurations =
    let _op = "/v1/terminal/configurations" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (terminal_configuration * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_be0ad9b5f5
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.terminal_configuration) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTerminalConfigurations ())
  
  (** <p>Returns a list of <code>Configuration</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/terminal/configurations *)
  let getTerminalConfigurations =
    let _op = "/v1/terminal/configurations" in
    let _k _path ?ending_before ?expand ?is_account_default ?limit
        ?starting_after
        _req :
          ([`CH_OK of (t_a974b789de * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match is_account_default with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"is_account_default" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_a974b789de) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTerminalConfigurations ())
  
  (** <p>Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.</p>
      
      @see "openapi/spec3.json" /v1/subscription_schedules *)
  let postSubscriptionSchedules =
    let _op = "/v1/subscription_schedules" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (subscription_schedule * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_7e9ce92a64
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.subscription_schedule) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postSubscriptionSchedules ())
  
  (** <p>Retrieves the list of your subscription schedules.</p>
      
      @see "openapi/spec3.json" /v1/subscription_schedules *)
  let getSubscriptionSchedules =
    let _op = "/v1/subscription_schedules" in
    let _k _path ?canceled_at ?completed_at ?created ?customer ?ending_before
        ?expand ?limit ?released_at ?scheduled ?starting_after
        _req :
          ([`CH_OK of (t_131d8d58f6 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match canceled_at with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_edb9c04aba ~p:"canceled_at" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match completed_at with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_b053f4a10e ~p:"completed_at" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_8dd946adeb ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match customer with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"customer" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match released_at with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_e65a202262 ~p:"released_at" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match scheduled with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"scheduled" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_131d8d58f6) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getSubscriptionSchedules ())
  
  (** <p>Creates a new object and begin running the report. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
      
      @see "openapi/spec3.json" /v1/reporting/report_runs *)
  let postReportingReportRuns =
    let _op = "/v1/reporting/report_runs" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (reporting_report_run * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_45244250b0
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.reporting_report_run) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postReportingReportRuns ())
  
  (** <p>Returns a list of Report Runs, with the most recent appearing first.</p>
      
      @see "openapi/spec3.json" /v1/reporting/report_runs *)
  let getReportingReportRuns =
    let _op = "/v1/reporting/report_runs" in
    let _k _path ?created ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_c990e5bff8 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_95b7b73ff8 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_c990e5bff8) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getReportingReportRuns ())
  
  (** <p>Creates a Climate order object for a given Climate product. The order will be processed immediately
      after creation and payment will be deducted your Stripe balance.</p>
      
      @see "openapi/spec3.json" /v1/climate/orders *)
  let postClimateOrders =
    let _op = "/v1/climate/orders" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (climate_order * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_e0d65e6591
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.climate_order) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postClimateOrders ())
  
  (** <p>Lists all Climate order objects. The orders are returned sorted by creation date, with the
      most recently created orders appearing first.</p>
      
      @see "openapi/spec3.json" /v1/climate/orders *)
  let getClimateOrders =
    let _op = "/v1/climate/orders" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_9c934593c9 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_9c934593c9) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getClimateOrders ())
  
  (** <p>You can now model subscriptions more flexibly using the <a href="#prices">Prices API</a>. It replaces the Plans API and is backwards compatible to simplify your migration.</p>
      
      @see "openapi/spec3.json" /v1/plans *)
  let postPlans =
    let _op = "/v1/plans" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (plan * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_2757ce4894
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.plan) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPlans ())
  
  (** <p>Returns a list of your plans.</p>
      
      @see "openapi/spec3.json" /v1/plans *)
  let getPlans =
    let _op = "/v1/plans" in
    let _k _path ?active ?created ?ending_before ?expand ?limit ?product
        ?starting_after
        _req :
          ([`CH_OK of (t_dd09d84db3 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match active with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"active" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_c85fb118c6 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match product with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"product" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_dd09d84db3) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPlans ())
  
  (** <p>Lists all Issuing <code>Token</code> objects for a given card.</p>
      
      @see "openapi/spec3.json" /v1/issuing/tokens *)
  let getIssuingTokens =
    let _op = "/v1/issuing/tokens" in
    let _k _path ~card ?created ?ending_before ?expand ?limit ?starting_after
        ?status
        _req :
          ([`CH_OK of (t_d442622ac0 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"card" ~op:_op ~loc:`Query ~style:`Form ~explode:true card in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_a985a64df2 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_9463e4703f ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_d442622ac0) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIssuingTokens ())
  
  (** <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @see "openapi/spec3.json" /v1/invoices/upcoming/lines *)
  let getInvoicesUpcomingLines =
    let _op = "/v1/invoices/upcoming/lines" in
    let _k _path ?automatic_tax ?coupon ?currency ?customer ?customer_details
        ?discounts ?ending_before ?expand ?invoice_items ?issuer ?limit
        ?on_behalf_of ?preview_mode ?schedule ?schedule_details
        ?starting_after ?subscription ?subscription_billing_cycle_anchor
        ?subscription_cancel_at ?subscription_cancel_at_period_end
        ?subscription_cancel_now ?subscription_default_tax_rates
        ?subscription_details ?subscription_items
        ?subscription_proration_behavior ?subscription_proration_date
        ?subscription_resume_at ?subscription_start_date
        ?subscription_trial_end
        _req :
          ([`CH_OK of (t_298a5f6377 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match automatic_tax with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_25cc6e6754 ~p:"automatic_tax" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match coupon with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"coupon" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match currency with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"currency" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match customer with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"customer" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match customer_details with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_428991b112 ~p:"customer_details" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match discounts with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_ec12d0adc5 ~p:"discounts" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match invoice_items with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_6de1e50279 ~p:"invoice_items" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match issuer with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_f2803c8215 ~p:"issuer" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match on_behalf_of with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_d3294049d8 ~p:"on_behalf_of" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match preview_mode with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_f90350482b ~p:"preview_mode" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match schedule with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"schedule" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match schedule_details with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_4592f6749b ~p:"schedule_details" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"subscription" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_billing_cycle_anchor with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_ed69666899 ~p:"subscription_billing_cycle_anchor" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_cancel_at with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_1d44572454 ~p:"subscription_cancel_at" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_cancel_at_period_end with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"subscription_cancel_at_period_end" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_cancel_now with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"subscription_cancel_now" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_default_tax_rates with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_8f5fa696e4 ~p:"subscription_default_tax_rates" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_details with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_7cca4f7dbf ~p:"subscription_details" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_items with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_1d8dcb799a ~p:"subscription_items" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_proration_behavior with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_b3cdff625a ~p:"subscription_proration_behavior" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_proration_date with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Ptime_t ~p:"subscription_proration_date" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_resume_at with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_f0d6f3faa7 ~p:"subscription_resume_at" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_start_date with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Ptime_t ~p:"subscription_start_date" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_trial_end with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_8a9e68982d ~p:"subscription_trial_end" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_298a5f6377) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getInvoicesUpcomingLines ())
  
  (** <p>Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/treasury/received_debits *)
  let postTestHelpersTreasuryReceivedDebits =
    let _op = "/v1/test_helpers/treasury/received_debits" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_received_debit * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_5682e7ca57
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_received_debit) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTestHelpersTreasuryReceivedDebits ())
  
  (** <p>Allows the user to refund an arbitrary amount, also known as a unlinked refund.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/issuing/transactions/create_unlinked_refund *)
  let postTestHelpersIssuingTransactionsCreateUnlinkedRefund =
    let _op = "/v1/test_helpers/issuing/transactions/create_unlinked_refund" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_transaction * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_5d025dbec5
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_transaction) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersIssuingTransactionsCreateUnlinkedRefund ())
  
  (** <p>Create a test-mode authorization.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations *)
  let postTestHelpersIssuingAuthorizations =
    let _op = "/v1/test_helpers/issuing/authorizations" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_authorization * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_0372bf8c09
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_authorization) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTestHelpersIssuingAuthorizations ())
  
  (** <p>Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.</p>
      
      <p>When you create a subscription with <code>collection_method=charge_automatically</code>, the first invoice is finalized as part of the request.
      The <code>payment_behavior</code> parameter determines the exact behavior of the initial payment.</p>
      
      <p>To start subscriptions where the first invoice always begins in a <code>draft</code> status, use <a href="/docs/billing/subscriptions/subscription-schedules#managing">subscription schedules</a> instead.
      Schedules provide the flexibility to model more complex billing configurations that change over time.</p>
      
      @see "openapi/spec3.json" /v1/subscriptions *)
  let postSubscriptions =
    let _op = "/v1/subscriptions" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (subscription * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_43ba264db4
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.subscription) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postSubscriptions ())
  
  (** <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p>
      
      @see "openapi/spec3.json" /v1/subscriptions *)
  let getSubscriptions =
    let _op = "/v1/subscriptions" in
    let _k _path ?automatic_tax ?collection_method ?created
        ?current_period_end ?current_period_start ?customer ?ending_before
        ?expand ?limit ?price ?starting_after ?status ?test_clock
        _req :
          ([`CH_OK of (t_2f50dabf8e * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match automatic_tax with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_b1188f80a4 ~p:"automatic_tax" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match collection_method with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_d2098cac25 ~p:"collection_method" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_900f55e0e4 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match current_period_end with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_dad4a4ac5b ~p:"current_period_end" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match current_period_start with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_dce85b0bb2 ~p:"current_period_start" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match customer with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"customer" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match price with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"price" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_a6b80cd539 ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match test_clock with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"test_clock" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_2f50dabf8e) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getSubscriptions ())
  
  (** <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="https://docs.stripe.com/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p>
      
      @see "openapi/spec3.json" /v1/events *)
  let getEvents =
    let _op = "/v1/events" in
    let _k _path ?created ?delivery_success ?ending_before ?expand ?limit
        ?starting_after ?type_ ?types
        _req :
          ([`CH_OK of (t_a9fe829193 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_194d7f2624 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match delivery_success with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"delivery_success" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match type_ with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"type" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match types with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"types" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_a9fe829193) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getEvents ())
  
  (** <p>Creates a configuration that describes the functionality and behavior of a PortalSession</p>
      
      @see "openapi/spec3.json" /v1/billing_portal/configurations *)
  let postBillingPortalConfigurations =
    let _op = "/v1/billing_portal/configurations" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (billing_portal_configuration * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_a30c2d9c78
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.billing_portal_configuration) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postBillingPortalConfigurations ())
  
  (** <p>Returns a list of configurations that describe the functionality of the customer portal.</p>
      
      @see "openapi/spec3.json" /v1/billing_portal/configurations *)
  let getBillingPortalConfigurations =
    let _op = "/v1/billing_portal/configurations" in
    let _k _path ?active ?ending_before ?expand ?is_default ?limit
        ?starting_after
        _req :
          ([`CH_OK of (t_f3884ce0bf * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match active with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"active" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match is_default with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"is_default" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_f3884ce0bf) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getBillingPortalConfigurations ())
  
  (** <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
      
      <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
      
      @see "openapi/spec3.json" /v1/balance/history *)
  let getBalanceHistory =
    let _op = "/v1/balance/history" in
    let _k _path ?created ?currency ?ending_before ?expand ?limit ?payout
        ?source ?starting_after ?type_
        _req :
          ([`CH_OK of (t_2202d52174 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_01b97bcd1e ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match currency with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"currency" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match payout with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"payout" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match source with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"source" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match type_ with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"type" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_2202d52174) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getBalanceHistory ())
  
  (** <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>
      
      <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
      
      <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period\[start\]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request. </p>
      
      <p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>
      
      @see "openapi/spec3.json" /v1/invoices/create_preview *)
  let postInvoicesCreatePreview =
    let _op = "/v1/invoices/create_preview" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (invoice * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_794a4d2df8
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.invoice) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postInvoicesCreatePreview ())
  
  (** <p>Creates a billing meter event adjustment</p>
      
      @see "openapi/spec3.json" /v1/billing/meter_event_adjustments *)
  let postBillingMeterEventAdjustments =
    let _op = "/v1/billing/meter_event_adjustments" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (billing_meter_event_adjustment * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_a6ac4c70d5
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.billing_meter_event_adjustment) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postBillingMeterEventAdjustments ())
  
  (** <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>
      
      @see "openapi/spec3.json" /v1/terminal/connection_tokens *)
  let postTerminalConnectionTokens =
    let _op = "/v1/terminal/connection_tokens" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (terminal_connection_token * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_2752bc4d8e
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.terminal_connection_token) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTerminalConnectionTokens ())
  
  (** <p>Returns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/physical_bundles *)
  let getIssuingPhysicalBundles =
    let _op = "/v1/issuing/physical_bundles" in
    let _k _path ?ending_before ?expand ?limit ?starting_after ?status ?type_
        _req :
          ([`CH_OK of (t_93afe9bb1d * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_3d82a38285 ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match type_ with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_00d4956c80 ~p:"type" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_93afe9bb1d) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIssuingPhysicalBundles ())
  
  (** <p>Finds a secret in the secret store by name and scope.</p>
      
      @see "openapi/spec3.json" /v1/apps/secrets/find *)
  let getAppsSecretsFind =
    let _op = "/v1/apps/secrets/find" in
    let _k _path ?expand ~name ~scope
        _req :
          ([`CH_OK of (apps_secret * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"name" ~op:_op ~loc:`Query ~style:`Form ~explode:true name in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_t_4a4b8daa1f ~p:"scope" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true scope in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.apps_secret) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getAppsSecretsFind ())
  
  (** <p>Creates a feature</p>
      
      @see "openapi/spec3.json" /v1/entitlements/features *)
  let postEntitlementsFeatures =
    let _op = "/v1/entitlements/features" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (entitlements_feature * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_899a7d7058
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.entitlements_feature) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postEntitlementsFeatures ())
  
  (** <p>Retrieve a list of features</p>
      
      @see "openapi/spec3.json" /v1/entitlements/features *)
  let getEntitlementsFeatures =
    let _op = "/v1/entitlements/features" in
    let _k _path ?archived ?ending_before ?expand ?limit ?lookup_key
        ?starting_after
        _req :
          ([`CH_OK of (t_5c8bbeb9fe * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match archived with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"archived" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match lookup_key with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"lookup_key" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_5c8bbeb9fe) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getEntitlementsFeatures ())
  
  (** <p>Creates a payment link.</p>
      
      @see "openapi/spec3.json" /v1/payment_links *)
  let postPaymentLinks =
    let _op = "/v1/payment_links" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_link * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_3f26729ec9
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_link) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPaymentLinks ())
  
  (** <p>Returns a list of your payment links.</p>
      
      @see "openapi/spec3.json" /v1/payment_links *)
  let getPaymentLinks =
    let _op = "/v1/payment_links" in
    let _k _path ?active ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_909266bbb4 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match active with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"active" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_909266bbb4) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPaymentLinks ())
  
  (** <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>
      
      @see "openapi/spec3.json" /v1/issuing/cardholders *)
  let postIssuingCardholders =
    let _op = "/v1/issuing/cardholders" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_cardholder * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_7e0601cf2e
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_cardholder) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postIssuingCardholders ())
  
  (** <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/cardholders *)
  let getIssuingCardholders =
    let _op = "/v1/issuing/cardholders" in
    let _k _path ?created ?email ?ending_before ?expand ?limit ?phone_number
        ?starting_after ?status ?type_
        _req :
          ([`CH_OK of (t_159106836c * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_5e23dd8315 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match email with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"email" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match phone_number with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"phone_number" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_d05018810d ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match type_ with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_9b139b4e87 ~p:"type" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_159106836c) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIssuingCardholders ())
  
  (** <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p>
      
      @see "openapi/spec3.json" /v1/credit_notes/preview/lines *)
  let getCreditNotesPreviewLines =
    let _op = "/v1/credit_notes/preview/lines" in
    let _k _path ?amount ?credit_amount ?effective_at ?ending_before ?expand
        ~invoice ?limit ?lines ?memo ?metadata ?out_of_band_amount ?reason
        ?refund ?refund_amount ?shipping_cost ?starting_after
        _req :
          ([`CH_OK of (t_78e52fa8e7 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match amount with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"amount" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match credit_amount with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"credit_amount" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match effective_at with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Ptime_t ~p:"effective_at" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"invoice" ~op:_op ~loc:`Query ~style:`Form ~explode:true invoice in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match lines with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_3acf43dc3b ~p:"lines" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match memo with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"memo" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match metadata with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_2551b208c1 ~p:"metadata" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match out_of_band_amount with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"out_of_band_amount" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match reason with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_5780adc875 ~p:"reason" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match refund with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"refund" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match refund_amount with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"refund_amount" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match shipping_cost with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_7d4b84944c ~p:"shipping_cost" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_78e52fa8e7) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCreditNotesPreviewLines ())
  
  (** <p>Updates Tax <code>Settings</code> parameters used in tax calculations. All parameters are editable but none can be removed once set.</p>
      
      @see "openapi/spec3.json" /v1/tax/settings *)
  let postTaxSettings =
    let _op = "/v1/tax/settings" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (tax_settings * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_1ce9291b18
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.tax_settings) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTaxSettings ())
  
  (** <p>Retrieves Tax <code>Settings</code> for a merchant.</p>
      
      @see "openapi/spec3.json" /v1/tax/settings *)
  let getTaxSettings =
    let _op = "/v1/tax/settings" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (tax_settings * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.tax_settings) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTaxSettings ())
  
  (** <p>Calculates tax based on input and returns a Tax <code>Calculation</code> object.</p>
      
      @see "openapi/spec3.json" /v1/tax/calculations *)
  let postTaxCalculations =
    let _op = "/v1/tax/calculations" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (tax_calculation * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_28f1ad2c87
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.tax_calculation) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTaxCalculations ())
  
  (** <p>Returns a list of your disputes.</p>
      
      @see "openapi/spec3.json" /v1/disputes *)
  let getDisputes =
    let _op = "/v1/disputes" in
    let _k _path ?charge ?created ?ending_before ?expand ?limit
        ?payment_intent ?starting_after
        _req :
          ([`CH_OK of (t_922afa3fe7 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match charge with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"charge" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_d8f80ab533 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match payment_intent with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"payment_intent" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_922afa3fe7) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getDisputes ())
  
  (** <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>
      
      <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
      
      <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period\[start\]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request.</p>
      
      <p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>
      
      @see "openapi/spec3.json" /v1/invoices/upcoming *)
  let getInvoicesUpcoming =
    let _op = "/v1/invoices/upcoming" in
    let _k _path ?automatic_tax ?coupon ?currency ?customer ?customer_details
        ?discounts ?expand ?invoice_items ?issuer ?on_behalf_of ?preview_mode
        ?schedule ?schedule_details ?subscription
        ?subscription_billing_cycle_anchor ?subscription_cancel_at
        ?subscription_cancel_at_period_end ?subscription_cancel_now
        ?subscription_default_tax_rates ?subscription_details
        ?subscription_items ?subscription_proration_behavior
        ?subscription_proration_date ?subscription_resume_at
        ?subscription_start_date ?subscription_trial_end
        _req :
          ([`CH_OK of (invoice * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match automatic_tax with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_a51466ec35 ~p:"automatic_tax" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match coupon with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"coupon" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match currency with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"currency" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match customer with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"customer" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match customer_details with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_c87881fc5c ~p:"customer_details" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match discounts with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_873409613d ~p:"discounts" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match invoice_items with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_96382fbbc2 ~p:"invoice_items" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match issuer with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_266682ce3a ~p:"issuer" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match on_behalf_of with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_9aa5bd9e73 ~p:"on_behalf_of" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match preview_mode with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_50aa3198c9 ~p:"preview_mode" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match schedule with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"schedule" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match schedule_details with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_c4767cb749 ~p:"schedule_details" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"subscription" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_billing_cycle_anchor with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_312ad6306f ~p:"subscription_billing_cycle_anchor" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_cancel_at with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_b9ba448b2f ~p:"subscription_cancel_at" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_cancel_at_period_end with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"subscription_cancel_at_period_end" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_cancel_now with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"subscription_cancel_now" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_default_tax_rates with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_0178e1face ~p:"subscription_default_tax_rates" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_details with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_baccbfb036 ~p:"subscription_details" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_items with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_671de99c34 ~p:"subscription_items" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_proration_behavior with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_6dff880c24 ~p:"subscription_proration_behavior" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_proration_date with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Ptime_t ~p:"subscription_proration_date" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_resume_at with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_50e9f09abe ~p:"subscription_resume_at" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_start_date with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Ptime_t ~p:"subscription_start_date" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription_trial_end with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_30748e2d12 ~p:"subscription_trial_end" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.invoice) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getInvoicesUpcoming ())
  
  (** <p>Create an apple pay domain.</p>
      
      @see "openapi/spec3.json" /v1/apple_pay/domains *)
  let postApplePayDomains =
    let _op = "/v1/apple_pay/domains" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (apple_pay_domain * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_578ee3d1db
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.apple_pay_domain) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postApplePayDomains ())
  
  (** <p>List apple pay domains.</p>
      
      @see "openapi/spec3.json" /v1/apple_pay/domains *)
  let getApplePayDomains =
    let _op = "/v1/apple_pay/domains" in
    let _k _path ?domain_name ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_2c4769bee6 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match domain_name with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"domain_name" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_2c4769bee6) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getApplePayDomains ())
  
  (** <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p>
      
      @see "openapi/spec3.json" /v1/radar/value_lists *)
  let postRadarValueLists =
    let _op = "/v1/radar/value_lists" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (radar_value_list * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_95acbcd7ae
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.radar_value_list) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postRadarValueLists ())
  
  (** <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/radar/value_lists *)
  let getRadarValueLists =
    let _op = "/v1/radar/value_lists" in
    let _k _path ?alias ?contains ?created ?ending_before ?expand ?limit
        ?starting_after
        _req :
          ([`CH_OK of (t_46113411f3 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match alias with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"alias" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match contains with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"contains" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_b205fb898b ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_46113411f3) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getRadarValueLists ())
  
  (** <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
      
      @see "openapi/spec3.json" /v1/link_account_sessions *)
  let postLinkAccountSessions =
    let _op = "/v1/link_account_sessions" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (financial_connections_session * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_5ccaf92d75
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.financial_connections_session) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postLinkAccountSessions ())
  
  (** <p>Creates a new file link object.</p>
      
      @see "openapi/spec3.json" /v1/file_links *)
  let postFileLinks =
    let _op = "/v1/file_links" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (file_link * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_89239a72fa
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.file_link) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postFileLinks ())
  
  (** <p>Returns a list of file links.</p>
      
      @see "openapi/spec3.json" /v1/file_links *)
  let getFileLinks =
    let _op = "/v1/file_links" in
    let _k _path ?created ?ending_before ?expand ?expired ?file ?limit
        ?starting_after
        _req :
          ([`CH_OK of (t_725237f1c4 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_76bf2704bf ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expired with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"expired" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match file with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"file" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_725237f1c4) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getFileLinks ())
  
  (** <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>
      
      <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
      
      @see "openapi/spec3.json" /v1/coupons *)
  let postCoupons =
    let _op = "/v1/coupons" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (coupon * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_fd91397b06
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.coupon) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCoupons ())
  
  (** <p>Returns a list of your coupons.</p>
      
      @see "openapi/spec3.json" /v1/coupons *)
  let getCoupons =
    let _op = "/v1/coupons" in
    let _k _path ?created ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_06d31e05e4 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_8efa015a15 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_06d31e05e4) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCoupons ())
  
  (** <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/transactions *)
  let getIssuingTransactions =
    let _op = "/v1/issuing/transactions" in
    let _k _path ?card ?cardholder ?created ?ending_before ?expand ?limit
        ?starting_after ?type_
        _req :
          ([`CH_OK of (t_b1e8ec8e7f * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match card with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"card" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match cardholder with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"cardholder" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_a6ed41322f ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match type_ with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_a13fab6ce7 ~p:"type" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_b1e8ec8e7f) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIssuingTransactions ())
  
  (** <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/authorizations *)
  let getIssuingAuthorizations =
    let _op = "/v1/issuing/authorizations" in
    let _k _path ?card ?cardholder ?created ?ending_before ?expand ?limit
        ?starting_after ?status
        _req :
          ([`CH_OK of (t_426671dc03 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match card with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"card" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match cardholder with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"cardholder" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_28b874eafa ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_e7c047a717 ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_426671dc03) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIssuingAuthorizations ())
  
  (** <p>Retrieves a list of TransactionEntry objects.</p>
      
      @see "openapi/spec3.json" /v1/treasury/transaction_entries *)
  let getTreasuryTransactionEntries =
    let _op = "/v1/treasury/transaction_entries" in
    let _k _path ?created ?effective_at ?ending_before ?expand
        ~financial_account ?limit ?order_by ?starting_after ?transaction
        _req :
          ([`CH_OK of (t_6433a1491c * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_01243047ea ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match effective_at with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_fa33b5a2bd ~p:"effective_at" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"financial_account" ~op:_op ~loc:`Query ~style:`Form ~explode:true financial_account in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match order_by with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_1f08681071 ~p:"order_by" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match transaction with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"transaction" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_6433a1491c) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTreasuryTransactionEntries ())
  
  (** <p>Returns a list of ReceivedDebits.</p>
      
      @see "openapi/spec3.json" /v1/treasury/received_debits *)
  let getTreasuryReceivedDebits =
    let _op = "/v1/treasury/received_debits" in
    let _k _path ?ending_before ?expand ~financial_account ?limit
        ?starting_after ?status
        _req :
          ([`CH_OK of (t_15e9354091 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"financial_account" ~op:_op ~loc:`Query ~style:`Form ~explode:true financial_account in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_fe86a832fb ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_15e9354091) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTreasuryReceivedDebits ())
  
  (** <p>Creates an OutboundTransfer.</p>
      
      @see "openapi/spec3.json" /v1/treasury/outbound_transfers *)
  let postTreasuryOutboundTransfers =
    let _op = "/v1/treasury/outbound_transfers" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_outbound_transfer * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_d78871063c
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_outbound_transfer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTreasuryOutboundTransfers ())
  
  (** <p>Returns a list of OutboundTransfers sent from the specified FinancialAccount.</p>
      
      @see "openapi/spec3.json" /v1/treasury/outbound_transfers *)
  let getTreasuryOutboundTransfers =
    let _op = "/v1/treasury/outbound_transfers" in
    let _k _path ?ending_before ?expand ~financial_account ?limit
        ?starting_after ?status
        _req :
          ([`CH_OK of (t_7f08263a31 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"financial_account" ~op:_op ~loc:`Query ~style:`Form ~explode:true financial_account in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_7e023d3347 ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_7f08263a31) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTreasuryOutboundTransfers ())
  
  (** <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p>
      
      @see "openapi/spec3.json" /v1/transfers *)
  let postTransfers =
    let _op = "/v1/transfers" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (transfer * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_304ca2adbe
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.transfer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTransfers ())
  
  (** <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p>
      
      @see "openapi/spec3.json" /v1/transfers *)
  let getTransfers =
    let _op = "/v1/transfers" in
    let _k _path ?created ?destination ?ending_before ?expand ?limit
        ?starting_after ?transfer_group
        _req :
          ([`CH_OK of (t_33072f36c2 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_c5c22bba1c ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match destination with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"destination" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match transfer_group with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"transfer_group" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_33072f36c2) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTransfers ())
  
  (** <p>Creates a new shipping rate object.</p>
      
      @see "openapi/spec3.json" /v1/shipping_rates *)
  let postShippingRates =
    let _op = "/v1/shipping_rates" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (shipping_rate * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_1a73a34312
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.shipping_rate) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postShippingRates ())
  
  (** <p>Returns a list of your shipping rates.</p>
      
      @see "openapi/spec3.json" /v1/shipping_rates *)
  let getShippingRates =
    let _op = "/v1/shipping_rates" in
    let _k _path ?active ?created ?currency ?ending_before ?expand ?limit
        ?starting_after
        _req :
          ([`CH_OK of (t_455e067f38 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match active with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"active" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_3115fde6ed ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match currency with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"currency" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_455e067f38) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getShippingRates ())
  
  (** <p>Creates an Issuing <code>Card</code> object.</p>
      
      @see "openapi/spec3.json" /v1/issuing/cards *)
  let postIssuingCards =
    let _op = "/v1/issuing/cards" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_card * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_7ea94600eb
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.issuing_card) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postIssuingCards ())
  
  (** <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/cards *)
  let getIssuingCards =
    let _op = "/v1/issuing/cards" in
    let _k _path ?cardholder ?created ?ending_before ?exp_month ?exp_year
        ?expand ?last4 ?limit ?personalization_design ?starting_after ?status
        ?type_
        _req :
          ([`CH_OK of (t_c504de1304 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match cardholder with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"cardholder" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_fd32e6450f ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match exp_month with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"exp_month" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match exp_year with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"exp_year" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match last4 with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"last4" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match personalization_design with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"personalization_design" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_e2b1b56eac ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match type_ with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_e42a3414c1 ~p:"type" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_c504de1304) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIssuingCards ())
  
  (** <p>Get a preview of a credit note without creating it.</p>
      
      @see "openapi/spec3.json" /v1/credit_notes/preview *)
  let getCreditNotesPreview =
    let _op = "/v1/credit_notes/preview" in
    let _k _path ?amount ?credit_amount ?effective_at ?expand ~invoice ?lines
        ?memo ?metadata ?out_of_band_amount ?reason ?refund ?refund_amount
        ?shipping_cost
        _req :
          ([`CH_OK of (credit_note * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match amount with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"amount" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match credit_amount with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"credit_amount" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match effective_at with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Ptime_t ~p:"effective_at" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"invoice" ~op:_op ~loc:`Query ~style:`Form ~explode:true invoice in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match lines with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_c086813c51 ~p:"lines" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match memo with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"memo" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match metadata with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_fa0c590277 ~p:"metadata" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match out_of_band_amount with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"out_of_band_amount" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match reason with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_935a453a3f ~p:"reason" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match refund with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"refund" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match refund_amount with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"refund_amount" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match shipping_cost with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_c4284eadfd ~p:"shipping_cost" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.credit_note) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCreditNotesPreview ())
  
  (** <p>Creates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.</p>
      
      @see "openapi/spec3.json" /v1/account_sessions *)
  let postAccountSessions =
    let _op = "/v1/account_sessions" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (account_session * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_67905fe2c6
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.account_session) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postAccountSessions ())
  
  (** <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/linked_accounts *)
  let getLinkedAccounts =
    let _op = "/v1/linked_accounts" in
    let _k _path ?account_holder ?ending_before ?expand ?limit ?session
        ?starting_after
        _req :
          ([`CH_OK of (t_6583320a34 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match account_holder with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_89676accde ~p:"account_holder" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match session with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"session" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_6583320a34) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getLinkedAccounts ())
  
  (** <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/financial_connections/accounts *)
  let getFinancialConnectionsAccounts =
    let _op = "/v1/financial_connections/accounts" in
    let _k _path ?account_holder ?ending_before ?expand ?limit ?session
        ?starting_after
        _req :
          ([`CH_OK of (t_f2a503228b * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match account_holder with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_32de9e954f ~p:"account_holder" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match session with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"session" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_f2a503228b) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getFinancialConnectionsAccounts ())
  
  (** <p>Search for charges you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/charges/search *)
  let getChargesSearch =
    let _op = "/v1/charges/search" in
    let _k _path ?expand ?limit ?page ~query
        _req :
          ([`CH_OK of (t_54d21de021 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match page with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"page" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"query" ~op:_op ~loc:`Query ~style:`Form ~explode:true query in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_54d21de021) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getChargesSearch ())
  
  (** <p>Creates a new test clock that can be attached to new customers and quotes.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks *)
  let postTestHelpersTestClocks =
    let _op = "/v1/test_helpers/test_clocks" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (test_helpers_test_clock * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_b8bc4c75fe
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.test_helpers_test_clock) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTestHelpersTestClocks ())
  
  (** <p>Returns a list of your test clocks.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks *)
  let getTestHelpersTestClocks =
    let _op = "/v1/test_helpers/test_clocks" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_56aeea4dc2 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_56aeea4dc2) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTestHelpersTestClocks ())
  
  (** <p>Creates a Tax <code>Transaction</code> from a calculation.</p>
      
      @see "openapi/spec3.json" /v1/tax/transactions/create_from_calculation *)
  let postTaxTransactionsCreateFromCalculation =
    let _op = "/v1/tax/transactions/create_from_calculation" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (tax_transaction * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_ff9dfe3c27
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.tax_transaction) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTaxTransactionsCreateFromCalculation ())
  
  (** <p>Creates a payment method configuration</p>
      
      @see "openapi/spec3.json" /v1/payment_method_configurations *)
  let postPaymentMethodConfigurations =
    let _op = "/v1/payment_method_configurations" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_method_configuration * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_ee2c09384f
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.payment_method_configuration) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPaymentMethodConfigurations ())
  
  (** <p>List payment method configurations</p>
      
      @see "openapi/spec3.json" /v1/payment_method_configurations *)
  let getPaymentMethodConfigurations =
    let _op = "/v1/payment_method_configurations" in
    let _k _path ?application ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_4aa3de8048 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match application with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_41b2207b76 ~p:"application" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_4aa3de8048) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPaymentMethodConfigurations ())
  
  (** <p>Creates a VerificationSession object.</p>
      
      <p>After the VerificationSession is created, display a verification modal using the session <code>client_secret</code> or send your users to the session’s <code>url</code>.</p>
      
      <p>If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.</p>
      
      <p>Related guide: <a href="/docs/identity/verify-identity-documents">Verify your users’ identity documents</a></p>
      
      @see "openapi/spec3.json" /v1/identity/verification_sessions *)
  let postIdentityVerificationSessions =
    let _op = "/v1/identity/verification_sessions" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (identity_verification_session * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_c3c4ee4be6
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.identity_verification_session) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postIdentityVerificationSessions ())
  
  (** <p>Returns a list of VerificationSessions</p>
      
      @see "openapi/spec3.json" /v1/identity/verification_sessions *)
  let getIdentityVerificationSessions =
    let _op = "/v1/identity/verification_sessions" in
    let _k _path ?client_reference_id ?created ?ending_before ?expand ?limit
        ?starting_after ?status
        _req :
          ([`CH_OK of (t_611fc95c22 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match client_reference_id with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"client_reference_id" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_8333ac0d50 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_060ea1562f ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_611fc95c22) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIdentityVerificationSessions ())
  
  (** <p>Lists all available Climate supplier objects.</p>
      
      @see "openapi/spec3.json" /v1/climate/suppliers *)
  let getClimateSuppliers =
    let _op = "/v1/climate/suppliers" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_9108407aa1 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_9108407aa1) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getClimateSuppliers ())
  
  (** <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
      
      <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
      
      @see "openapi/spec3.json" /v1/balance_transactions *)
  let getBalanceTransactions =
    let _op = "/v1/balance_transactions" in
    let _k _path ?created ?currency ?ending_before ?expand ?limit ?payout
        ?source ?starting_after ?type_
        _req :
          ([`CH_OK of (t_8c2090b0f2 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_e84cc44f8f ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match currency with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"currency" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match payout with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"payout" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match source with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"source" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match type_ with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"type" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_8c2090b0f2) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getBalanceTransactions ())
  
  (** <p>Creates an Issuing <code>Dispute</code> object. Individual pieces of evidence within the <code>evidence</code> object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a> for more details about evidence requirements.</p>
      
      @see "openapi/spec3.json" /v1/issuing/disputes *)
  let postIssuingDisputes =
    let _op = "/v1/issuing/disputes" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_dispute * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_e3c236c6f0
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.issuing_dispute) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postIssuingDisputes ())
  
  (** <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/disputes *)
  let getIssuingDisputes =
    let _op = "/v1/issuing/disputes" in
    let _k _path ?created ?ending_before ?expand ?limit ?starting_after
        ?status ?transaction
        _req :
          ([`CH_OK of (t_bd998bd157 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_be86c12b19 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_4b1fd7d313 ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match transaction with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"transaction" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_bd998bd157) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIssuingDisputes ())
  
  (** <p>Creates a billing meter</p>
      
      @see "openapi/spec3.json" /v1/billing/meters *)
  let postBillingMeters =
    let _op = "/v1/billing/meters" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (billing_meter * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_8abffeff82
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.billing_meter) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postBillingMeters ())
  
  (** <p>Retrieve a list of billing meters.</p>
      
      @see "openapi/spec3.json" /v1/billing/meters *)
  let getBillingMeters =
    let _op = "/v1/billing/meters" in
    let _k _path ?ending_before ?expand ?limit ?starting_after ?status
        _req :
          ([`CH_OK of (t_7cdca19673 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_b478178155 ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_7cdca19673) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getBillingMeters ())
  
  (** <p>Creates a customer session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.</p>
      
      @see "openapi/spec3.json" /v1/customer_sessions *)
  let postCustomerSessions =
    let _op = "/v1/customer_sessions" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (customer_session * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_13373ed36b
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.customer_session) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCustomerSessions ())
  
  (** <p>Search for products you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/products/search *)
  let getProductsSearch =
    let _op = "/v1/products/search" in
    let _k _path ?expand ?limit ?page ~query
        _req :
          ([`CH_OK of (t_be54f3678d * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match page with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"page" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"query" ~op:_op ~loc:`Query ~style:`Form ~explode:true query in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_be54f3678d) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getProductsSearch ())
  
  (** <p>Creates a ForwardingRequest object.</p>
      
      @see "openapi/spec3.json" /v1/forwarding/requests *)
  let postForwardingRequests =
    let _op = "/v1/forwarding/requests" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (forwarding_request * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_4793eca8c7
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.forwarding_request) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postForwardingRequests ())
  
  (** <p>Lists all ForwardingRequest objects.</p>
      
      @see "openapi/spec3.json" /v1/forwarding/requests *)
  let getForwardingRequests =
    let _op = "/v1/forwarding/requests" in
    let _k _path ?created ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_893b63e1ac * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_a63e6bd7de ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_893b63e1ac) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getForwardingRequests ())
  
  (** <p>Creates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.</p>
      
      @see "openapi/spec3.json" /v1/treasury/financial_accounts *)
  let postTreasuryFinancialAccounts =
    let _op = "/v1/treasury/financial_accounts" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_financial_account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_7853ce0404
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_financial_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTreasuryFinancialAccounts ())
  
  (** <p>Returns a list of FinancialAccounts.</p>
      
      @see "openapi/spec3.json" /v1/treasury/financial_accounts *)
  let getTreasuryFinancialAccounts =
    let _op = "/v1/treasury/financial_accounts" in
    let _k _path ?created ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_03e433631d * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_9096085c5b ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_03e433631d) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTreasuryFinancialAccounts ())
  
  (** <p>Creates a single-use token that represents a bank account’s details.
      You can use this token with any API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a <a href="#accounts">connected account</a> where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a> is <code>application</code>, which includes Custom accounts.</p>
      
      @see "openapi/spec3.json" /v1/tokens *)
  let postTokens =
    let _op = "/v1/tokens" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (token * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_a20dfc8c22
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.token) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTokens ())
  
  (** <p>Creates a new tax rate.</p>
      
      @see "openapi/spec3.json" /v1/tax_rates *)
  let postTaxRates =
    let _op = "/v1/tax_rates" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (tax_rate * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_0b4946f6fc
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.tax_rate) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTaxRates ())
  
  (** <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p>
      
      @see "openapi/spec3.json" /v1/tax_rates *)
  let getTaxRates =
    let _op = "/v1/tax_rates" in
    let _k _path ?active ?created ?ending_before ?expand ?inclusive ?limit
        ?starting_after
        _req :
          ([`CH_OK of (t_6d5428228f * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match active with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"active" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_ef1df523db ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match inclusive with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"inclusive" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_6d5428228f) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTaxRates ())
  
  (** <p>Returns a list of scheduled query runs.</p>
      
      @see "openapi/spec3.json" /v1/sigma/scheduled_query_runs *)
  let getSigmaScheduledQueryRuns =
    let _op = "/v1/sigma/scheduled_query_runs" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_eca50da3b0 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_eca50da3b0) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getSigmaScheduledQueryRuns ())
  
  (** <p>A quote models prices and services for a customer. Default options for <code>header</code>, <code>description</code>, <code>footer</code>, and <code>expires_at</code> can be set in the dashboard via the <a href="https://dashboard.stripe.com/settings/billing/quote">quote template</a>.</p>
      
      @see "openapi/spec3.json" /v1/quotes *)
  let postQuotes =
    let _op = "/v1/quotes" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (quote * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_59e65fb449
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.quote) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postQuotes ())
  
  (** <p>Returns a list of your quotes.</p>
      
      @see "openapi/spec3.json" /v1/quotes *)
  let getQuotes =
    let _op = "/v1/quotes" in
    let _k _path ?customer ?ending_before ?expand ?limit ?starting_after
        ?status ?test_clock
        _req :
          ([`CH_OK of (t_6abafa8ff5 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match customer with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"customer" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_b2c88d22a6 ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match test_clock with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"test_clock" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_6abafa8ff5) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getQuotes ())
  
  (** <p>Creates a new customer object.</p>
      
      @see "openapi/spec3.json" /v1/customers *)
  let postCustomers =
    let _op = "/v1/customers" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (customer * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_e376b878c0
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.customer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCustomers ())
  
  (** <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p>
      
      @see "openapi/spec3.json" /v1/customers *)
  let getCustomers =
    let _op = "/v1/customers" in
    let _k _path ?created ?email ?ending_before ?expand ?limit
        ?starting_after ?test_clock
        _req :
          ([`CH_OK of (t_37ec4334cc * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_8cd3871a8a ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match email with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"email" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match test_clock with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"test_clock" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_37ec4334cc) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCustomers ())
  
  (** <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p>
      
      @see "openapi/spec3.json" /v1/application_fees *)
  let getApplicationFees =
    let _op = "/v1/application_fees" in
    let _k _path ?charge ?created ?ending_before ?expand ?limit
        ?starting_after
        _req :
          ([`CH_OK of (t_0a9659a95b * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match charge with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"charge" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_9d68bdd713 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_0a9659a95b) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getApplicationFees ())
  
  (** <p>Creates a new source object.</p>
      
      @see "openapi/spec3.json" /v1/sources *)
  let postSources =
    let _op = "/v1/sources" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (source * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_ceefb946bc
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.source) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postSources ())
  
  (** <p>Returns a list of SetupAttempts that associate with a provided SetupIntent.</p>
      
      @see "openapi/spec3.json" /v1/setup_attempts *)
  let getSetupAttempts =
    let _op = "/v1/setup_attempts" in
    let _k _path ?created ?ending_before ?expand ?limit ~setup_intent
        ?starting_after
        _req :
          ([`CH_OK of (t_7e943f39e7 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_62ebe57aa0 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"setup_intent" ~op:_op ~loc:`Query ~style:`Form ~explode:true setup_intent in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_7e943f39e7) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getSetupAttempts ())
  
  (** <p>Creates a PaymentIntent object.</p>
      
      <p>After the PaymentIntent is created, attach a payment method and <a href="/docs/api/payment_intents/confirm">confirm</a>
      to continue the payment. Learn more about <a href="/docs/payments/payment-intents">the available payment flows
      with the Payment Intents API</a>.</p>
      
      <p>When you use <code>confirm=true</code> during creation, it’s equivalent to creating
      and confirming the PaymentIntent in the same call. You can use any parameters
      available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when you supply
      <code>confirm=true</code>.</p>
      
      @see "openapi/spec3.json" /v1/payment_intents *)
  let postPaymentIntents =
    let _op = "/v1/payment_intents" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_intent * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_52bf04ba74
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_intent) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPaymentIntents ())
  
  (** <p>Returns a list of PaymentIntents.</p>
      
      @see "openapi/spec3.json" /v1/payment_intents *)
  let getPaymentIntents =
    let _op = "/v1/payment_intents" in
    let _k _path ?created ?customer ?ending_before ?expand ?limit
        ?starting_after
        _req :
          ([`CH_OK of (t_35ca92ace5 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_94e066c621 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match customer with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"customer" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_35ca92ace5) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPaymentIntents ())
  
  (** <p>Returns a list of Financial Connections <code>Transaction</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/financial_connections/transactions *)
  let getFinancialConnectionsTransactions =
    let _op = "/v1/financial_connections/transactions" in
    let _k _path ~account ?ending_before ?expand ?limit ?starting_after
        ?transacted_at ?transaction_refresh
        _req :
          ([`CH_OK of (t_3224eff6ab * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"account" ~op:_op ~loc:`Query ~style:`Form ~explode:true account in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match transacted_at with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_656d49aac0 ~p:"transacted_at" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match transaction_refresh with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_83d5590180 ~p:"transaction_refresh" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_3224eff6ab) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getFinancialConnectionsTransactions ())
  
  (** <p>A list of <a href="https://stripe.com/docs/tax/tax-categories">all tax codes available</a> to add to Products in order to allow specific tax calculations.</p>
      
      @see "openapi/spec3.json" /v1/tax_codes *)
  let getTaxCodes =
    let _op = "/v1/tax_codes" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_766d30cb77 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_766d30cb77) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTaxCodes ())
  
  (** <p>Creates a new product object.</p>
      
      @see "openapi/spec3.json" /v1/products *)
  let postProducts =
    let _op = "/v1/products" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (product * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_b53a42e3b7
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.product) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postProducts ())
  
  (** <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
      
      @see "openapi/spec3.json" /v1/products *)
  let getProducts =
    let _op = "/v1/products" in
    let _k _path ?active ?created ?ending_before ?expand ?ids ?limit
        ?shippable ?starting_after ?url
        _req :
          ([`CH_OK of (t_23767204da * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match active with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"active" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_c04b129744 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ids with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"ids" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match shippable with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"shippable" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match url with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"url" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_23767204da) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getProducts ())
  
  (** <p>Creates a session of the customer portal.</p>
      
      @see "openapi/spec3.json" /v1/billing_portal/sessions *)
  let postBillingPortalSessions =
    let _op = "/v1/billing_portal/sessions" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (billing_portal_session * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_7157acb4f8
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.billing_portal_session) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postBillingPortalSessions ())
  
  (** <p>This method is no longer recommended—use the <a href="/docs/api/payment_intents">Payment Intents API</a>
      to initiate a new payment instead. Confirmation of the PaymentIntent creates the <code>Charge</code>
      object used to request payment.</p>
      
      @see "openapi/spec3.json" /v1/charges *)
  let postCharges =
    let _op = "/v1/charges" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (charge * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_110aeba15a
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.charge) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCharges ())
  
  (** <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>
      
      @see "openapi/spec3.json" /v1/charges *)
  let getCharges =
    let _op = "/v1/charges" in
    let _k _path ?created ?customer ?ending_before ?expand ?limit
        ?payment_intent ?starting_after ?transfer_group
        _req :
          ([`CH_OK of (t_e9250fb72c * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_9b9d8d63ef ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match customer with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"customer" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match payment_intent with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"payment_intent" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match transfer_group with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"transfer_group" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_e9250fb72c) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCharges ())
  
  (** <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p>
      
      @see "openapi/spec3.json" /v1/radar/value_list_items *)
  let postRadarValueListItems =
    let _op = "/v1/radar/value_list_items" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (radar_value_list_item * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_a1c266101e
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.radar_value_list_item) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postRadarValueListItems ())
  
  (** <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/radar/value_list_items *)
  let getRadarValueListItems =
    let _op = "/v1/radar/value_list_items" in
    let _k _path ?created ?ending_before ?expand ?limit ?starting_after
        ?value ~value_list
        _req :
          ([`CH_OK of (t_8856fbd6de * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_438f8e3e47 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match value with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"value" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"value_list" ~op:_op ~loc:`Query ~style:`Form ~explode:true value_list in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_8856fbd6de) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getRadarValueListItems ())
  
  (** <p>Creates a payment method domain.</p>
      
      @see "openapi/spec3.json" /v1/payment_method_domains *)
  let postPaymentMethodDomains =
    let _op = "/v1/payment_method_domains" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_method_domain * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_ed10fbf1d5
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.payment_method_domain) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPaymentMethodDomains ())
  
  (** <p>Lists the details of existing payment method domains.</p>
      
      @see "openapi/spec3.json" /v1/payment_method_domains *)
  let getPaymentMethodDomains =
    let _op = "/v1/payment_method_domains" in
    let _k _path ?domain_name ?enabled ?ending_before ?expand ?limit
        ?starting_after
        _req :
          ([`CH_OK of (t_ae8386a4f0 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match domain_name with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"domain_name" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match enabled with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"enabled" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_ae8386a4f0) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPaymentMethodDomains ())
  
  (** <p>Returns a list of ReceivedCredits.</p>
      
      @see "openapi/spec3.json" /v1/treasury/received_credits *)
  let getTreasuryReceivedCredits =
    let _op = "/v1/treasury/received_credits" in
    let _k _path ?ending_before ?expand ~financial_account ?limit
        ?linked_flows ?starting_after ?status
        _req :
          ([`CH_OK of (t_f5d8852fd7 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"financial_account" ~op:_op ~loc:`Query ~style:`Form ~explode:true financial_account in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match linked_flows with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_99ae8c4576 ~p:"linked_flows" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_ae96c50be4 ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_f5d8852fd7) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTreasuryReceivedCredits ())
  
  (** <p>Creates an OutboundPayment.</p>
      
      @see "openapi/spec3.json" /v1/treasury/outbound_payments *)
  let postTreasuryOutboundPayments =
    let _op = "/v1/treasury/outbound_payments" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_outbound_payment * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_d8144f8c6c
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_outbound_payment) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTreasuryOutboundPayments ())
  
  (** <p>Returns a list of OutboundPayments sent from the specified FinancialAccount.</p>
      
      @see "openapi/spec3.json" /v1/treasury/outbound_payments *)
  let getTreasuryOutboundPayments =
    let _op = "/v1/treasury/outbound_payments" in
    let _k _path ?created ?customer ?ending_before ?expand ~financial_account
        ?limit ?starting_after ?status
        _req :
          ([`CH_OK of (t_b6ddc430a3 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_fd0b444db8 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match customer with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"customer" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"financial_account" ~op:_op ~loc:`Query ~style:`Form ~explode:true financial_account in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_e134f021a2 ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_b6ddc430a3) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTreasuryOutboundPayments ())
  
  (** <p>Creates a new <code>Reader</code> object.</p>
      
      @see "openapi/spec3.json" /v1/terminal/readers *)
  let postTerminalReaders =
    let _op = "/v1/terminal/readers" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (terminal_reader * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_51e4bf726b
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.terminal_reader) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTerminalReaders ())
  
  (** <p>Returns a list of <code>Reader</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/terminal/readers *)
  let getTerminalReaders =
    let _op = "/v1/terminal/readers" in
    let _k _path ?device_type ?ending_before ?expand ?limit ?location
        ?serial_number ?starting_after ?status
        _req :
          ([`CH_OK of (t_a08011fc7e * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match device_type with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_477c159e47 ~p:"device_type" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match location with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"location" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match serial_number with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"serial_number" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_76a6cf8994 ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_a08011fc7e) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTerminalReaders ())
  
  (** <p>Creates a new account or customer <code>tax_id</code> object.</p>
      
      @see "openapi/spec3.json" /v1/tax_ids *)
  let postTaxIds =
    let _op = "/v1/tax_ids" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (tax_id * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_6b2866cf6b
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.tax_id) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTaxIds ())
  
  (** <p>Returns a list of tax IDs.</p>
      
      @see "openapi/spec3.json" /v1/tax_ids *)
  let getTaxIds =
    let _op = "/v1/tax_ids" in
    let _k _path ?ending_before ?expand ?limit ?owner ?starting_after
        _req :
          ([`CH_OK of (t_dd3507c4bc * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match owner with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_17690afaaf ~p:"owner" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_dd3507c4bc) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTaxIds ())
  
  (** <p>Creates a new Tax <code>Registration</code> object.</p>
      
      @see "openapi/spec3.json" /v1/tax/registrations *)
  let postTaxRegistrations =
    let _op = "/v1/tax/registrations" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (tax_registration * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_d4cfd141aa
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.tax_registration) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTaxRegistrations ())
  
  (** <p>Returns a list of Tax <code>Registration</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/tax/registrations *)
  let getTaxRegistrations =
    let _op = "/v1/tax/registrations" in
    let _k _path ?ending_before ?expand ?limit ?starting_after ?status
        _req :
          ([`CH_OK of (t_d15b8e2101 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_66eb6371e3 ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_d15b8e2101) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTaxRegistrations ())
  
  (** <p>Creates a billing meter event</p>
      
      @see "openapi/spec3.json" /v1/billing/meter_events *)
  let postBillingMeterEvents =
    let _op = "/v1/billing/meter_events" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (billing_meter_event * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_be3cd11bea
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.billing_meter_event) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postBillingMeterEvents ())
  
  (** <p>Creates a SetupIntent object.</p>
      
      <p>After you create the SetupIntent, attach a payment method and <a href="/docs/api/setup_intents/confirm">confirm</a>
      it to collect any required permissions to charge the payment method later.</p>
      
      @see "openapi/spec3.json" /v1/setup_intents *)
  let postSetupIntents =
    let _op = "/v1/setup_intents" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (setup_intent * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_0ec470b3d8
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.setup_intent) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postSetupIntents ())
  
  (** <p>Returns a list of SetupIntents.</p>
      
      @see "openapi/spec3.json" /v1/setup_intents *)
  let getSetupIntents =
    let _op = "/v1/setup_intents" in
    let _k _path ?attach_to_self ?created ?customer ?ending_before ?expand
        ?limit ?payment_method ?starting_after
        _req :
          ([`CH_OK of (t_239fb21d51 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match attach_to_self with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"attach_to_self" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_47dcc46a23 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match customer with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"customer" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match payment_method with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"payment_method" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_239fb21d51) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getSetupIntents ())
  
  (** <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users.
      To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>
      
      <p>If you’ve already collected information for your connected accounts, you <a href="/docs/connect/best-practices#onboarding">can prefill that information</a> when
      creating the account. Connect Onboarding won’t ask for the prefilled information during account onboarding.
      You can prefill any information on the account.</p>
      
      @see "openapi/spec3.json" /v1/accounts *)
  let postAccounts =
    let _op = "/v1/accounts" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_ccb3a5d119
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postAccounts ())
  
  (** <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p>
      
      @see "openapi/spec3.json" /v1/accounts *)
  let getAccounts =
    let _op = "/v1/accounts" in
    let _k _path ?created ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_e9e70482f6 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_ab8d71cc96 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_e9e70482f6) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getAccounts ())
  
  (** <p>Search for prices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/prices/search *)
  let getPricesSearch =
    let _op = "/v1/prices/search" in
    let _k _path ?expand ?limit ?page ~query
        _req :
          ([`CH_OK of (t_b12b4b0777 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match page with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"page" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"query" ~op:_op ~loc:`Query ~style:`Form ~explode:true query in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_b12b4b0777) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPricesSearch ())
  
  (** <p>To upload a file to Stripe, you need to send a request of type <code>multipart/form-data</code>. Include the file you want to upload in the request, and the parameters for creating a file.</p>
      
      <p>All of Stripe’s officially supported Client libraries support sending <code>multipart/form-data</code>.</p>
      
      @see "openapi/spec3.json" /v1/files *)
  let postFiles =
    let _op = "/v1/files" in
    let _k _path () :
                   ([
                     `CH_OK of
                       (file * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.file) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postFiles ())
  
  (** <p>Returns a list of the files that your account has access to. Stripe sorts and returns the files by their creation dates, placing the most recently created files at the top.</p>
      
      @see "openapi/spec3.json" /v1/files *)
  let getFiles =
    let _op = "/v1/files" in
    let _k _path ?created ?ending_before ?expand ?limit ?purpose
        ?starting_after
        _req :
          ([`CH_OK of (t_2a634191d6 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_2657bcad54 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match purpose with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_512e4129fd ~p:"purpose" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_2a634191d6) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getFiles ())
  
  (** <p>Returns a full list of Report Types.</p>
      
      @see "openapi/spec3.json" /v1/reporting/report_types *)
  let getReportingReportTypes =
    let _op = "/v1/reporting/report_types" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (t_e7f85dc1b8 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_e7f85dc1b8) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getReportingReportTypes ())
  
  (** <p>This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you <a href="#finalize_invoice">finalize</a> the invoice, which allows you to <a href="#pay_invoice">pay</a> or <a href="#send_invoice">send</a> the invoice to your customers.</p>
      
      @see "openapi/spec3.json" /v1/invoices *)
  let postInvoices =
    let _op = "/v1/invoices" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (invoice * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_f4dd4bd97f
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.invoice) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postInvoices ())
  
  (** <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>
      
      @see "openapi/spec3.json" /v1/invoices *)
  let getInvoices =
    let _op = "/v1/invoices" in
    let _k _path ?collection_method ?created ?customer ?due_date
        ?ending_before ?expand ?limit ?starting_after ?status ?subscription
        _req :
          ([`CH_OK of (t_3fdedd95af * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match collection_method with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_3d308e0087 ~p:"collection_method" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_5fae893ff7 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match customer with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"customer" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match due_date with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_e8ff8d2aa0 ~p:"due_date" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_2e0259263b ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match subscription with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"subscription" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_3fdedd95af) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getInvoices ())
  
  (** <p>Lists all Country Spec objects available in the API.</p>
      
      @see "openapi/spec3.json" /v1/country_specs *)
  let getCountrySpecs =
    let _op = "/v1/country_specs" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_dae1032511 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_dae1032511) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCountrySpecs ())
  
  (** <p>Deletes a secret from the secret store by name and scope.</p>
      
      @see "openapi/spec3.json" /v1/apps/secrets/delete *)
  let postAppsSecretsDelete =
    let _op = "/v1/apps/secrets/delete" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (apps_secret * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_612edc5ff6
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.apps_secret) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postAppsSecretsDelete ())
  
  (** <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p>
      
      @see "openapi/spec3.json" /v1/account_links *)
  let postAccountLinks =
    let _op = "/v1/account_links" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (account_link * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_af021e5cb9
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.account_link) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postAccountLinks ())
  
  (** <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p>
      
      <p>Instead of creating a PaymentMethod directly, we recommend using the <a href="/docs/payments/accept-a-payment">PaymentIntents</a> API to accept a payment immediately or the <a href="/docs/payments/save-and-reuse">SetupIntent</a> API to collect payment method details ahead of a future payment.</p>
      
      @see "openapi/spec3.json" /v1/payment_methods *)
  let postPaymentMethods =
    let _op = "/v1/payment_methods" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_method * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_e421cf319c
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_method) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPaymentMethods ())
  
  (** <p>Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the <a href="/docs/api/payment_methods/customer_list">List a Customer’s PaymentMethods</a> API instead.</p>
      
      @see "openapi/spec3.json" /v1/payment_methods *)
  let getPaymentMethods =
    let _op = "/v1/payment_methods" in
    let _k _path ?customer ?ending_before ?expand ?limit ?starting_after
        ?type_
        _req :
          ([`CH_OK of (t_74744e00a9 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match customer with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"customer" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match type_ with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_735ee27343 ~p:"type" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_74744e00a9) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPaymentMethods ())
  
  (** <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
      
      @see "openapi/spec3.json" /v1/financial_connections/sessions *)
  let postFinancialConnectionsSessions =
    let _op = "/v1/financial_connections/sessions" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (financial_connections_session * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_cde4466fd6
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.financial_connections_session) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postFinancialConnectionsSessions ())
  
  (** <p>Reverses a ReceivedCredit and creates a CreditReversal object.</p>
      
      @see "openapi/spec3.json" /v1/treasury/credit_reversals *)
  let postTreasuryCreditReversals =
    let _op = "/v1/treasury/credit_reversals" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_credit_reversal * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_a5c801e05a
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_credit_reversal) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTreasuryCreditReversals ())
  
  (** <p>Returns a list of CreditReversals.</p>
      
      @see "openapi/spec3.json" /v1/treasury/credit_reversals *)
  let getTreasuryCreditReversals =
    let _op = "/v1/treasury/credit_reversals" in
    let _k _path ?ending_before ?expand ~financial_account ?limit
        ?received_credit ?starting_after ?status
        _req :
          ([`CH_OK of (t_cd83af3254 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"financial_account" ~op:_op ~loc:`Query ~style:`Form ~explode:true financial_account in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match received_credit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"received_credit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_de06274f51 ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_cd83af3254) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTreasuryCreditReversals ())
  
  (** <p>Top up the balance of an account</p>
      
      @see "openapi/spec3.json" /v1/topups *)
  let postTopups =
    let _op = "/v1/topups" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (topup * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_022e0bcd29
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.topup) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTopups ())
  
  (** <p>Returns a list of top-ups.</p>
      
      @see "openapi/spec3.json" /v1/topups *)
  let getTopups =
    let _op = "/v1/topups" in
    let _k _path ?amount ?created ?ending_before ?expand ?limit
        ?starting_after ?status
        _req :
          ([`CH_OK of (t_b3bb6e49c1 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match amount with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_6684cf5aa7 ~p:"amount" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_ca787dca43 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_ce1d711154 ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_b3bb6e49c1) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTopups ())
  
  (** <p>Creates a new <code>Location</code> object.
      For further details, including which address fields are required in each country, see the <a href="/docs/terminal/fleet/locations">Manage locations</a> guide.</p>
      
      @see "openapi/spec3.json" /v1/terminal/locations *)
  let postTerminalLocations =
    let _op = "/v1/terminal/locations" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (terminal_location * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_37595dc516
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.terminal_location) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTerminalLocations ())
  
  (** <p>Returns a list of <code>Location</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/terminal/locations *)
  let getTerminalLocations =
    let _op = "/v1/terminal/locations" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_18896ee670 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_18896ee670) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTerminalLocations ())
  
  (** <p>Search for invoices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/invoices/search *)
  let getInvoicesSearch =
    let _op = "/v1/invoices/search" in
    let _k _path ?expand ?limit ?page ~query
        _req :
          ([`CH_OK of (t_0dd02c6566 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match page with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"page" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"query" ~op:_op ~loc:`Query ~style:`Form ~explode:true query in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_0dd02c6566) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getInvoicesSearch ())
  
  (** <p>Partially or fully reverses a previously created <code>Transaction</code>.</p>
      
      @see "openapi/spec3.json" /v1/tax/transactions/create_reversal *)
  let postTaxTransactionsCreateReversal =
    let _op = "/v1/tax/transactions/create_reversal" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (tax_transaction * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_dffa1193e7
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.tax_transaction) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTaxTransactionsCreateReversal ())
  
  (** <p>Returns a list of early fraud warnings.</p>
      
      @see "openapi/spec3.json" /v1/radar/early_fraud_warnings *)
  let getRadarEarlyFraudWarnings =
    let _op = "/v1/radar/early_fraud_warnings" in
    let _k _path ?charge ?created ?ending_before ?expand ?limit
        ?payment_intent ?starting_after
        _req :
          ([`CH_OK of (t_c75c63afbf * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match charge with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"charge" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_902cd52d55 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match payment_intent with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"payment_intent" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_c75c63afbf) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getRadarEarlyFraudWarnings ())
  
  (** <p>To send funds to your own bank account, create a new payout object. Your <a href="#balance">Stripe balance</a> must cover the payout amount. If it doesn’t, you receive an “Insufficient Funds” error.</p>
      
      <p>If your API key is in test mode, money won’t actually be sent, though every other action occurs as if you’re in live mode.</p>
      
      <p>If you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>
      
      @see "openapi/spec3.json" /v1/payouts *)
  let postPayouts =
    let _op = "/v1/payouts" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payout * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_14881ac1de
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payout) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPayouts ())
  
  (** <p>Returns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.</p>
      
      @see "openapi/spec3.json" /v1/payouts *)
  let getPayouts =
    let _op = "/v1/payouts" in
    let _k _path ?arrival_date ?created ?destination ?ending_before ?expand
        ?limit ?starting_after ?status
        _req :
          ([`CH_OK of (t_1db4f9e6c3 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match arrival_date with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_dfda23638e ~p:"arrival_date" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_78f6837d46 ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match destination with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"destination" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match status with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"status" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_1db4f9e6c3) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPayouts ())
  
  (** <p>A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.</p>
      
      @see "openapi/spec3.json" /v1/promotion_codes *)
  let postPromotionCodes =
    let _op = "/v1/promotion_codes" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (promotion_code * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_cd74e8c628
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.promotion_code) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPromotionCodes ())
  
  (** <p>Returns a list of your promotion codes.</p>
      
      @see "openapi/spec3.json" /v1/promotion_codes *)
  let getPromotionCodes =
    let _op = "/v1/promotion_codes" in
    let _k _path ?active ?code ?coupon ?created ?customer ?ending_before
        ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_2bf486f9cb * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match active with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Bool ~p:"active" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match code with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"code" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match coupon with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"coupon" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_1d3358b59f ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match customer with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"customer" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_2bf486f9cb) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPromotionCodes ())
  
  (** <p>Creates a test mode Confirmation Token server side for your integration tests.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/confirmation_tokens *)
  let postTestHelpersConfirmationTokens =
    let _op = "/v1/test_helpers/confirmation_tokens" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (confirmation_token * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_c84b074f55
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.confirmation_token) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTestHelpersConfirmationTokens ())
  
  (** <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p>
      
      @see "openapi/spec3.json" /v1/subscription_items *)
  let postSubscriptionItems =
    let _op = "/v1/subscription_items" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (subscription_item * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_bfa35cdc31
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.subscription_item) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postSubscriptionItems ())
  
  (** <p>Returns a list of your subscription items for a given subscription.</p>
      
      @see "openapi/spec3.json" /v1/subscription_items *)
  let getSubscriptionItems =
    let _op = "/v1/subscription_items" in
    let _k _path ?ending_before ?expand ?limit ?starting_after ~subscription
        _req :
          ([`CH_OK of (t_d9f7fccdc8 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"subscription" ~op:_op ~loc:`Query ~style:`Form ~explode:true subscription in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_d9f7fccdc8) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getSubscriptionItems ())
  
  (** <p>List all verification reports.</p>
      
      @see "openapi/spec3.json" /v1/identity/verification_reports *)
  let getIdentityVerificationReports =
    let _op = "/v1/identity/verification_reports" in
    let _k _path ?client_reference_id ?created ?ending_before ?expand ?limit
        ?starting_after ?type_ ?verification_session
        _req :
          ([`CH_OK of (t_29f9765270 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match client_reference_id with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"client_reference_id" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_b566f1b6bc ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match type_ with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_53be0c51ff ~p:"type" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match verification_session with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"verification_session" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_29f9765270) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIdentityVerificationReports ())
  
  (** <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces
      its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result
      in any combination of the following:</p>
      
      <ul>
      <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li>
      <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li>
      <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li>
      </ul>
      
      <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>
      
      <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code>
      or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
      
      @see "openapi/spec3.json" /v1/credit_notes *)
  let postCreditNotes =
    let _op = "/v1/credit_notes" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (credit_note * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_e1077cf4c3
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.credit_note) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCreditNotes ())
  
  (** <p>Returns a list of credit notes.</p>
      
      @see "openapi/spec3.json" /v1/credit_notes *)
  let getCreditNotes =
    let _op = "/v1/credit_notes" in
    let _k _path ?created ?customer ?ending_before ?expand ?invoice ?limit
        ?starting_after
        _req :
          ([`CH_OK of (t_4187904f5b * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match created with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_d1452a2e6d ~p:"created" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match customer with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"customer" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match invoice with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"invoice" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_4187904f5b) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCreditNotes ())
  
  (** <p>Lists all available Climate product objects.</p>
      
      @see "openapi/spec3.json" /v1/climate/products *)
  let getClimateProducts =
    let _op = "/v1/climate/products" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_b683fe32c7 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_b683fe32c7) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getClimateProducts ())
  
  (** <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p>
      
      @param webhook_endpoint webhook_endpoint
      @see "openapi/spec3.json" /v1/webhook_endpoints/\{webhook_endpoint\} *)
  let deleteWebhookEndpointsWebhookEndpoint =
    let _op = "/v1/webhook_endpoints/{webhook_endpoint}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_webhook_endpoint * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.deleted_webhook_endpoint) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteWebhookEndpointsWebhookEndpoint ())
  
  (** <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p>
      
      @param webhook_endpoint webhook_endpoint
      @see "openapi/spec3.json" /v1/webhook_endpoints/\{webhook_endpoint\} *)
  let postWebhookEndpointsWebhookEndpoint =
    let _op = "/v1/webhook_endpoints/{webhook_endpoint}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (webhook_endpoint * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_9298cf8106
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.webhook_endpoint) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postWebhookEndpointsWebhookEndpoint ())
  
  (** <p>Retrieves the webhook endpoint with the given ID.</p>
      
      @param webhook_endpoint webhook_endpoint
      @see "openapi/spec3.json" /v1/webhook_endpoints/\{webhook_endpoint\} *)
  let getWebhookEndpointsWebhookEndpoint =
    let _op = "/v1/webhook_endpoints/{webhook_endpoint}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (webhook_endpoint * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.webhook_endpoint) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getWebhookEndpointsWebhookEndpoint ())
  
  (** <p>Increment a test-mode Authorization.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations/\{authorization\}/increment *)
  let postTestHelpersIssuingAuthorizationsAuthorizationIncrement =
    let _op = "/v1/test_helpers/issuing/authorizations/{authorization}/increment" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_authorization * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_080ebc81a7
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_authorization) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersIssuingAuthorizationsAuthorizationIncrement ())
  
  (** <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\} *)
  let deleteCustomersCustomer =
    let _op = "/v1/customers/{customer}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_customer * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.deleted_customer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteCustomersCustomer ())
  
  (** <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>
      
      <p>This request accepts mostly the same arguments as the customer creation call.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\} *)
  let postCustomersCustomer =
    let _op = "/v1/customers/{customer}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (customer * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_ccfda63fd5
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.customer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCustomersCustomer ())
  
  (** <p>Retrieves a Customer object.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\} *)
  let getCustomersCustomer =
    let _op = "/v1/customers/{customer}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (t_a33375052d * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_a33375052d) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCustomersCustomer ())
  
  (** <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p>
      
      @param plan plan
      @see "openapi/spec3.json" /v1/plans/\{plan\} *)
  let deletePlansPlan =
    let _op = "/v1/plans/{plan}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_plan * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.deleted_plan) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deletePlansPlan ())
  
  (** <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p>
      
      @param plan plan
      @see "openapi/spec3.json" /v1/plans/\{plan\} *)
  let postPlansPlan =
    let _op = "/v1/plans/{plan}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (plan * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_1f7b8fed6b
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.plan) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPlansPlan ())
  
  (** <p>Retrieves the plan with the given ID.</p>
      
      @param plan plan
      @see "openapi/spec3.json" /v1/plans/\{plan\} *)
  let getPlansPlan =
    let _op = "/v1/plans/{plan}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (plan * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.plan) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPlansPlan ())
  
  (** <p>With <a href="/connect">Connect</a>, you can delete accounts you manage.</p>
      
      <p>Test-mode accounts can be deleted at any time.</p>
      
      <p>Live-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be deleted when all <a href="/api/balance/balanace_object">balances</a> are zero.</p>
      
      <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/settings/account">account information tab in your account settings</a> instead.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\} *)
  let deleteAccountsAccount =
    let _op = "/v1/accounts/{account}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.deleted_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteAccountsAccount ())
  
  (** <p>Updates a <a href="/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are
      left unchanged.</p>
      
      <p>For accounts where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a>
      is <code>application</code>, which includes Custom accounts, you can update any information on the account.</p>
      
      <p>For accounts where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a>
      is <code>stripe</code>, which includes Standard and Express accounts, you can update all information until you create
      an <a href="/api/account_links">Account Link</a> or <a href="/api/account_sessions">Account Session</a> to start Connect onboarding,
      after which some properties can no longer be updated.</p>
      
      <p>To update your own account, use the <a href="https://dashboard.stripe.com/settings/account">Dashboard</a>. Refer to our
      <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\} *)
  let postAccountsAccount =
    let _op = "/v1/accounts/{account}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_89178ede20
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postAccountsAccount ())
  
  (** <p>Retrieves the details of an account.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\} *)
  let getAccountsAccount =
    let _op = "/v1/accounts/{account}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (account * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getAccountsAccount ())
  
  (** <p>Cancels an InboundTransfer.</p>
      
      @param inbound_transfer inbound_transfer
      @see "openapi/spec3.json" /v1/treasury/inbound_transfers/\{inbound_transfer\}/cancel *)
  let postTreasuryInboundTransfersInboundTransferCancel =
    let _op = "/v1/treasury/inbound_transfers/{inbound_transfer}/cancel" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_inbound_transfer * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_6f63e55d30
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_inbound_transfer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTreasuryInboundTransfersInboundTransferCancel ())
  
  (** <p>Deletes a <code>Configuration</code> object.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/terminal/configurations/\{configuration\} *)
  let deleteTerminalConfigurationsConfiguration =
    let _op = "/v1/terminal/configurations/{configuration}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_terminal_configuration * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.deleted_terminal_configuration) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteTerminalConfigurationsConfiguration ())
  
  (** <p>Updates a new <code>Configuration</code> object.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/terminal/configurations/\{configuration\} *)
  let postTerminalConfigurationsConfiguration =
    let _op = "/v1/terminal/configurations/{configuration}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (t_d5eeab4c25 * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_171e2b03d7
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_d5eeab4c25) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTerminalConfigurationsConfiguration ())
  
  (** <p>Retrieves a <code>Configuration</code> object.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/terminal/configurations/\{configuration\} *)
  let getTerminalConfigurationsConfiguration =
    let _op = "/v1/terminal/configurations/{configuration}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (t_95f3d529c1 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_95f3d529c1) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTerminalConfigurationsConfiguration ())
  
  (** <p>Retrieves the details of a Financial Connections <code>Session</code></p>
      
      @param session session
      @see "openapi/spec3.json" /v1/financial_connections/sessions/\{session\} *)
  let getFinancialConnectionsSessionsSession =
    let _op = "/v1/financial_connections/sessions/{session}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (financial_connections_session * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.financial_connections_session) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getFinancialConnectionsSessionsSession ())
  
  (** <p>Finalizes the quote.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/finalize *)
  let postQuotesQuoteFinalize =
    let _op = "/v1/quotes/{quote}/finalize" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (quote * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_5702cbe755
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.quote) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postQuotesQuoteFinalize ())
  
  (** <p>Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to <code>Ready</code>.</p>
      
      @param test_clock test_clock
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks/\{test_clock\}/advance *)
  let postTestHelpersTestClocksTestClockAdvance =
    let _op = "/v1/test_helpers/test_clocks/{test_clock}/advance" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (test_helpers_test_clock * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_791a007bd3
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.test_helpers_test_clock) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTestHelpersTestClocksTestClockAdvance ())
  
  (** <p>List source transactions for a given source.</p>
      
      @param source source
      @see "openapi/spec3.json" /v1/sources/\{source\}/source_transactions *)
  let getSourcesSourceSourceTransactions =
    let _op = "/v1/sources/{source}/source_transactions" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_f3516c2ed7 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_f3516c2ed7) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getSourcesSourceSourceTransactions ())
  
  (** <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\} *)
  let postChargesCharge =
    let _op = "/v1/charges/{charge}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (charge * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_0e88b91b2f
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.charge) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postChargesCharge ())
  
  (** <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\} *)
  let getChargesCharge =
    let _op = "/v1/charges/{charge}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (charge * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.charge) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getChargesCharge ())
  
  (** <p>Updates a payment link.</p>
      
      @param payment_link payment_link
      @see "openapi/spec3.json" /v1/payment_links/\{payment_link\} *)
  let postPaymentLinksPaymentLink =
    let _op = "/v1/payment_links/{payment_link}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_link * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_9b926cecf2
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_link) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPaymentLinksPaymentLink ())
  
  (** <p>Retrieve a payment link.</p>
      
      @param payment_link payment_link
      @see "openapi/spec3.json" /v1/payment_links/\{payment_link\} *)
  let getPaymentLinksPaymentLink =
    let _op = "/v1/payment_links/{payment_link}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (payment_link * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_link) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPaymentLinksPaymentLink ())
  
  (** <p>Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/received_credits/\{id\} *)
  let getTreasuryReceivedCreditsId =
    let _op = "/v1/treasury/received_credits/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (treasury_received_credit * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_received_credit) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTreasuryReceivedCreditsId ())
  
  (** <p>Updates a test mode created OutboundTransfer with tracking details. The OutboundTransfer must not be cancelable, and cannot be in the <code>canceled</code> or <code>failed</code> states.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_transfers/\{outbound_transfer\} *)
  let postTestHelpersTreasuryOutboundTransfersOutboundTransfer =
    let _op = "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_outbound_transfer * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_a55a65347d
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_outbound_transfer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersTreasuryOutboundTransfersOutboundTransfer ())
  
  (** <p>Updates an existing subscription schedule.</p>
      
      @param schedule schedule
      @see "openapi/spec3.json" /v1/subscription_schedules/\{schedule\} *)
  let postSubscriptionSchedulesSchedule =
    let _op = "/v1/subscription_schedules/{schedule}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (subscription_schedule * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_75107ffbeb
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.subscription_schedule) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postSubscriptionSchedulesSchedule ())
  
  (** <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p>
      
      @param schedule schedule
      @see "openapi/spec3.json" /v1/subscription_schedules/\{schedule\} *)
  let getSubscriptionSchedulesSchedule =
    let _op = "/v1/subscription_schedules/{schedule}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (subscription_schedule * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.subscription_schedule) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getSubscriptionSchedulesSchedule ())
  
  (** <p>Updates a VerificationSession object.</p>
      
      <p>When the session status is <code>requires_input</code>, you can use this method to update the
      verification check and options.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/identity/verification_sessions/\{session\} *)
  let postIdentityVerificationSessionsSession =
    let _op = "/v1/identity/verification_sessions/{session}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (identity_verification_session * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_194f6521ef
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.identity_verification_session) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postIdentityVerificationSessionsSession ())
  
  (** <p>Retrieves the details of a VerificationSession that was previously created.</p>
      
      <p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid
      <code>client_secret</code> or <code>url</code> to allow re-submission.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/identity/verification_sessions/\{session\} *)
  let getIdentityVerificationSessionsSession =
    let _op = "/v1/identity/verification_sessions/{session}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (identity_verification_session * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.identity_verification_session) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIdentityVerificationSessionsSession ())
  
  (** <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p>
      
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/payment_methods/\{payment_method\} *)
  let postPaymentMethodsPaymentMethod =
    let _op = "/v1/payment_methods/{payment_method}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_method * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_60145a641e
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_method) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPaymentMethodsPaymentMethod ())
  
  (** <p>Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use <a href="/docs/api/payment_methods/customer">Retrieve a Customer’s PaymentMethods</a></p>
      
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/payment_methods/\{payment_method\} *)
  let getPaymentMethodsPaymentMethod =
    let _op = "/v1/payment_methods/{payment_method}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (payment_method * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_method) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPaymentMethodsPaymentMethod ())
  
  (** <p>Retrieves a Session object.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/checkout/sessions/\{session\} *)
  let getCheckoutSessionsSession =
    let _op = "/v1/checkout/sessions/{session}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (checkout_session * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.checkout_session) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCheckoutSessionsSession ())
  
  (** <p>Initiates a setup intent flow on a Reader.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/process_setup_intent *)
  let postTerminalReadersReaderProcessSetupIntent =
    let _op = "/v1/terminal/readers/{reader}/process_setup_intent" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (terminal_reader * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_eafcec1a11
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.terminal_reader) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTerminalReadersReaderProcessSetupIntent ())
  
  (** <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p>
      
      @param value_list value_list
      @see "openapi/spec3.json" /v1/radar/value_lists/\{value_list\} *)
  let deleteRadarValueListsValueList =
    let _op = "/v1/radar/value_lists/{value_list}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_radar_value_list * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.deleted_radar_value_list) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteRadarValueListsValueList ())
  
  (** <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p>
      
      @param value_list value_list
      @see "openapi/spec3.json" /v1/radar/value_lists/\{value_list\} *)
  let postRadarValueListsValueList =
    let _op = "/v1/radar/value_lists/{value_list}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (radar_value_list * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_878209b421
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.radar_value_list) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postRadarValueListsValueList ())
  
  (** <p>Retrieves a <code>ValueList</code> object.</p>
      
      @param value_list value_list
      @see "openapi/spec3.json" /v1/radar/value_lists/\{value_list\} *)
  let getRadarValueListsValueList =
    let _op = "/v1/radar/value_lists/{value_list}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (radar_value_list * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.radar_value_list) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getRadarValueListsValueList ())
  
  (** <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>
      
      <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/disputes/\{dispute\} *)
  let postDisputesDispute =
    let _op = "/v1/disputes/{dispute}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (dispute * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_aa5914890d
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.dispute) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postDisputesDispute ())
  
  (** <p>Retrieves the dispute with the given ID.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/disputes/\{dispute\} *)
  let getDisputesDispute =
    let _op = "/v1/disputes/{dispute}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (dispute * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.dispute) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getDisputesDispute ())
  
  (** <p>Retrieves a physical bundle object.</p>
      
      @param physical_bundle physical_bundle
      @see "openapi/spec3.json" /v1/issuing/physical_bundles/\{physical_bundle\} *)
  let getIssuingPhysicalBundlesPhysicalBundle =
    let _op = "/v1/issuing/physical_bundles/{physical_bundle}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (issuing_physical_bundle * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_physical_bundle) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIssuingPhysicalBundlesPhysicalBundle ())
  
  (** <p>Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list</p>
      
      @param credit_reversal credit_reversal
      @see "openapi/spec3.json" /v1/treasury/credit_reversals/\{credit_reversal\} *)
  let getTreasuryCreditReversalsCreditReversal =
    let _op = "/v1/treasury/credit_reversals/{credit_reversal}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (treasury_credit_reversal * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_credit_reversal) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTreasuryCreditReversalsCreditReversal ())
  
  (** <p>Retrieves the line items of a committed standalone transaction as a collection.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/tax/transactions/\{transaction\}/line_items *)
  let getTaxTransactionsTransactionLineItems =
    let _op = "/v1/tax/transactions/{transaction}/line_items" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_ff63b43cc3 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_ff63b43cc3) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTaxTransactionsTransactionLineItems ())
  
  (** <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>
      
      <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/send *)
  let postInvoicesInvoiceSend =
    let _op = "/v1/invoices/{invoice}/send" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (invoice * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_20e4e9cd0c
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.invoice) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postInvoicesInvoiceSend ())
  
  (** <p>Deactivates a billing meter</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\}/deactivate *)
  let postBillingMetersIdDeactivate =
    let _op = "/v1/billing/meters/{id}/deactivate" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (billing_meter * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_55d5f288f2
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.billing_meter) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postBillingMetersIdDeactivate ())
  
  (** <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>rejected</code>.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/test_helpers/issuing/personalization_designs/\{personalization_design\}/reject *)
  let postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject =
    let _op = "/v1/test_helpers/issuing/personalization_designs/{personalization_design}/reject" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_personalization_design * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_dd895638f0
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_personalization_design) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject ())
  
  (** <p>Verifies microdeposits on a SetupIntent object.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\}/verify_microdeposits *)
  let postSetupIntentsIntentVerifyMicrodeposits =
    let _op = "/v1/setup_intents/{intent}/verify_microdeposits" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (setup_intent * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_c64a825721
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.setup_intent) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postSetupIntentsIntentVerifyMicrodeposits ())
  
  (** <p>Changes the settings on a customer’s cash balance.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cash_balance *)
  let postCustomersCustomerCashBalance =
    let _op = "/v1/customers/{customer}/cash_balance" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (cash_balance * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_0700419bcc
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.cash_balance) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCustomersCustomerCashBalance ())
  
  (** <p>Retrieves a customer’s cash balance.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cash_balance *)
  let getCustomersCustomerCashBalance =
    let _op = "/v1/customers/{customer}/cash_balance" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (cash_balance * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.cash_balance) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCustomersCustomerCashBalance ())
  
  (** <p>Updates properties on a PaymentIntent object without confirming.</p>
      
      <p>Depending on which properties you update, you might need to confirm the
      PaymentIntent again. For example, updating the <code>payment_method</code>
      always requires you to confirm the PaymentIntent again. If you prefer to
      update and confirm at the same time, we recommend updating properties through
      the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\} *)
  let postPaymentIntentsIntent =
    let _op = "/v1/payment_intents/{intent}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_intent * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_4a360b8862
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_intent) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPaymentIntentsIntent ())
  
  (** <p>Retrieves the details of a PaymentIntent that has previously been created. </p>
      
      <p>You can retrieve a PaymentIntent client-side using a publishable key when the <code>client_secret</code> is in the query string. </p>
      
      <p>If you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\} *)
  let getPaymentIntentsIntent =
    let _op = "/v1/payment_intents/{intent}" in
    let _k _path ?client_secret ?expand
        _req :
          ([
            `CH_OK of
              (payment_intent * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match client_secret with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"client_secret" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_intent) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPaymentIntentsIntent ())
  
  (** <p>Retrieves a TransactionEntry object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/transaction_entries/\{id\} *)
  let getTreasuryTransactionEntriesId =
    let _op = "/v1/treasury/transaction_entries/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (treasury_transaction_entry * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_transaction_entry) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTreasuryTransactionEntriesId ())
  
  (** <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p>
      
      @param invoiceitem invoiceitem
      @see "openapi/spec3.json" /v1/invoiceitems/\{invoiceitem\} *)
  let deleteInvoiceitemsInvoiceitem =
    let _op = "/v1/invoiceitems/{invoiceitem}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_invoiceitem * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.deleted_invoiceitem) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteInvoiceitemsInvoiceitem ())
  
  (** <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p>
      
      @param invoiceitem invoiceitem
      @see "openapi/spec3.json" /v1/invoiceitems/\{invoiceitem\} *)
  let postInvoiceitemsInvoiceitem =
    let _op = "/v1/invoiceitems/{invoiceitem}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (invoiceitem * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_d10dfee0d1
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.invoiceitem) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postInvoiceitemsInvoiceitem ())
  
  (** <p>Retrieves the invoice item with the given ID.</p>
      
      @param invoiceitem invoiceitem
      @see "openapi/spec3.json" /v1/invoiceitems/\{invoiceitem\} *)
  let getInvoiceitemsInvoiceitem =
    let _op = "/v1/invoiceitems/{invoiceitem}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (invoiceitem * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.invoiceitem) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getInvoiceitemsInvoiceitem ())
  
  (** <p>Create an incoming testmode bank transfer</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/test_helpers/customers/\{customer\}/fund_cash_balance *)
  let postTestHelpersCustomersCustomerFundCashBalance =
    let _op = "/v1/test_helpers/customers/{customer}/fund_cash_balance" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (customer_cash_balance_transaction * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_b230fe05a9
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.customer_cash_balance_transaction) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersCustomersCustomerFundCashBalance ())
  
  (** <p>Updates the specified order by setting the values of the parameters passed.</p>
      
      @param order Unique identifier of the order.
      @see "openapi/spec3.json" /v1/climate/orders/\{order\} *)
  let postClimateOrdersOrder =
    let _op = "/v1/climate/orders/{order}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (climate_order * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_3d31dce950
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.climate_order) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postClimateOrdersOrder ())
  
  (** <p>Retrieves the details of a Climate order object with the given ID.</p>
      
      @param order Unique identifier of the order.
      @see "openapi/spec3.json" /v1/climate/orders/\{order\} *)
  let getClimateOrdersOrder =
    let _op = "/v1/climate/orders/{order}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (climate_order * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.climate_order) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getClimateOrdersOrder ())
  
  (** <p>Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer, new
      funding instructions will be created. If funding instructions have already been created for a given customer, the same
      funding instructions will be retrieved. In other words, we will return the same funding instructions each time.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/funding_instructions *)
  let postCustomersCustomerFundingInstructions =
    let _op = "/v1/customers/{customer}/funding_instructions" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (funding_instructions * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_b31edc1c47
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.funding_instructions) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCustomersCustomerFundingInstructions ())
  
  (** <p>Updates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you don’t provide. This request only accepts the metadata as arguments.</p>
      
      @param payout payout
      @see "openapi/spec3.json" /v1/payouts/\{payout\} *)
  let postPayoutsPayout =
    let _op = "/v1/payouts/{payout}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payout * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_758f437535
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payout) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPayoutsPayout ())
  
  (** <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.</p>
      
      @param payout payout
      @see "openapi/spec3.json" /v1/payouts/\{payout\} *)
  let getPayoutsPayout =
    let _op = "/v1/payouts/{payout}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (payout * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payout) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPayoutsPayout ())
  
  (** <p>Creates a new person.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people *)
  let postAccountsAccountPeople =
    let _op = "/v1/accounts/{account}/people" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (person * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_bcec995787
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.person) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postAccountsAccountPeople ())
  
  (** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people *)
  let getAccountsAccountPeople =
    let _op = "/v1/accounts/{account}/people" in
    let _k _path ?ending_before ?expand ?limit ?relationship ?starting_after
        _req :
          ([`CH_OK of (t_fde3b546b3 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match relationship with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_8dfdeac1ad ~p:"relationship" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_fde3b546b3) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getAccountsAccountPeople ())
  
  (** <p>Updates the details of a FinancialAccount.</p>
      
      @param financial_account financial_account
      @see "openapi/spec3.json" /v1/treasury/financial_accounts/\{financial_account\} *)
  let postTreasuryFinancialAccountsFinancialAccount =
    let _op = "/v1/treasury/financial_accounts/{financial_account}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_financial_account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_0ff6a5a72c
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_financial_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTreasuryFinancialAccountsFinancialAccount ())
  
  (** <p>Retrieves the details of a FinancialAccount.</p>
      
      @param financial_account financial_account
      @see "openapi/spec3.json" /v1/treasury/financial_accounts/\{financial_account\} *)
  let getTreasuryFinancialAccountsFinancialAccount =
    let _op = "/v1/treasury/financial_accounts/{financial_account}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (treasury_financial_account * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_financial_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getTreasuryFinancialAccountsFinancialAccount ())
  
  (** <p>Expire a refund with a status of <code>requires_action</code>.</p>
      
      @param refund refund
      @see "openapi/spec3.json" /v1/test_helpers/refunds/\{refund\}/expire *)
  let postTestHelpersRefundsRefundExpire =
    let _op = "/v1/test_helpers/refunds/{refund}/expire" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (refund * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_6672714713
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.refund) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTestHelpersRefundsRefundExpire ())
  
  (** <p>Retrieves the details of an scheduled query run.</p>
      
      @param scheduled_query_run scheduled_query_run
      @see "openapi/spec3.json" /v1/sigma/scheduled_query_runs/\{scheduled_query_run\} *)
  let getSigmaScheduledQueryRunsScheduledQueryRun =
    let _op = "/v1/sigma/scheduled_query_runs/{scheduled_query_run}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (scheduled_query_run * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.scheduled_query_run) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getSigmaScheduledQueryRunsScheduledQueryRun ())
  
  (** <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/refresh *)
  let postFinancialConnectionsAccountsAccountRefresh =
    let _op = "/v1/financial_connections/accounts/{account}/refresh" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (financial_connections_account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_9c2b26fa6b
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.financial_connections_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postFinancialConnectionsAccountsAccountRefresh ())
  
  (** <p>Confirm that your customer intends to pay with current or provided
      payment method. Upon confirmation, the PaymentIntent will attempt to initiate
      a payment.
      If the selected payment method requires additional authentication steps, the
      PaymentIntent will transition to the <code>requires_action</code> status and
      suggest additional actions via <code>next_action</code>. If payment fails,
      the PaymentIntent transitions to the <code>requires_payment_method</code> status or the
      <code>canceled</code> status if the confirmation limit is reached. If
      payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
      status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).
      If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
      using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
      and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
      After <code>next_action</code>s are handled by the client, no additional
      confirmation is required to complete the payment.
      If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
      initiated using a secret key.
      If any actions are required for the payment, the PaymentIntent will
      return to the <code>requires_confirmation</code> state
      after those actions are completed. Your server needs to then
      explicitly re-confirm the PaymentIntent to initiate the next payment
      attempt.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/confirm *)
  let postPaymentIntentsIntentConfirm =
    let _op = "/v1/payment_intents/{intent}/confirm" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_intent * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_d3f7d69ce7
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_intent) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPaymentIntentsIntentConfirm ())
  
  (** <p>Updates a configuration that describes the functionality of the customer portal.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/billing_portal/configurations/\{configuration\} *)
  let postBillingPortalConfigurationsConfiguration =
    let _op = "/v1/billing_portal/configurations/{configuration}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (billing_portal_configuration * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_9eb8fe0469
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.billing_portal_configuration) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postBillingPortalConfigurationsConfiguration ())
  
  (** <p>Retrieves a configuration that describes the functionality of the customer portal.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/billing_portal/configurations/\{configuration\} *)
  let getBillingPortalConfigurationsConfiguration =
    let _op = "/v1/billing_portal/configurations/{configuration}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (billing_portal_configuration * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.billing_portal_configuration) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getBillingPortalConfigurationsConfiguration ())
  
  (** <p>Deletes an existing account or customer <code>tax_id</code> object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax_ids/\{id\} *)
  let deleteTaxIdsId =
    let _op = "/v1/tax_ids/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_tax_id * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.deleted_tax_id) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteTaxIdsId ())
  
  (** <p>Retrieves an account or customer <code>tax_id</code> object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax_ids/\{id\} *)
  let getTaxIdsId =
    let _op = "/v1/tax_ids/{id}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (tax_id * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.tax_id) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTaxIdsId ())
  
  (** <p>A quote models prices and services for a customer.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\} *)
  let postQuotesQuote =
    let _op = "/v1/quotes/{quote}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (quote * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_9c06359ad3
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.quote) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postQuotesQuote ())
  
  (** <p>Retrieves the quote with the given ID.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\} *)
  let getQuotesQuote =
    let _op = "/v1/quotes/{quote}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (quote * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.quote) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getQuotesQuote ())
  
  (** <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/credit_notes/\{id\}/void *)
  let postCreditNotesIdVoid =
    let _op = "/v1/credit_notes/{id}/void" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (credit_note * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_3bb839257d
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.credit_note) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCreditNotesIdVoid ())
  
  (** <p>\[Deprecated\] Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow. 
      This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to approve an authorization</a>.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/issuing/authorizations/\{authorization\}/approve *)
  let postIssuingAuthorizationsAuthorizationApprove =
    let _op = "/v1/issuing/authorizations/{authorization}/approve" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_authorization * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_e235b824c0
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_authorization) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postIssuingAuthorizationsAuthorizationApprove ())
  
  (** <p>Retrieves a ForwardingRequest object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/forwarding/requests/\{id\} *)
  let getForwardingRequestsId =
    let _op = "/v1/forwarding/requests/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (forwarding_request * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.forwarding_request) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getForwardingRequestsId ())
  
  (** <p>Retrieves the details of an early fraud warning that has previously been created. </p>
      
      <p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
      
      @param early_fraud_warning early_fraud_warning
      @see "openapi/spec3.json" /v1/radar/early_fraud_warnings/\{early_fraud_warning\} *)
  let getRadarEarlyFraudWarningsEarlyFraudWarning =
    let _op = "/v1/radar/early_fraud_warnings/{early_fraud_warning}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (radar_early_fraud_warning * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.radar_early_fraud_warning) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getRadarEarlyFraudWarningsEarlyFraudWarning ())
  
  (** <p>Updates a test mode created OutboundPayment with tracking details. The OutboundPayment must not be cancelable, and cannot be in the <code>canceled</code> or <code>failed</code> states.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_payments/\{id\} *)
  let postTestHelpersTreasuryOutboundPaymentsId =
    let _op = "/v1/test_helpers/treasury/outbound_payments/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_outbound_payment * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_c381952697
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_outbound_payment) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTestHelpersTreasuryOutboundPaymentsId ())
  
  (** <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/subscription_items/\{item\} *)
  let deleteSubscriptionItemsItem =
    let _op = "/v1/subscription_items/{item}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_subscription_item * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_bac8413461
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.deleted_subscription_item) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteSubscriptionItemsItem ())
  
  (** <p>Updates the plan or quantity of an item on a current subscription.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/subscription_items/\{item\} *)
  let postSubscriptionItemsItem =
    let _op = "/v1/subscription_items/{item}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (subscription_item * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_82f4439e13
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.subscription_item) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postSubscriptionItemsItem ())
  
  (** <p>Retrieves the subscription item with the given ID.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/subscription_items/\{item\} *)
  let getSubscriptionItemsItem =
    let _op = "/v1/subscription_items/{item}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (subscription_item * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.subscription_item) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getSubscriptionItemsItem ())
  
  (** <p>When you create a new refund, you must specify either a Charge or a PaymentIntent object.</p>
      
      <p>This action refunds a previously created charge that’s not refunded yet.
      Funds are refunded to the credit or debit card that’s originally charged.</p>
      
      <p>You can optionally refund only part of a charge.
      You can repeat this until the entire charge is refunded.</p>
      
      <p>After you entirely refund a charge, you can’t refund it again.
      This method raises an error when it’s called on an already-refunded charge,
      or when you attempt to refund more money than is left on a charge.</p>
      
      @param charge The identifier of the charge to refund.
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refund *)
  let postChargesChargeRefund =
    let _op = "/v1/charges/{charge}/refund" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (charge * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_6fb1415a2f
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.charge) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postChargesChargeRefund ())
  
  (** <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a>.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/issuing/disputes/\{dispute\}/submit *)
  let postIssuingDisputesDisputeSubmit =
    let _op = "/v1/issuing/disputes/{dispute}/submit" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_dispute * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_7e671e2ddc
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.issuing_dispute) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postIssuingDisputesDisputeSubmit ())
  
  (** <p>When you create a new reversal, you must specify a transfer to create it on.</p>
      
      <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>
      
      <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/transfers/\{id\}/reversals *)
  let postTransfersIdReversals =
    let _op = "/v1/transfers/{id}/reversals" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (transfer_reversal * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_e880d6c9c8
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.transfer_reversal) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTransfersIdReversals ())
  
  (** <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/transfers/\{id\}/reversals *)
  let getTransfersIdReversals =
    let _op = "/v1/transfers/{id}/reversals" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_2e23061d84 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_2e23061d84) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTransfersIdReversals ())
  
  (** <p>Returns a Country Spec for a given Country code.</p>
      
      @param country country
      @see "openapi/spec3.json" /v1/country_specs/\{country\} *)
  let getCountrySpecsCountry =
    let _op = "/v1/country_specs/{country}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (country_spec * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.country_spec) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCountrySpecsCountry ())
  
  (** <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/linked_accounts/\{account\}/refresh *)
  let postLinkedAccountsAccountRefresh =
    let _op = "/v1/linked_accounts/{account}/refresh" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (financial_connections_account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_7802e54b91
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.financial_connections_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postLinkedAccountsAccountRefresh ())
  
  (** <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>returned</code>.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/test_helpers/issuing/cards/\{card\}/shipping/return *)
  let postTestHelpersIssuingCardsCardShippingReturn =
    let _op = "/v1/test_helpers/issuing/cards/{card}/shipping/return" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_card * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_05e3124cdb
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.issuing_card) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersIssuingCardsCardShippingReturn ())
  
  (** <p>With <a href="/connect">Connect</a>, you can reject accounts that you have flagged as suspicious.</p>
      
      <p>Only accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/reject *)
  let postAccountsAccountReject =
    let _op = "/v1/accounts/{account}/reject" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_bac46e226d
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postAccountsAccountReject ())
  
  (** <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/lines *)
  let getInvoicesInvoiceLines =
    let _op = "/v1/invoices/{invoice}/lines" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_40aa9228af * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_40aa9228af) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getInvoicesInvoiceLines ())
  
  (** <p>Retrieves the details of an existing Transaction.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/transactions/\{id\} *)
  let getTreasuryTransactionsId =
    let _op = "/v1/treasury/transactions/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (treasury_transaction * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_transaction) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTreasuryTransactionsId ())
  
  (** <p>Capture a test-mode authorization.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations/\{authorization\}/capture *)
  let postTestHelpersIssuingAuthorizationsAuthorizationCapture =
    let _op = "/v1/test_helpers/issuing/authorizations/{authorization}/capture" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_authorization * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_4113a1f78c
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_authorization) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersIssuingAuthorizationsAuthorizationCapture ())
  
  (** <p>Reverses a payout by debiting the destination bank account. At this time, you can only reverse payouts for connected accounts to US bank accounts. If the payout is manual and in the <code>pending</code> status, use <code>/v1/payouts/:id/cancel</code> instead.</p>
      
      <p>By requesting a reversal through <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account authorizes the debit on the bank account and that no other authorization is required.</p>
      
      @param payout payout
      @see "openapi/spec3.json" /v1/payouts/\{payout\}/reverse *)
  let postPayoutsPayoutReverse =
    let _op = "/v1/payouts/{payout}/reverse" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payout * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_8eb20ab6f4
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payout) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPayoutsPayoutReverse ())
  
  (** <p>Removes the currently applied discount on a subscription.</p>
      
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription_exposed_id\}/discount *)
  let deleteSubscriptionsSubscriptionExposedIdDiscount =
    let _op = "/v1/subscriptions/{subscription_exposed_id}/discount" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_discount * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.deleted_discount) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.deleteSubscriptionsSubscriptionExposedIdDiscount ())
  
  (** <p>Creates a new person.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons *)
  let postAccountsAccountPersons =
    let _op = "/v1/accounts/{account}/persons" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (person * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_8dfd49ec14
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.person) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postAccountsAccountPersons ())
  
  (** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons *)
  let getAccountsAccountPersons =
    let _op = "/v1/accounts/{account}/persons" in
    let _k _path ?ending_before ?expand ?limit ?relationship ?starting_after
        _req :
          ([`CH_OK of (t_adf6bacbbd * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match relationship with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_52a890434c ~p:"relationship" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_adf6bacbbd) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getAccountsAccountPersons ())
  
  (** <p>Cancels the quote.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/cancel *)
  let postQuotesQuoteCancel =
    let _op = "/v1/quotes/{quote}/cancel" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (quote * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_4b0daf9ed9
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.quote) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postQuotesQuoteCancel ())
  
  (** <p>Updates an existing tax rate.</p>
      
      @param tax_rate tax_rate
      @see "openapi/spec3.json" /v1/tax_rates/\{tax_rate\} *)
  let postTaxRatesTaxRate =
    let _op = "/v1/tax_rates/{tax_rate}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (tax_rate * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_bd0ab56125
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.tax_rate) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTaxRatesTaxRate ())
  
  (** <p>Retrieves a tax rate with the given ID</p>
      
      @param tax_rate tax_rate
      @see "openapi/spec3.json" /v1/tax_rates/\{tax_rate\} *)
  let getTaxRatesTaxRate =
    let _op = "/v1/tax_rates/{tax_rate}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (tax_rate * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.tax_rate) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTaxRatesTaxRate ())
  
  (** <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>
      
      @param source source
      @see "openapi/spec3.json" /v1/sources/\{source\} *)
  let postSourcesSource =
    let _op = "/v1/sources/{source}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (source * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_8b8321d428
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.source) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postSourcesSource ())
  
  (** <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>
      
      @param source source
      @see "openapi/spec3.json" /v1/sources/\{source\} *)
  let getSourcesSource =
    let _op = "/v1/sources/{source}" in
    let _k _path ?client_secret ?expand
        _req :
          ([`CH_OK of (source * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match client_secret with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"client_secret" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.source) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getSourcesSource ())
  
  (** <p>Unsubscribes from periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/unsubscribe *)
  let postFinancialConnectionsAccountsAccountUnsubscribe =
    let _op = "/v1/financial_connections/accounts/{account}/unsubscribe" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (financial_connections_account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_957eb39b31
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.financial_connections_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postFinancialConnectionsAccountsAccountUnsubscribe ())
  
  (** <p>Verifies microdeposits on a PaymentIntent object.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/verify_microdeposits *)
  let postPaymentIntentsIntentVerifyMicrodeposits =
    let _op = "/v1/payment_intents/{intent}/verify_microdeposits" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_intent * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_50eac85280
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_intent) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postPaymentIntentsIntentVerifyMicrodeposits ())
  
  (** <p>An OutboundTransfer can be canceled if the funds have not yet been paid out.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/treasury/outbound_transfers/\{outbound_transfer\}/cancel *)
  let postTreasuryOutboundTransfersOutboundTransferCancel =
    let _op = "/v1/treasury/outbound_transfers/{outbound_transfer}/cancel" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_outbound_transfer * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_e0e7761ff7
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_outbound_transfer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTreasuryOutboundTransfersOutboundTransferCancel ())
  
  (** <p>Transitions a test mode created OutboundPayment to the <code>posted</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_payments/\{id\}/post *)
  let postTestHelpersTreasuryOutboundPaymentsIdPost =
    let _op = "/v1/test_helpers/treasury/outbound_payments/{id}/post" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_outbound_payment * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_9853c54b9d
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_outbound_payment) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersTreasuryOutboundPaymentsIdPost ())
  
  (** <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>
      
      <p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>
      
      <p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>
      
      <p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
      
      @param subscription_item subscription_item
      @see "openapi/spec3.json" /v1/subscription_items/\{subscription_item\}/usage_records *)
  let postSubscriptionItemsSubscriptionItemUsageRecords =
    let _op = "/v1/subscription_items/{subscription_item}/usage_records" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (usage_record * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_19ad43629e
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.usage_record) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postSubscriptionItemsSubscriptionItemUsageRecords ())
  
  (** <p>Retrieves an existing VerificationReport</p>
      
      @param report report
      @see "openapi/spec3.json" /v1/identity/verification_reports/\{report\} *)
  let getIdentityVerificationReportsReport =
    let _op = "/v1/identity/verification_reports/{report}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (identity_verification_report * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.identity_verification_report) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIdentityVerificationReportsReport ())
  
  (** <p>Some payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren’t satisfied when the domain was created, the payment method will be inactive on the domain.
      The payment method doesn’t appear in Elements for this domain until it is active.</p>
      
      <p>To activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.</p>
      
      <p>Related guides: <a href="/docs/payments/payment-methods/pmd-registration">Payment method domains</a>.</p>
      
      @param payment_method_domain payment_method_domain
      @see "openapi/spec3.json" /v1/payment_method_domains/\{payment_method_domain\}/validate *)
  let postPaymentMethodDomainsPaymentMethodDomainValidate =
    let _op = "/v1/payment_method_domains/{payment_method_domain}/validate" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_method_domain * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_71e47b1b4e
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.payment_method_domain) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postPaymentMethodDomainsPaymentMethodDomainValidate ())
  
  (** <p>Cancels the current reader action.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/cancel_action *)
  let postTerminalReadersReaderCancelAction =
    let _op = "/v1/terminal/readers/{reader}/cancel_action" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (terminal_reader * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_0ca647b86f
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.terminal_reader) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTerminalReadersReaderCancelAction ())
  
  (** <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/radar/value_list_items/\{item\} *)
  let deleteRadarValueListItemsItem =
    let _op = "/v1/radar/value_list_items/{item}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_radar_value_list_item * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.deleted_radar_value_list_item) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteRadarValueListItemsItem ())
  
  (** <p>Retrieves a <code>ValueListItem</code> object.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/radar/value_list_items/\{item\} *)
  let getRadarValueListItemsItem =
    let _op = "/v1/radar/value_list_items/{item}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (radar_value_list_item * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.radar_value_list_item) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getRadarValueListItemsItem ())
  
  (** @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{id\}/refund *)
  let postApplicationFeesIdRefund =
    let _op = "/v1/application_fees/{id}/refund" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (application_fee * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_fbe77ceb11
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.application_fee) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postApplicationFeesIdRefund ())
  
  (** <p>Updates a card personalization object.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/issuing/personalization_designs/\{personalization_design\} *)
  let postIssuingPersonalizationDesignsPersonalizationDesign =
    let _op = "/v1/issuing/personalization_designs/{personalization_design}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_personalization_design * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_51d6e29ed8
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_personalization_design) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postIssuingPersonalizationDesignsPersonalizationDesign ())
  
  (** <p>Retrieves a personalization design object.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/issuing/personalization_designs/\{personalization_design\} *)
  let getIssuingPersonalizationDesignsPersonalizationDesign =
    let _op = "/v1/issuing/personalization_designs/{personalization_design}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (issuing_personalization_design * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_personalization_design) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getIssuingPersonalizationDesignsPersonalizationDesign ())
  
  (** <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
      
      <p>If the card’s owner has no default card, then the new card will become the default.
      However, if the owner already has a default, then it will not change.
      To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards *)
  let postCustomersCustomerCards =
    let _op = "/v1/customers/{customer}/cards" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_source * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_03bcd47aa2
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_source) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCustomersCustomerCards ())
  
  (** <p>You can see a list of the cards belonging to a customer.
      Note that the 10 most recent sources are always available on the <code>Customer</code> object.
      If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards *)
  let getCustomersCustomerCards =
    let _op = "/v1/customers/{customer}/cards" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_935be5d592 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_935be5d592) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCustomersCustomerCards ())
  
  (** <p>Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with <code>type=good</code> is only possible if it has no SKUs associated with it.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/products/\{id\} *)
  let deleteProductsId =
    let _op = "/v1/products/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_product * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.deleted_product) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteProductsId ())
  
  (** <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/products/\{id\} *)
  let postProductsId =
    let _op = "/v1/products/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (product * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_209218c363
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.product) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postProductsId ())
  
  (** <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/products/\{id\} *)
  let getProductsId =
    let _op = "/v1/products/{id}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (product * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.product) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getProductsId ())
  
  (** <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>active</code>.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/test_helpers/issuing/personalization_designs/\{personalization_design\}/activate *)
  let postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate =
    let _op = "/v1/test_helpers/issuing/personalization_designs/{personalization_design}/activate" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_personalization_design * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_7cbe5b26ac
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_personalization_design) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate ())
  
  (** <p>You can cancel a SetupIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>
      
      <p>After you cancel it, setup is abandoned and any operations on the SetupIntent fail with an error.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\}/cancel *)
  let postSetupIntentsIntentCancel =
    let _op = "/v1/setup_intents/{intent}/cancel" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (setup_intent * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_05b947f5ee
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.setup_intent) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postSetupIntentsIntentCancel ())
  
  (** <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p>
      
      @param coupon coupon
      @see "openapi/spec3.json" /v1/coupons/\{coupon\} *)
  let deleteCouponsCoupon =
    let _op = "/v1/coupons/{coupon}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_coupon * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.deleted_coupon) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteCouponsCoupon ())
  
  (** <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p>
      
      @param coupon coupon
      @see "openapi/spec3.json" /v1/coupons/\{coupon\} *)
  let postCouponsCoupon =
    let _op = "/v1/coupons/{coupon}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (coupon * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_87e7e7fa42
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.coupon) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCouponsCoupon ())
  
  (** <p>Retrieves the coupon with the given ID.</p>
      
      @param coupon coupon
      @see "openapi/spec3.json" /v1/coupons/\{coupon\} *)
  let getCouponsCoupon =
    let _op = "/v1/coupons/{coupon}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (coupon * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.coupon) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCouponsCoupon ())
  
  (** <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/mark_uncollectible *)
  let postInvoicesInvoiceMarkUncollectible =
    let _op = "/v1/invoices/{invoice}/mark_uncollectible" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (invoice * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_1e3fe8c357
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.invoice) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postInvoicesInvoiceMarkUncollectible ())
  
  (** <p>Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/received_debits/\{id\} *)
  let getTreasuryReceivedDebitsId =
    let _op = "/v1/treasury/received_debits/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (treasury_received_debit * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_received_debit) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTreasuryReceivedDebitsId ())
  
  (** <p>Sets reader display to show cart details.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/set_reader_display *)
  let postTerminalReadersReaderSetReaderDisplay =
    let _op = "/v1/terminal/readers/{reader}/set_reader_display" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (terminal_reader * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_8d65e25082
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.terminal_reader) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTerminalReadersReaderSetReaderDisplay ())
  
  (** <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact
      the VerificationSession and all objects related to it, including VerificationReports, Events,
      request logs, etc.</p>
      
      <p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code>
      <a href="/docs/identity/how-sessions-work">status</a>. Redacting a VerificationSession in <code>requires_action</code>
      state will automatically cancel it.</p>
      
      <p>The redaction process may take up to four days. When the redaction process is in progress, the
      VerificationSession’s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is
      finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event
      will be emitted.</p>
      
      <p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the
      fields that contain personal data will be replaced by the string <code>\[redacted\]</code> or a similar
      placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or
      used for any purpose.</p>
      
      <p><a href="/docs/identity/verification-sessions#redact">Learn more</a>.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/identity/verification_sessions/\{session\}/redact *)
  let postIdentityVerificationSessionsSessionRedact =
    let _op = "/v1/identity/verification_sessions/{session}/redact" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (identity_verification_session * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_247ea586be
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.identity_verification_session) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postIdentityVerificationSessionsSessionRedact ())
  
  (** <p>Updates the refund that you specify by setting the values of the passed parameters. Any parameters that you don’t provide remain unchanged.</p>
      
      <p>This request only accepts <code>metadata</code> as an argument.</p>
      
      @param refund refund
      @see "openapi/spec3.json" /v1/refunds/\{refund\} *)
  let postRefundsRefund =
    let _op = "/v1/refunds/{refund}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (refund * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_000c001e81
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.refund) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postRefundsRefund ())
  
  (** <p>Retrieves the details of an existing refund.</p>
      
      @param refund refund
      @see "openapi/spec3.json" /v1/refunds/\{refund\} *)
  let getRefundsRefund =
    let _op = "/v1/refunds/{refund}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (refund * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.refund) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getRefundsRefund ())
  
  (** <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/checkout/sessions/\{session\}/line_items *)
  let getCheckoutSessionsSessionLineItems =
    let _op = "/v1/checkout/sessions/{session}/line_items" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_b5bae8d183 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_b5bae8d183) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCheckoutSessionsSessionLineItems ())
  
  (** <p>Transitions a test mode created OutboundTransfer to the <code>posted</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_transfers/\{outbound_transfer\}/post *)
  let postTestHelpersTreasuryOutboundTransfersOutboundTransferPost =
    let _op = "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/post" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_outbound_transfer * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_2057b87ef0
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_outbound_transfer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersTreasuryOutboundTransfersOutboundTransferPost ())
  
  (** <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>
      
      @param schedule schedule
      @see "openapi/spec3.json" /v1/subscription_schedules/\{schedule\}/release *)
  let postSubscriptionSchedulesScheduleRelease =
    let _op = "/v1/subscription_schedules/{schedule}/release" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (subscription_schedule * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_9438e1e97d
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.subscription_schedule) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postSubscriptionSchedulesScheduleRelease ())
  
  (** <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param credit_note credit_note
      @see "openapi/spec3.json" /v1/credit_notes/\{credit_note\}/lines *)
  let getCreditNotesCreditNoteLines =
    let _op = "/v1/credit_notes/{credit_note}/lines" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_17654892a5 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_17654892a5) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCreditNotesCreditNoteLines ())
  
  (** <p>Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.</p>
      
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/payment_methods/\{payment_method\}/detach *)
  let postPaymentMethodsPaymentMethodDetach =
    let _op = "/v1/payment_methods/{payment_method}/detach" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_method * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_189e25f024
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_method) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPaymentMethodsPaymentMethodDetach ())
  
  (** <p>Retrieves a DebitReversal object.</p>
      
      @param debit_reversal debit_reversal
      @see "openapi/spec3.json" /v1/treasury/debit_reversals/\{debit_reversal\} *)
  let getTreasuryDebitReversalsDebitReversal =
    let _op = "/v1/treasury/debit_reversals/{debit_reversal}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (treasury_debit_reversal * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_debit_reversal) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTreasuryDebitReversalsDebitReversal ())
  
  (** <p>Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax_codes/\{id\} *)
  let getTaxCodesId =
    let _op = "/v1/tax_codes/{id}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (tax_code * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.tax_code) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTaxCodesId ())
  
  (** <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/disconnect *)
  let postFinancialConnectionsAccountsAccountDisconnect =
    let _op = "/v1/financial_connections/accounts/{account}/disconnect" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (financial_connections_account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_190bfbf094
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.financial_connections_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postFinancialConnectionsAccountsAccountDisconnect ())
  
  (** <p>Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.</p>
      
      @param promotion_code promotion_code
      @see "openapi/spec3.json" /v1/promotion_codes/\{promotion_code\} *)
  let postPromotionCodesPromotionCode =
    let _op = "/v1/promotion_codes/{promotion_code}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (promotion_code * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_8f07f499ed
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.promotion_code) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPromotionCodesPromotionCode ())
  
  (** <p>Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing <code>code</code> use <a href="/docs/api/promotion_codes/list">list</a> with the desired <code>code</code>.</p>
      
      @param promotion_code promotion_code
      @see "openapi/spec3.json" /v1/promotion_codes/\{promotion_code\} *)
  let getPromotionCodesPromotionCode =
    let _op = "/v1/promotion_codes/{promotion_code}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (promotion_code * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.promotion_code) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPromotionCodesPromotionCode ())
  
  (** <p>Updates an existing shipping rate object.</p>
      
      @param shipping_rate_token shipping_rate_token
      @see "openapi/spec3.json" /v1/shipping_rates/\{shipping_rate_token\} *)
  let postShippingRatesShippingRateToken =
    let _op = "/v1/shipping_rates/{shipping_rate_token}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (shipping_rate * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_f0785efe33
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.shipping_rate) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postShippingRatesShippingRateToken ())
  
  (** <p>Returns the shipping rate object with the given ID.</p>
      
      @param shipping_rate_token shipping_rate_token
      @see "openapi/spec3.json" /v1/shipping_rates/\{shipping_rate_token\} *)
  let getShippingRatesShippingRateToken =
    let _op = "/v1/shipping_rates/{shipping_rate_token}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (shipping_rate * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.shipping_rate) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getShippingRatesShippingRateToken ())
  
  (** <p>Reactivates a billing meter</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\}/reactivate *)
  let postBillingMetersIdReactivate =
    let _op = "/v1/billing/meters/{id}/reactivate" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (billing_meter * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_e4fa4d38ff
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.billing_meter) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postBillingMetersIdReactivate ())
  
  (** <p>You can cancel a PaymentIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code> or, <a href="/docs/payments/intents">in rare cases</a>, <code>processing</code>. </p>
      
      <p>After it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a <code>status</code> of <code>requires_capture</code>, the remaining <code>amount_capturable</code> is automatically refunded. </p>
      
      <p>You can’t cancel the PaymentIntent for a Checkout Session. <a href="/docs/api/checkout/sessions/expire">Expire the Checkout Session</a> instead.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/cancel *)
  let postPaymentIntentsIntentCancel =
    let _op = "/v1/payment_intents/{intent}/cancel" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_intent * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_87beadc647
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_intent) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPaymentIntentsIntentCancel ())
  
  (** <p>Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/outbound_payments/\{id\} *)
  let getTreasuryOutboundPaymentsId =
    let _op = "/v1/treasury/outbound_payments/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (treasury_outbound_payment * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_outbound_payment) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTreasuryOutboundPaymentsId ())
  
  (** <p>Retrieves the details of a Financial Connections <code>Transaction</code></p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/financial_connections/transactions/\{transaction\} *)
  let getFinancialConnectionsTransactionsTransaction =
    let _op = "/v1/financial_connections/transactions/{transaction}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (financial_connections_transaction * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.financial_connections_transaction) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getFinancialConnectionsTransactionsTransaction ())
  
  (** <p>Download the PDF for a finalized quote. Explanation for special handling can be found <a href="https://docs.corp.stripe.com/quotes/overview#quote_pdf">here</a></p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/pdf *)
  let getQuotesQuotePdf =
    let _op = "/v1/quotes/{quote}/pdf" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (int * string * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            Ok (`CH_OK (_code,body',!outheaders))
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getQuotesQuotePdf ())
  
  (** @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/dispute *)
  let postChargesChargeDispute =
    let _op = "/v1/charges/{charge}/dispute" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (dispute * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_4636c13369
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.dispute) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postChargesChargeDispute ())
  
  (** <p>Retrieve a dispute for a specified charge.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/dispute *)
  let getChargesChargeDispute =
    let _op = "/v1/charges/{charge}/dispute" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (dispute * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.dispute) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getChargesChargeDispute ())
  
  (** <p>Marks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the <code>succeeded</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/inbound_transfers/\{id\}/return *)
  let postTestHelpersTreasuryInboundTransfersIdReturn =
    let _op = "/v1/test_helpers/treasury/inbound_transfers/{id}/return" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_inbound_transfer * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_c1768f47d2
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_inbound_transfer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersTreasuryInboundTransfersIdReturn ())
  
  (** <p>Retrieves an existing ConfirmationToken object</p>
      
      @param confirmation_token confirmation_token
      @see "openapi/spec3.json" /v1/confirmation_tokens/\{confirmation_token\} *)
  let getConfirmationTokensConfirmationToken =
    let _op = "/v1/confirmation_tokens/{confirmation_token}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (confirmation_token * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.confirmation_token) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getConfirmationTokensConfirmationToken ())
  
  (** <p>Verify a given source.</p>
      
      @param source source
      @see "openapi/spec3.json" /v1/sources/\{source\}/verify *)
  let postSourcesSourceVerify =
    let _op = "/v1/sources/{source}/verify" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (source * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_8aa8f331cd
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.source) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postSourcesSourceVerify ())
  
  (** <p>Cancels a top-up. Only pending top-ups can be canceled.</p>
      
      @param topup topup
      @see "openapi/spec3.json" /v1/topups/\{topup\}/cancel *)
  let postTopupsTopupCancel =
    let _op = "/v1/topups/{topup}/cancel" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (topup * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_4c666f30a4
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.topup) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTopupsTopupCancel ())
  
  (** <p>Creates a new subscription on an existing customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions *)
  let postCustomersCustomerSubscriptions =
    let _op = "/v1/customers/{customer}/subscriptions" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (subscription * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_02eb6abcb0
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.subscription) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCustomersCustomerSubscriptions ())
  
  (** <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions *)
  let getCustomersCustomerSubscriptions =
    let _op = "/v1/customers/{customer}/subscriptions" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_725e7e390f * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_725e7e390f) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCustomersCustomerSubscriptions ())
  
  (** <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/linked_accounts/\{account\}/disconnect *)
  let postLinkedAccountsAccountDisconnect =
    let _op = "/v1/linked_accounts/{account}/disconnect" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (financial_connections_account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_004e372a90
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.financial_connections_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postLinkedAccountsAccountDisconnect ())
  
  (** <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>delivered</code>.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/test_helpers/issuing/cards/\{card\}/shipping/deliver *)
  let postTestHelpersIssuingCardsCardShippingDeliver =
    let _op = "/v1/test_helpers/issuing/cards/{card}/shipping/deliver" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_card * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_d3fb355477
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.issuing_card) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersIssuingCardsCardShippingDeliver ())
  
  (** <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>
      
      @param review review
      @see "openapi/spec3.json" /v1/reviews/\{review\}/approve *)
  let postReviewsReviewApprove =
    let _op = "/v1/reviews/{review}/approve" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (review * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_2fd5762094
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.review) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postReviewsReviewApprove ())
  
  (** <p>Delete an apple pay domain.</p>
      
      @param domain domain
      @see "openapi/spec3.json" /v1/apple_pay/domains/\{domain\} *)
  let deleteApplePayDomainsDomain =
    let _op = "/v1/apple_pay/domains/{domain}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_apple_pay_domain * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.deleted_apple_pay_domain) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteApplePayDomainsDomain ())
  
  (** <p>Retrieve an apple pay domain.</p>
      
      @param domain domain
      @see "openapi/spec3.json" /v1/apple_pay/domains/\{domain\} *)
  let getApplePayDomainsDomain =
    let _op = "/v1/apple_pay/domains/{domain}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (apple_pay_domain * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.apple_pay_domain) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getApplePayDomainsDomain ())
  
  (** <p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a href="#void_invoice">voided</a>.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\} *)
  let deleteInvoicesInvoice =
    let _op = "/v1/invoices/{invoice}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_invoice * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.deleted_invoice) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteInvoicesInvoice ())
  
  (** <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>,
      monetary values, as well as <code>collection_method</code>, become uneditable.</p>
      
      <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
      sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass
      <code>auto_advance=false</code>.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\} *)
  let postInvoicesInvoice =
    let _op = "/v1/invoices/{invoice}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (invoice * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_9bd5268fc2
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.invoice) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postInvoicesInvoice ())
  
  (** <p>Retrieves the invoice with the given ID.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\} *)
  let getInvoicesInvoice =
    let _op = "/v1/invoices/{invoice}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (invoice * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.invoice) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getInvoicesInvoice ())
  
  (** <p>Expire a test-mode Authorization.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations/\{authorization\}/expire *)
  let postTestHelpersIssuingAuthorizationsAuthorizationExpire =
    let _op = "/v1/test_helpers/issuing/authorizations/{authorization}/expire" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_authorization * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_e813eb08ba
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_authorization) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersIssuingAuthorizationsAuthorizationExpire ())
  
  (** <p>Retrieves the details of a Financial Connections <code>Session</code></p>
      
      @param session session
      @see "openapi/spec3.json" /v1/link_account_sessions/\{session\} *)
  let getLinkAccountSessionsSession =
    let _op = "/v1/link_account_sessions/{session}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (financial_connections_session * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.financial_connections_session) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getLinkAccountSessionsSession ())
  
  (** <p>Retrieves the details of a Report Type. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
      
      @param report_type report_type
      @see "openapi/spec3.json" /v1/reporting/report_types/\{report_type\} *)
  let getReportingReportTypesReportType =
    let _op = "/v1/reporting/report_types/{report_type}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (reporting_report_type * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.reporting_report_type) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getReportingReportTypesReportType ())
  
  (** <p>Invalidates a short-lived API key for a given resource.</p>
      
      @param key key
      @see "openapi/spec3.json" /v1/ephemeral_keys/\{key\} *)
  let deleteEphemeralKeysKey =
    let _op = "/v1/ephemeral_keys/{key}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (ephemeral_key * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_9c3ca26028
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.ephemeral_key) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteEphemeralKeysKey ())
  
  (** <p>Retrieves the token with the given ID.</p>
      
      @param token token
      @see "openapi/spec3.json" /v1/tokens/\{token\} *)
  let getTokensToken =
    let _op = "/v1/tokens/{token}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (token * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.token) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTokensToken ())
  
  (** <p>Initiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become <code>active</code>, and if payment fails the subscription will be <code>past_due</code>. The resumption invoice will void automatically if not paid by the expiration date.</p>
      
      @param subscription subscription
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription\}/resume *)
  let postSubscriptionsSubscriptionResume =
    let _op = "/v1/subscriptions/{subscription}/resume" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (subscription * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_ad795eca9c
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.subscription) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postSubscriptionsSubscriptionResume ())
  
  (** <p>Retrieves the details of an existing InboundTransfer.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/inbound_transfers/\{id\} *)
  let getTreasuryInboundTransfersId =
    let _op = "/v1/treasury/inbound_transfers/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (treasury_inbound_transfer * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_inbound_transfer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTreasuryInboundTransfersId ())
  
  (** <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param cardholder cardholder
      @see "openapi/spec3.json" /v1/issuing/cardholders/\{cardholder\} *)
  let postIssuingCardholdersCardholder =
    let _op = "/v1/issuing/cardholders/{cardholder}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_cardholder * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_5485d2e44c
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_cardholder) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postIssuingCardholdersCardholder ())
  
  (** <p>Retrieves an Issuing <code>Cardholder</code> object.</p>
      
      @param cardholder cardholder
      @see "openapi/spec3.json" /v1/issuing/cardholders/\{cardholder\} *)
  let getIssuingCardholdersCardholder =
    let _op = "/v1/issuing/cardholders/{cardholder}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (issuing_cardholder * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_cardholder) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIssuingCardholdersCardholder ())
  
  (** <p>When retrieving a quote, there is an includable <a href="https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items"><strong>computed.upfront.line_items</strong></a> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/computed_upfront_line_items *)
  let getQuotesQuoteComputedUpfrontLineItems =
    let _op = "/v1/quotes/{quote}/computed_upfront_line_items" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_61b163891b * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_61b163891b) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getQuotesQuoteComputedUpfrontLineItems ())
  
  (** <p>Retrieves the details of a Climate product with the given ID.</p>
      
      @param product product
      @see "openapi/spec3.json" /v1/climate/products/\{product\} *)
  let getClimateProductsProduct =
    let _op = "/v1/climate/products/{product}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (climate_product * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.climate_product) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getClimateProductsProduct ())
  
  (** <p>Deletes a test clock.</p>
      
      @param test_clock test_clock
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks/\{test_clock\} *)
  let deleteTestHelpersTestClocksTestClock =
    let _op = "/v1/test_helpers/test_clocks/{test_clock}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_test_helpers_test_clock * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.deleted_test_helpers_test_clock) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteTestHelpersTestClocksTestClock ())
  
  (** <p>Retrieves a test clock.</p>
      
      @param test_clock test_clock
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks/\{test_clock\} *)
  let getTestHelpersTestClocksTestClock =
    let _op = "/v1/test_helpers/test_clocks/{test_clock}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (test_helpers_test_clock * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.test_helpers_test_clock) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTestHelpersTestClocksTestClock ())
  
  (** <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
      
      <p>If the card’s owner has no default card, then the new card will become the default.
      However, if the owner already has a default, then it will not change.
      To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources *)
  let postCustomersCustomerSources =
    let _op = "/v1/customers/{customer}/sources" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_source * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_25713982da
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_source) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCustomersCustomerSources ())
  
  (** <p>List sources for a specified customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources *)
  let getCustomersCustomerSources =
    let _op = "/v1/customers/{customer}/sources" in
    let _k _path ?ending_before ?expand ?limit ?object_ ?starting_after
        _req :
          ([`CH_OK of (t_08def66363 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match object_ with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"object" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_08def66363) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCustomersCustomerSources ())
  
  (** <p>Initiates a payment flow on a Reader.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/process_payment_intent *)
  let postTerminalReadersReaderProcessPaymentIntent =
    let _op = "/v1/terminal/readers/{reader}/process_payment_intent" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (terminal_reader * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_bcad42072c
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.terminal_reader) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTerminalReadersReaderProcessPaymentIntent ())
  
  (** <p>Transitions a test mode created OutboundPayment to the <code>returned</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_payments/\{id\}/return *)
  let postTestHelpersTreasuryOutboundPaymentsIdReturn =
    let _op = "/v1/test_helpers/treasury/outbound_payments/{id}/return" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_outbound_payment * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_5e31eb0dbe
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_outbound_payment) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersTreasuryOutboundPaymentsIdReturn ())
  
  (** <p>Creates a single-use login link for a connected account to access the Express Dashboard.</p>
      
      <p><strong>You can only create login links for accounts that use the <a href="/connect/express-dashboard">Express Dashboard</a> and are connected to your platform</strong>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/login_links *)
  let postAccountsAccountLoginLinks =
    let _op = "/v1/accounts/{account}/login_links" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (login_link * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_5afb636173
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.login_link) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postAccountsAccountLoginLinks ())
  
  (** <p>Retrieves a Tax <code>Transaction</code> object.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/tax/transactions/\{transaction\} *)
  let getTaxTransactionsTransaction =
    let _op = "/v1/tax/transactions/{transaction}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (tax_transaction * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.tax_transaction) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTaxTransactionsTransaction ())
  
  (** <p>Retrieves the details of an existing file object. After you supply a unique file ID, Stripe returns the corresponding file object. Learn how to <a href="/docs/file-upload#download-file-contents">access file contents</a>.</p>
      
      @param file file
      @see "openapi/spec3.json" /v1/files/\{file\} *)
  let getFilesFile =
    let _op = "/v1/files/{file}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (file * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.file) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getFilesFile ())
  
  (** <p>Creates a product_feature, which represents a feature attachment to a product</p>
      
      @param product product
      @see "openapi/spec3.json" /v1/products/\{product\}/features *)
  let postProductsProductFeatures =
    let _op = "/v1/products/{product}/features" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (product_feature * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_a8fa6f704e
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.product_feature) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postProductsProductFeatures ())
  
  (** <p>Retrieve a list of features for a product</p>
      
      @param product product
      @see "openapi/spec3.json" /v1/products/\{product\}/features *)
  let getProductsProductFeatures =
    let _op = "/v1/products/{product}/features" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_7db760c7aa * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_7db760c7aa) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getProductsProductFeatures ())
  
  (** <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>inactive</code>.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/test_helpers/issuing/personalization_designs/\{personalization_design\}/deactivate *)
  let postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate =
    let _op = "/v1/test_helpers/issuing/personalization_designs/{personalization_design}/deactivate" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_personalization_design * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_e40a5805ad
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_personalization_design) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate ())
  
  (** <p>Confirm that your customer intends to set up the current or
      provided payment method. For example, you would confirm a SetupIntent
      when a customer hits the “Save” button on a payment method management
      page on your website.</p>
      
      <p>If the selected payment method does not require any additional
      steps from the customer, the SetupIntent will transition to the
      <code>succeeded</code> status.</p>
      
      <p>Otherwise, it will transition to the <code>requires_action</code> status and
      suggest additional actions via <code>next_action</code>. If setup fails,
      the SetupIntent will transition to the
      <code>requires_payment_method</code> status or the <code>canceled</code> status if the
      confirmation limit is reached.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\}/confirm *)
  let postSetupIntentsIntentConfirm =
    let _op = "/v1/setup_intents/{intent}/confirm" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (setup_intent * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_3fb2b8754f
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.setup_intent) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postSetupIntentsIntentConfirm ())
  
  (** <p>Updates a billing meter</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\} *)
  let postBillingMetersId =
    let _op = "/v1/billing/meters/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (billing_meter * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_e54ad7b1b1
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.billing_meter) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postBillingMetersId ())
  
  (** <p>Retrieves a billing meter given an ID</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\} *)
  let getBillingMetersId =
    let _op = "/v1/billing/meters/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (billing_meter * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.billing_meter) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getBillingMetersId ())
  
  (** <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/pay *)
  let postInvoicesInvoicePay =
    let _op = "/v1/invoices/{invoice}/pay" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (invoice * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_ea602f43e3
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.invoice) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postInvoicesInvoicePay ())
  
  (** <p>Attempts to update the specified Issuing <code>Token</code> object to the status specified.</p>
      
      @param token token
      @see "openapi/spec3.json" /v1/issuing/tokens/\{token\} *)
  let postIssuingTokensToken =
    let _op = "/v1/issuing/tokens/{token}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_token * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_a2a369a5f3
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.issuing_token) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postIssuingTokensToken ())
  
  (** <p>Retrieves an Issuing <code>Token</code> object.</p>
      
      @param token token
      @see "openapi/spec3.json" /v1/issuing/tokens/\{token\} *)
  let getIssuingTokensToken =
    let _op = "/v1/issuing/tokens/{token}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (issuing_token * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.issuing_token) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIssuingTokensToken ())
  
  (** <p>Cancels a refund with a status of <code>requires_action</code>.</p>
      
      <p>You can’t cancel refunds in other states. Only refunds for payment methods that require customer action can enter the <code>requires_action</code> state.</p>
      
      @param refund refund
      @see "openapi/spec3.json" /v1/refunds/\{refund\}/cancel *)
  let postRefundsRefundCancel =
    let _op = "/v1/refunds/{refund}/cancel" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (refund * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_c2338af3d2
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.refund) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postRefundsRefundCancel ())
  
  (** <p>Updates an existing credit note.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/credit_notes/\{id\} *)
  let postCreditNotesId =
    let _op = "/v1/credit_notes/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (credit_note * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_ca6b3dc196
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.credit_note) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCreditNotesId ())
  
  (** <p>Retrieves the credit note object with the given identifier.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/credit_notes/\{id\} *)
  let getCreditNotesId =
    let _op = "/v1/credit_notes/{id}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (credit_note * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.credit_note) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCreditNotesId ())
  
  (** <p>Transitions a test mode created OutboundTransfer to the <code>returned</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_transfers/\{outbound_transfer\}/return *)
  let postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn =
    let _op = "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/return" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_outbound_transfer * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_3eca492c14
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_outbound_transfer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn ())
  
  (** <p>Retrieve an active entitlement</p>
      
      @param id The ID of the entitlement.
      @see "openapi/spec3.json" /v1/entitlements/active_entitlements/\{id\} *)
  let getEntitlementsActiveEntitlementsId =
    let _op = "/v1/entitlements/active_entitlements/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (entitlements_active_entitlement * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.entitlements_active_entitlement) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getEntitlementsActiveEntitlementsId ())
  
  (** <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/capabilities *)
  let getAccountsAccountCapabilities =
    let _op = "/v1/accounts/{account}/capabilities" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (t_05eeb89580 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_05eeb89580) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getAccountsAccountCapabilities ())
  
  (** <p>Lists all owners for a given <code>Account</code></p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/owners *)
  let getFinancialConnectionsAccountsAccountOwners =
    let _op = "/v1/financial_connections/accounts/{account}/owners" in
    let _k _path ?ending_before ?expand ?limit ~ownership ?starting_after
        _req :
          ([`CH_OK of (t_cb70d0eeef * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ownership" ~op:_op ~loc:`Query ~style:`Form ~explode:true ownership in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_cb70d0eeef) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getFinancialConnectionsAccountsAccountOwners ())
  
  (** <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>
      
      <p>Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.</p>
      
      <p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/capture *)
  let postPaymentIntentsIntentCapture =
    let _op = "/v1/payment_intents/{intent}/capture" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_intent * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_0221580d23
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_intent) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPaymentIntentsIntentCapture ())
  
  (** <p>Retrieves the balance transaction with the given ID.</p>
      
      <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/balance_transactions/\{id\} *)
  let getBalanceTransactionsId =
    let _op = "/v1/balance_transactions/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (balance_transaction * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.balance_transaction) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getBalanceTransactionsId ())
  
  (** <p>Refund a test-mode Transaction.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/test_helpers/issuing/transactions/\{transaction\}/refund *)
  let postTestHelpersIssuingTransactionsTransactionRefund =
    let _op = "/v1/test_helpers/issuing/transactions/{transaction}/refund" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_transaction * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_fe2456625b
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_transaction) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersIssuingTransactionsTransactionRefund ())
  
  (** <p>Removes the currently applied discount on a customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/discount *)
  let deleteCustomersCustomerDiscount =
    let _op = "/v1/customers/{customer}/discount" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_discount * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.deleted_discount) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteCustomersCustomerDiscount ())
  
  (** @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/discount *)
  let getCustomersCustomerDiscount =
    let _op = "/v1/customers/{customer}/discount" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (discount * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.discount) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCustomersCustomerDiscount ())
  
  (** <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/issuing/authorizations/\{authorization\} *)
  let postIssuingAuthorizationsAuthorization =
    let _op = "/v1/issuing/authorizations/{authorization}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_authorization * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_335ed61920
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_authorization) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postIssuingAuthorizationsAuthorization ())
  
  (** <p>Retrieves an Issuing <code>Authorization</code> object.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/issuing/authorizations/\{authorization\} *)
  let getIssuingAuthorizationsAuthorization =
    let _op = "/v1/issuing/authorizations/{authorization}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (issuing_authorization * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_authorization) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIssuingAuthorizationsAuthorization ())
  
  (** <p>Cancel an OutboundPayment.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/outbound_payments/\{id\}/cancel *)
  let postTreasuryOutboundPaymentsIdCancel =
    let _op = "/v1/treasury/outbound_payments/{id}/cancel" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_outbound_payment * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_fdc5092fe1
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_outbound_payment) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTreasuryOutboundPaymentsIdCancel ())
  
  (** <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing in an empty string.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/issuing/disputes/\{dispute\} *)
  let postIssuingDisputesDispute =
    let _op = "/v1/issuing/disputes/{dispute}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_dispute * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_891f2f5132
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.issuing_dispute) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postIssuingDisputesDispute ())
  
  (** <p>Retrieves an Issuing <code>Dispute</code> object.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/issuing/disputes/\{dispute\} *)
  let getIssuingDisputesDispute =
    let _op = "/v1/issuing/disputes/{dispute}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (issuing_dispute * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.issuing_dispute) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIssuingDisputesDispute ())
  
  (** <p>Deletes a <code>Location</code> object.</p>
      
      @param location location
      @see "openapi/spec3.json" /v1/terminal/locations/\{location\} *)
  let deleteTerminalLocationsLocation =
    let _op = "/v1/terminal/locations/{location}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_terminal_location * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.deleted_terminal_location) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteTerminalLocationsLocation ())
  
  (** <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param location location
      @see "openapi/spec3.json" /v1/terminal/locations/\{location\} *)
  let postTerminalLocationsLocation =
    let _op = "/v1/terminal/locations/{location}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (t_5cf0bd6b40 * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_9854b54c89
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_5cf0bd6b40) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTerminalLocationsLocation ())
  
  (** <p>Retrieves a <code>Location</code> object.</p>
      
      @param location location
      @see "openapi/spec3.json" /v1/terminal/locations/\{location\} *)
  let getTerminalLocationsLocation =
    let _op = "/v1/terminal/locations/{location}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (t_9ea5160203 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_9ea5160203) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTerminalLocationsLocation ())
  
  (** <p>Transitions a test mode created InboundTransfer to the <code>succeeded</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/inbound_transfers/\{id\}/succeed *)
  let postTestHelpersTreasuryInboundTransfersIdSucceed =
    let _op = "/v1/test_helpers/treasury/inbound_transfers/{id}/succeed" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_inbound_transfer * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_bbe8140a62
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_inbound_transfer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersTreasuryInboundTransfersIdSucceed ())
  
  (** @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/dispute/close *)
  let postChargesChargeDisputeClose =
    let _op = "/v1/charges/{charge}/dispute/close" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (dispute * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_77d060fc3e
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.dispute) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postChargesChargeDisputeClose ())
  
  (** <p>Update payment method configuration</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/payment_method_configurations/\{configuration\} *)
  let postPaymentMethodConfigurationsConfiguration =
    let _op = "/v1/payment_method_configurations/{configuration}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_method_configuration * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_9c715047af
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.payment_method_configuration) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postPaymentMethodConfigurationsConfiguration ())
  
  (** <p>Retrieve payment method configuration</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/payment_method_configurations/\{configuration\} *)
  let getPaymentMethodConfigurationsConfiguration =
    let _op = "/v1/payment_method_configurations/{configuration}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (payment_method_configuration * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.payment_method_configuration) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getPaymentMethodConfigurationsConfiguration ())
  
  (** <p>Updates an existing Tax <code>Registration</code> object.</p>
      
      <p>A registration cannot be deleted after it has been created. If you wish to end a registration you may do so by setting <code>expires_at</code>.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax/registrations/\{id\} *)
  let postTaxRegistrationsId =
    let _op = "/v1/tax/registrations/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (tax_registration * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_25582b7d89
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.tax_registration) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTaxRegistrationsId ())
  
  (** <p>Returns a Tax <code>Registration</code> object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax/registrations/\{id\} *)
  let getTaxRegistrationsId =
    let _op = "/v1/tax/registrations/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (tax_registration * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.tax_registration) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTaxRegistrationsId ())
  
  (** <p>Retrieves the exchange rates from the given currency to every supported currency.</p>
      
      @param rate_id rate_id
      @see "openapi/spec3.json" /v1/exchange_rates/\{rate_id\} *)
  let getExchangeRatesRateId =
    let _op = "/v1/exchange_rates/{rate_id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (exchange_rate * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.exchange_rate) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getExchangeRatesRateId ())
  
  (** <p>Lists all owners for a given <code>Account</code></p>
      
      @param account account
      @see "openapi/spec3.json" /v1/linked_accounts/\{account\}/owners *)
  let getLinkedAccountsAccountOwners =
    let _op = "/v1/linked_accounts/{account}/owners" in
    let _k _path ?ending_before ?expand ?limit ~ownership ?starting_after
        _req :
          ([`CH_OK of (t_606c2d05a7 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ownership" ~op:_op ~loc:`Query ~style:`Form ~explode:true ownership in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_606c2d05a7) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getLinkedAccountsAccountOwners ())
  
  (** <p>Refunds an application fee that has previously been collected but not yet refunded.
      Funds will be refunded to the Stripe account from which the fee was originally collected.</p>
      
      <p>You can optionally refund only part of an application fee.
      You can do so multiple times, until the entire fee has been refunded.</p>
      
      <p>Once entirely refunded, an application fee can’t be refunded again.
      This method will raise an error when called on an already-refunded application fee,
      or when trying to refund more money than is left on an application fee.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{id\}/refunds *)
  let postApplicationFeesIdRefunds =
    let _op = "/v1/application_fees/{id}/refunds" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (fee_refund * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_7cb28563a7
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.fee_refund) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postApplicationFeesIdRefunds ())
  
  (** <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{id\}/refunds *)
  let getApplicationFeesIdRefunds =
    let _op = "/v1/application_fees/{id}/refunds" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_b9e0aa198c * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_b9e0aa198c) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getApplicationFeesIdRefunds ())
  
  (** <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>failure</code>.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/test_helpers/issuing/cards/\{card\}/shipping/fail *)
  let postTestHelpersIssuingCardsCardShippingFail =
    let _op = "/v1/test_helpers/issuing/cards/{card}/shipping/fail" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_card * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_a72563115a
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.issuing_card) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersIssuingCardsCardShippingFail ())
  
  (** <p>Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.</p>
      
      @param price price
      @see "openapi/spec3.json" /v1/prices/\{price\} *)
  let postPricesPrice =
    let _op = "/v1/prices/{price}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (price * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_a7fbbe89bf
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.price) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPricesPrice ())
  
  (** <p>Retrieves the price with the given ID.</p>
      
      @param price price
      @see "openapi/spec3.json" /v1/prices/\{price\} *)
  let getPricesPrice =
    let _op = "/v1/prices/{price}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (price * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.price) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPricesPrice ())
  
  (** <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
      
      <p>If the card’s owner has no default card, then the new card will become the default.
      However, if the owner already has a default, then it will not change.
      To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts *)
  let postCustomersCustomerBankAccounts =
    let _op = "/v1/customers/{customer}/bank_accounts" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_source * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_c5d1d32dfc
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_source) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCustomersCustomerBankAccounts ())
  
  (** <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts *)
  let getCustomersCustomerBankAccounts =
    let _op = "/v1/customers/{customer}/bank_accounts" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_f21a0fa679 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_f21a0fa679) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCustomersCustomerBankAccounts ())
  
  (** <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/finalize *)
  let postInvoicesInvoiceFinalize =
    let _op = "/v1/invoices/{invoice}/finalize" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (invoice * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_a6714eec9b
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.invoice) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postInvoicesInvoiceFinalize ())
  
  (** <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/issuing/transactions/\{transaction\} *)
  let postIssuingTransactionsTransaction =
    let _op = "/v1/issuing/transactions/{transaction}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_transaction * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_6dc541f3f4
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_transaction) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postIssuingTransactionsTransaction ())
  
  (** <p>Retrieves an Issuing <code>Transaction</code> object.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/issuing/transactions/\{transaction\} *)
  let getIssuingTransactionsTransaction =
    let _op = "/v1/issuing/transactions/{transaction}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (issuing_transaction * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_transaction) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIssuingTransactionsTransaction ())
  
  (** <p>Retrieves the details of an existing Report Run.</p>
      
      @param report_run report_run
      @see "openapi/spec3.json" /v1/reporting/report_runs/\{report_run\} *)
  let getReportingReportRunsReportRun =
    let _op = "/v1/reporting/report_runs/{report_run}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (reporting_report_run * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.reporting_report_run) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getReportingReportRunsReportRun ())
  
  (** <p>Update a feature’s metadata or permanently deactivate it.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/entitlements/features/\{id\} *)
  let postEntitlementsFeaturesId =
    let _op = "/v1/entitlements/features/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (entitlements_feature * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_1b0e22ccbc
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.entitlements_feature) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postEntitlementsFeaturesId ())
  
  (** <p>Retrieves a feature</p>
      
      @param id The ID of the feature.
      @see "openapi/spec3.json" /v1/entitlements/features/\{id\} *)
  let getEntitlementsFeaturesId =
    let _op = "/v1/entitlements/features/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (entitlements_feature * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.entitlements_feature) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getEntitlementsFeaturesId ())
  
  (** <p>You can cancel a previously created payout if its status is <code>pending</code>. Stripe refunds the funds to your available balance. You can’t cancel automatic Stripe payouts.</p>
      
      @param payout payout
      @see "openapi/spec3.json" /v1/payouts/\{payout\}/cancel *)
  let postPayoutsPayoutCancel =
    let _op = "/v1/payouts/{payout}/cancel" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payout * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_664ed968a8
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payout) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPayoutsPayoutCancel ())
  
  (** <p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p>
      
      <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
      
      <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
      
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription_exposed_id\} *)
  let deleteSubscriptionsSubscriptionExposedId =
    let _op = "/v1/subscriptions/{subscription_exposed_id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (subscription * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_762524c8dc
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.subscription) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteSubscriptionsSubscriptionExposedId ())
  
  (** <p>Updates an existing subscription to match the specified parameters.
      When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes.
      To preview how the proration is calculated, use the <a href="/docs/api/invoices/upcoming">upcoming invoice</a> endpoint.</p>
      
      <p>By default, we prorate subscription changes. For example, if a customer signs up on May 1 for a <currency>100</currency> price, they’ll be billed <currency>100</currency> immediately. If on May 15 they switch to a <currency>200</currency> price, then on June 1 they’ll be billed <currency>250</currency> (<currency>200</currency> for a renewal of her subscription, plus a <currency>50</currency> prorating adjustment for half of the previous month’s <currency>100</currency> difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.</p>
      
      <p>Switching prices does not normally change the billing date or generate an immediate charge unless:</p>
      
      <ul>
      <li>The billing interval is changed (for example, from monthly to yearly).</li>
      <li>The subscription moves from free to paid, or paid to free.</li>
      <li>A trial starts or ends.</li>
      </ul>
      
      <p>In these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date.</p>
      
      <p>If you want to charge for an upgrade immediately, pass <code>proration_behavior</code> as <code>always_invoice</code> to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass <code>create_prorations</code>, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually <a href="/docs/api/invoices/create">invoice the customer</a>.</p>
      
      <p>If you don’t want to prorate, set the <code>proration_behavior</code> option to <code>none</code>. With this option, the customer is billed <currency>100</currency> on May 1 and <currency>200</currency> on June 1. Similarly, if you set <code>proration_behavior</code> to <code>none</code> when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.</p>
      
      <p>Updating the quantity on a subscription many times in an hour may result in <a href="/docs/rate-limits">rate limiting</a>. If you need to bill for a frequently changing quantity, consider integrating <a href="/docs/billing/subscriptions/usage-based">usage-based billing</a> instead.</p>
      
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription_exposed_id\} *)
  let postSubscriptionsSubscriptionExposedId =
    let _op = "/v1/subscriptions/{subscription_exposed_id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (subscription * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_90d08b81d8
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.subscription) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postSubscriptionsSubscriptionExposedId ())
  
  (** <p>Retrieves the subscription with the given ID.</p>
      
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription_exposed_id\} *)
  let getSubscriptionsSubscriptionExposedId =
    let _op = "/v1/subscriptions/{subscription_exposed_id}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (subscription * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.subscription) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getSubscriptionsSubscriptionExposedId ())
  
  (** <p>Create an external account for a given account.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts *)
  let postAccountsAccountExternalAccounts =
    let _op = "/v1/accounts/{account}/external_accounts" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (external_account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_cdbc0083b6
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.external_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postAccountsAccountExternalAccounts ())
  
  (** <p>List external accounts for an account.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts *)
  let getAccountsAccountExternalAccounts =
    let _op = "/v1/accounts/{account}/external_accounts" in
    let _k _path ?ending_before ?expand ?limit ?object_ ?starting_after
        _req :
          ([`CH_OK of (t_ed7910ccf0 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match object_ with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_4e604540e7 ~p:"object" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_ed7910ccf0) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getAccountsAccountExternalAccounts ())
  
  (** <p>Updates the Features associated with a FinancialAccount.</p>
      
      @param financial_account financial_account
      @see "openapi/spec3.json" /v1/treasury/financial_accounts/\{financial_account\}/features *)
  let postTreasuryFinancialAccountsFinancialAccountFeatures =
    let _op = "/v1/treasury/financial_accounts/{financial_account}/features" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_financial_account_features * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_e0e1caabf4
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_financial_account_features) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTreasuryFinancialAccountsFinancialAccountFeatures ())
  
  (** <p>Retrieves Features information associated with the FinancialAccount.</p>
      
      @param financial_account financial_account
      @see "openapi/spec3.json" /v1/treasury/financial_accounts/\{financial_account\}/features *)
  let getTreasuryFinancialAccountsFinancialAccountFeatures =
    let _op = "/v1/treasury/financial_accounts/{financial_account}/features" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (treasury_financial_account_features * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_financial_account_features) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getTreasuryFinancialAccountsFinancialAccountFeatures ())
  
  (** <p>Subscribes to periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/subscribe *)
  let postFinancialConnectionsAccountsAccountSubscribe =
    let _op = "/v1/financial_connections/accounts/{account}/subscribe" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (financial_connections_account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_5e3733c22b
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.financial_connections_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postFinancialConnectionsAccountsAccountSubscribe ())
  
  (** <p>Perform an incremental authorization on an eligible
      <a href="/docs/api/payment_intents/object">PaymentIntent</a>. To be eligible, the
      PaymentIntent’s status must be <code>requires_capture</code> and
      <a href="/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported">incremental_authorization_supported</a>
      must be <code>true</code>.</p>
      
      <p>Incremental authorizations attempt to increase the authorized amount on
      your customer’s card to the new, higher <code>amount</code> provided. Similar to the
      initial authorization, incremental authorizations can be declined. A
      single PaymentIntent can call this endpoint multiple times to further
      increase the authorized amount.</p>
      
      <p>If the incremental authorization succeeds, the PaymentIntent object
      returns with the updated
      <a href="/docs/api/payment_intents/object#payment_intent_object-amount">amount</a>.
      If the incremental authorization fails, a
      <a href="/docs/error-codes#card-declined">card_declined</a> error returns, and no other
      fields on the PaymentIntent or Charge update. The PaymentIntent
      object remains capturable for the previously authorized amount.</p>
      
      <p>Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines.
      After it’s captured, a PaymentIntent can no longer be incremented.</p>
      
      <p>Learn more about <a href="/docs/terminal/features/incremental-authorizations">incremental authorizations</a>.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/increment_authorization *)
  let postPaymentIntentsIntentIncrementAuthorization =
    let _op = "/v1/payment_intents/{intent}/increment_authorization" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_intent * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_49208ce375
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_intent) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postPaymentIntentsIntentIncrementAuthorization ())
  
  (** <p>Cancels a Climate order. You can cancel an order within 30 days of creation. Stripe refunds the
      reservation <code>amount_subtotal</code>, but not the <code>amount_fees</code> for user-triggered cancellations. Frontier
      might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe
      provides 90 days advance notice and refunds the <code>amount_total</code>.</p>
      
      @param order Unique identifier of the order.
      @see "openapi/spec3.json" /v1/climate/orders/\{order\}/cancel *)
  let postClimateOrdersOrderCancel =
    let _op = "/v1/climate/orders/{order}/cancel" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (climate_order * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_443b3fa246
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.climate_order) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postClimateOrdersOrderCancel ())
  
  (** <p>Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/test_helpers/terminal/readers/\{reader\}/present_payment_method *)
  let postTestHelpersTerminalReadersReaderPresentPaymentMethod =
    let _op = "/v1/test_helpers/terminal/readers/{reader}/present_payment_method" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (terminal_reader * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_97d6bcf429
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.terminal_reader) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersTerminalReadersReaderPresentPaymentMethod ())
  
  (** <p>Accepts the specified quote.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/accept *)
  let postQuotesQuoteAccept =
    let _op = "/v1/quotes/{quote}/accept" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (quote * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_7904238c21
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.quote) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postQuotesQuoteAccept ())
  
  (** <p>Returns a list of PaymentMethods for a given Customer</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/payment_methods *)
  let getCustomersCustomerPaymentMethods =
    let _op = "/v1/customers/{customer}/payment_methods" in
    let _k _path ?allow_redisplay ?ending_before ?expand ?limit
        ?starting_after ?type_
        _req :
          ([`CH_OK of (t_ad4081eaea * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match allow_redisplay with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_4f49500d45 ~p:"allow_redisplay" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match type_ with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_e03d9a444b ~p:"type" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_ad4081eaea) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCustomersCustomerPaymentMethods ())
  
  (** <p>\[Deprecated\] Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.
      This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to decline an authorization</a>.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/issuing/authorizations/\{authorization\}/decline *)
  let postIssuingAuthorizationsAuthorizationDecline =
    let _op = "/v1/issuing/authorizations/{authorization}/decline" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_authorization * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_9c4b9da4b4
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_authorization) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postIssuingAuthorizationsAuthorizationDecline ())
  
  (** <p>Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/treasury/outbound_transfers/\{outbound_transfer\} *)
  let getTreasuryOutboundTransfersOutboundTransfer =
    let _op = "/v1/treasury/outbound_transfers/{outbound_transfer}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (treasury_outbound_transfer * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_outbound_transfer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getTreasuryOutboundTransfersOutboundTransfer ())
  
  (** <p>Deletes a <code>Reader</code> object.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\} *)
  let deleteTerminalReadersReader =
    let _op = "/v1/terminal/readers/{reader}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_terminal_reader * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.deleted_terminal_reader) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteTerminalReadersReader ())
  
  (** <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\} *)
  let postTerminalReadersReader =
    let _op = "/v1/terminal/readers/{reader}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (t_d2ba7ca387 * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_d395ce2720
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_d2ba7ca387) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTerminalReadersReader ())
  
  (** <p>Retrieves a <code>Reader</code> object.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\} *)
  let getTerminalReadersReader =
    let _op = "/v1/terminal/readers/{reader}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (t_2ca1ba2569 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_2ca1ba2569) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTerminalReadersReader ())
  
  (** <p>Creates a new <code>tax_id</code> object for a customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/tax_ids *)
  let postCustomersCustomerTaxIds =
    let _op = "/v1/customers/{customer}/tax_ids" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (tax_id * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_3f758fb90a
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.tax_id) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCustomersCustomerTaxIds ())
  
  (** <p>Returns a list of tax IDs for a customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/tax_ids *)
  let getCustomersCustomerTaxIds =
    let _op = "/v1/customers/{customer}/tax_ids" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_38c8f764f1 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_38c8f764f1) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCustomersCustomerTaxIds ())
  
  (** <p>Transitions a test mode created OutboundPayment to the <code>failed</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_payments/\{id\}/fail *)
  let postTestHelpersTreasuryOutboundPaymentsIdFail =
    let _op = "/v1/test_helpers/treasury/outbound_payments/{id}/fail" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_outbound_payment * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_36bf1a8752
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_outbound_payment) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersTreasuryOutboundPaymentsIdFail ())
  
  (** <p>Updates an existing payment method domain.</p>
      
      @param payment_method_domain payment_method_domain
      @see "openapi/spec3.json" /v1/payment_method_domains/\{payment_method_domain\} *)
  let postPaymentMethodDomainsPaymentMethodDomain =
    let _op = "/v1/payment_method_domains/{payment_method_domain}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_method_domain * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_966b79b159
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.payment_method_domain) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postPaymentMethodDomainsPaymentMethodDomain ())
  
  (** <p>Retrieves the details of an existing payment method domain.</p>
      
      @param payment_method_domain payment_method_domain
      @see "openapi/spec3.json" /v1/payment_method_domains/\{payment_method_domain\} *)
  let getPaymentMethodDomainsPaymentMethodDomain =
    let _op = "/v1/payment_method_domains/{payment_method_domain}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (payment_method_domain * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.payment_method_domain) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPaymentMethodDomainsPaymentMethodDomain ())
  
  (** <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).</p>
      
      <p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
      
      @param subscription_item subscription_item
      @see "openapi/spec3.json" /v1/subscription_items/\{subscription_item\}/usage_record_summaries *)
  let getSubscriptionItemsSubscriptionItemUsageRecordSummaries =
    let _op = "/v1/subscription_items/{subscription_item}/usage_record_summaries" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_691092e518 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_691092e518) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getSubscriptionItemsSubscriptionItemUsageRecordSummaries ())
  
  (** <p>Create an external account for a given account.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/bank_accounts *)
  let postAccountsAccountBankAccounts =
    let _op = "/v1/accounts/{account}/bank_accounts" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (external_account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_33b35c33e3
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.external_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postAccountsAccountBankAccounts ())
  
  (** <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      <p>This request accepts only metadata as an argument.</p>
      
      @param transfer transfer
      @see "openapi/spec3.json" /v1/transfers/\{transfer\} *)
  let postTransfersTransfer =
    let _op = "/v1/transfers/{transfer}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (transfer * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_b6a545cdf2
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.transfer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTransfersTransfer ())
  
  (** <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p>
      
      @param transfer transfer
      @see "openapi/spec3.json" /v1/transfers/\{transfer\} *)
  let getTransfersTransfer =
    let _op = "/v1/transfers/{transfer}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (transfer * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.transfer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTransfersTransfer ())
  
  (** <p>Retrieves a Mandate object.</p>
      
      @param mandate mandate
      @see "openapi/spec3.json" /v1/mandates/\{mandate\} *)
  let getMandatesMandate =
    let _op = "/v1/mandates/{mandate}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (mandate * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.mandate) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getMandatesMandate ())
  
  (** <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>shipped</code>.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/test_helpers/issuing/cards/\{card\}/shipping/ship *)
  let postTestHelpersIssuingCardsCardShippingShip =
    let _op = "/v1/test_helpers/issuing/cards/{card}/shipping/ship" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_card * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_5a52a204c1
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.issuing_card) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersIssuingCardsCardShippingShip ())
  
  (** <p>Updates a SetupIntent object.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\} *)
  let postSetupIntentsIntent =
    let _op = "/v1/setup_intents/{intent}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (setup_intent * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_cf96a999b4
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.setup_intent) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postSetupIntentsIntent ())
  
  (** <p>Retrieves the details of a SetupIntent that has previously been created. </p>
      
      <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
      
      <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\} *)
  let getSetupIntentsIntent =
    let _op = "/v1/setup_intents/{intent}" in
    let _k _path ?client_secret ?expand
        _req :
          ([`CH_OK of (setup_intent * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match client_secret with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"client_secret" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.setup_intent) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getSetupIntentsIntent ())
  
  (** <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
      
      <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
      Funds will be refunded to the credit or debit card that was originally charged.</p>
      
      <p>You can optionally refund only part of a charge.
      You can do so multiple times, until the entire charge has been refunded.</p>
      
      <p>Once entirely refunded, a charge can’t be refunded again.
      This method will raise an error when called on an already-refunded charge,
      or when trying to refund more money than is left on a charge.</p>
      
      @param charge The identifier of the charge to refund.
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refunds *)
  let postChargesChargeRefunds =
    let _op = "/v1/charges/{charge}/refunds" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (refund * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_79e7f8c8c2
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.refund) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postChargesChargeRefunds ())
  
  (** <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refunds *)
  let getChargesChargeRefunds =
    let _op = "/v1/charges/{charge}/refunds" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_0fc9eda318 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_0fc9eda318) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getChargesChargeRefunds ())
  
  (** <p>Updates an existing file link object. Expired links can no longer be updated.</p>
      
      @param link link
      @see "openapi/spec3.json" /v1/file_links/\{link\} *)
  let postFileLinksLink =
    let _op = "/v1/file_links/{link}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (file_link * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_94fbd9b0fa
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.file_link) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postFileLinksLink ())
  
  (** <p>Retrieves the file link with the given ID.</p>
      
      @param link link
      @see "openapi/spec3.json" /v1/file_links/\{link\} *)
  let getFileLinksLink =
    let _op = "/v1/file_links/{link}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (file_link * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.file_link) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getFileLinksLink ())
  
  (** <p>Initiates a refund on a Reader</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/refund_payment *)
  let postTerminalReadersReaderRefundPayment =
    let _op = "/v1/terminal/readers/{reader}/refund_payment" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (terminal_reader * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_bc1efb62b6
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.terminal_reader) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTerminalReadersReaderRefundPayment ())
  
  (** <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\} *)
  let getFinancialConnectionsAccountsAccount =
    let _op = "/v1/financial_connections/accounts/{account}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (financial_connections_account * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.financial_connections_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getFinancialConnectionsAccountsAccount ())
  
  (** <p>Manually reconcile the remaining amount for a <code>customer_balance</code> PaymentIntent.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/apply_customer_balance *)
  let postPaymentIntentsIntentApplyCustomerBalance =
    let _op = "/v1/payment_intents/{intent}/apply_customer_balance" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_intent * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_2a30856b32
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_intent) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postPaymentIntentsIntentApplyCustomerBalance ())
  
  (** <p>Capture the payment of an existing, uncaptured charge that was created with the <code>capture</code> option set to false.</p>
      
      <p>Uncaptured payments expire a set number of days after they are created (<a href="/docs/charges/placing-a-hold">7 by default</a>), after which they are marked as refunded and capture attempts will fail.</p>
      
      <p>Don’t use this method to capture a PaymentIntent-initiated charge. Use <a href="/docs/api/payment_intents/capture">Capture a PaymentIntent</a>.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/capture *)
  let postChargesChargeCapture =
    let _op = "/v1/charges/{charge}/capture" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (charge * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_0a23dd73f1
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.charge) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postChargesChargeCapture ())
  
  (** <p>Transitions a test mode created OutboundTransfer to the <code>failed</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_transfers/\{outbound_transfer\}/fail *)
  let postTestHelpersTreasuryOutboundTransfersOutboundTransferFail =
    let _op = "/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/fail" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_outbound_transfer * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_cd767fc4a9
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_outbound_transfer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersTreasuryOutboundTransfersOutboundTransferFail ())
  
  (** <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>
      
      @param schedule schedule
      @see "openapi/spec3.json" /v1/subscription_schedules/\{schedule\}/cancel *)
  let postSubscriptionSchedulesScheduleCancel =
    let _op = "/v1/subscription_schedules/{schedule}/cancel" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (subscription_schedule * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_11a645720c
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.subscription_schedule) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postSubscriptionSchedulesScheduleCancel ())
  
  (** <p>Returns a list of transactions that modified the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cash_balance_transactions *)
  let getCustomersCustomerCashBalanceTransactions =
    let _op = "/v1/customers/{customer}/cash_balance_transactions" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_34ac9bd06d * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_34ac9bd06d) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getCustomersCustomerCashBalanceTransactions ())
  
  (** <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>
      
      <p>Consult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to <a href="#create_invoice">issue another invoice</a> or <a href="#create_credit_note">credit note</a> instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/void *)
  let postInvoicesInvoiceVoid =
    let _op = "/v1/invoices/{invoice}/void" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (invoice * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_f804a131e1
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.invoice) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postInvoicesInvoiceVoid ())
  
  (** <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>
      
      <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/disputes/\{dispute\}/close *)
  let postDisputesDisputeClose =
    let _op = "/v1/disputes/{dispute}/close" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (dispute * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_c5198a426a
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.dispute) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postDisputesDisputeClose ())
  
  (** <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param settlement settlement
      @see "openapi/spec3.json" /v1/issuing/settlements/\{settlement\} *)
  let postIssuingSettlementsSettlement =
    let _op = "/v1/issuing/settlements/{settlement}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_settlement * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_fc73a4ef65
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_settlement) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postIssuingSettlementsSettlement ())
  
  (** <p>Retrieves an Issuing <code>Settlement</code> object.</p>
      
      @param settlement settlement
      @see "openapi/spec3.json" /v1/issuing/settlements/\{settlement\} *)
  let getIssuingSettlementsSettlement =
    let _op = "/v1/issuing/settlements/{settlement}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (issuing_settlement * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_settlement) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIssuingSettlementsSettlement ())
  
  (** <p>Retrieves the balance transaction with the given ID.</p>
      
      <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/balance/history/\{id\} *)
  let getBalanceHistoryId =
    let _op = "/v1/balance/history/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (balance_transaction * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.balance_transaction) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getBalanceHistoryId ())
  
  (** <p>Attaches a PaymentMethod object to a Customer.</p>
      
      <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
      or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
      These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the <code>/v1/payment_methods/:id/attach</code>
      endpoint without first using a SetupIntent or PaymentIntent with <code>setup_future_usage</code> does not optimize the PaymentMethod for
      future use, which makes later declines and payment friction more likely.
      See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up
      future payments.</p>
      
      <p>To use this PaymentMethod as the default for invoice or subscription payments,
      set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
      on the Customer to the PaymentMethod’s ID.</p>
      
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/payment_methods/\{payment_method\}/attach *)
  let postPaymentMethodsPaymentMethodAttach =
    let _op = "/v1/payment_methods/{payment_method}/attach" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (payment_method * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_a2cd932c31
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_method) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postPaymentMethodsPaymentMethodAttach ())
  
  (** <p>Retrieves a Climate supplier object.</p>
      
      @param supplier supplier
      @see "openapi/spec3.json" /v1/climate/suppliers/\{supplier\} *)
  let getClimateSuppliersSupplier =
    let _op = "/v1/climate/suppliers/{supplier}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (climate_supplier * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.climate_supplier) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getClimateSuppliersSupplier ())
  
  (** <p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a href="/docs/identity/how-sessions-work">status</a>.</p>
      
      <p>Once canceled, future submission attempts are disabled. This cannot be undone. <a href="/docs/identity/verification-sessions#cancel">Learn more</a>.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/identity/verification_sessions/\{session\}/cancel *)
  let postIdentityVerificationSessionsSessionCancel =
    let _op = "/v1/identity/verification_sessions/{session}/cancel" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (identity_verification_session * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_63ae974194
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.identity_verification_session) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postIdentityVerificationSessionsSessionCancel ())
  
  (** <p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/line_items *)
  let getQuotesQuoteLineItems =
    let _op = "/v1/quotes/{quote}/line_items" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_b05b9010db * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_b05b9010db) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getQuotesQuoteLineItems ())
  
  (** <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/events/\{id\} *)
  let getEventsId =
    let _op = "/v1/events/{id}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (event * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.event) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getEventsId ())
  
  (** <p>When retrieving a payment link, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param payment_link payment_link
      @see "openapi/spec3.json" /v1/payment_links/\{payment_link\}/line_items *)
  let getPaymentLinksPaymentLinkLineItems =
    let _op = "/v1/payment_links/{payment_link}/line_items" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_1a3b6929f1 * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_1a3b6929f1) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getPaymentLinksPaymentLinkLineItems ())
  
  (** <p>Transitions a test mode created InboundTransfer to the <code>failed</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/inbound_transfers/\{id\}/fail *)
  let postTestHelpersTreasuryInboundTransfersIdFail =
    let _op = "/v1/test_helpers/treasury/inbound_transfers/{id}/fail" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (treasury_inbound_transfer * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_7ee7f99a15
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.treasury_inbound_transfer) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersTreasuryInboundTransfersIdFail ())
  
  (** <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/issuing/cards/\{card\} *)
  let postIssuingCardsCard =
    let _op = "/v1/issuing/cards/{card}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_card * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_af6348f16b
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.issuing_card) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postIssuingCardsCard ())
  
  (** <p>Retrieves an Issuing <code>Card</code> object.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/issuing/cards/\{card\} *)
  let getIssuingCardsCard =
    let _op = "/v1/issuing/cards/{card}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (issuing_card * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.issuing_card) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getIssuingCardsCard ())
  
  (** <p>Retrieve a list of billing meter event summaries.</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\}/event_summaries *)
  let getBillingMetersIdEventSummaries =
    let _op = "/v1/billing/meters/{id}/event_summaries" in
    let _k _path ~customer ~end_time ?ending_before ?expand ?limit
        ~start_time ?starting_after ?value_grouping_window
        _req :
          ([`CH_OK of (t_d9b8cfd01d * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"customer" ~op:_op ~loc:`Query ~style:`Form ~explode:true customer in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_Ptime_t ~p:"end_time" ~op:_op ~loc:`Query ~style:`Form ~explode:true end_time in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        let _nv = ParamSerDe'.namevalues_of_p_Ptime_t ~p:"start_time" ~op:_op ~loc:`Query ~style:`Form ~explode:true start_time in
        List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        in 
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match value_grouping_window with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_t_2ef034b1cb ~p:"value_grouping_window" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_d9b8cfd01d) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getBillingMetersIdEventSummaries ())
  
  (** <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p>
      
      @param topup topup
      @see "openapi/spec3.json" /v1/topups/\{topup\} *)
  let postTopupsTopup =
    let _op = "/v1/topups/{topup}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (topup * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_4336fe6b25
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.topup) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTopupsTopup ())
  
  (** <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p>
      
      @param topup topup
      @see "openapi/spec3.json" /v1/topups/\{topup\} *)
  let getTopupsTopup =
    let _op = "/v1/topups/{topup}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (topup * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.topup) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTopupsTopup ())
  
  (** <p>Creates an immutable transaction that updates the customer’s credit <a href="/docs/billing/customer/balance">balance</a>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/balance_transactions *)
  let postCustomersCustomerBalanceTransactions =
    let _op = "/v1/customers/{customer}/balance_transactions" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (customer_balance_transaction * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        `RequestBody
          ("application/x-www-form-urlencoded",
           BodySerDe'.body_of_t_3cf7957d1b
           ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.customer_balance_transaction) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCustomersCustomerBalanceTransactions ())
  
  (** <p>Returns a list of transactions that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/balance_transactions *)
  let getCustomersCustomerBalanceTransactions =
    let _op = "/v1/customers/{customer}/balance_transactions" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_0ff9c6b16b * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_0ff9c6b16b) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCustomersCustomerBalanceTransactions ())
  
  (** <p>Retrieves the line items of a persisted tax calculation as a collection.</p>
      
      @param calculation calculation
      @see "openapi/spec3.json" /v1/tax/calculations/\{calculation\}/line_items *)
  let getTaxCalculationsCalculationLineItems =
    let _op = "/v1/tax/calculations/{calculation}/line_items" in
    let _k _path ?ending_before ?expand ?limit ?starting_after
        _req :
          ([`CH_OK of (t_8db77c995a * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match ending_before with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"ending_before" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match limit with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_Int ~p:"limit" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _uri =
        match starting_after with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_String_ ~p:"starting_after" ~op:_op ~loc:`Query ~style:`Form ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_8db77c995a) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTaxCalculationsCalculationLineItems ())
  
  (** <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{id\} *)
  let getApplicationFeesId =
    let _op = "/v1/application_fees/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (application_fee * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.application_fee) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getApplicationFeesId ())
  
  (** <p>Reverse a test-mode Authorization.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations/\{authorization\}/reverse *)
  let postTestHelpersIssuingAuthorizationsAuthorizationReverse =
    let _op = "/v1/test_helpers/issuing/authorizations/{authorization}/reverse" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (issuing_authorization * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_71368f28f0
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.issuing_authorization) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postTestHelpersIssuingAuthorizationsAuthorizationReverse ())
  
  (** <p>Retrieves a <code>Review</code> object.</p>
      
      @param review review
      @see "openapi/spec3.json" /v1/reviews/\{review\} *)
  let getReviewsReview =
    let _op = "/v1/reviews/{review}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (review * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.review) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getReviewsReview ())
  
  (** <p>A Session can be expired when it is in one of these statuses: <code>open</code> </p>
      
      <p>After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/checkout/sessions/\{session\}/expire *)
  let postCheckoutSessionsSessionExpire =
    let _op = "/v1/checkout/sessions/{session}/expire" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (checkout_session * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_b43e6c27b9
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.checkout_session) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCheckoutSessionsSessionExpire ())
  
  (** <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/linked_accounts/\{account\} *)
  let getLinkedAccountsAccount =
    let _op = "/v1/linked_accounts/{account}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (financial_connections_account * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.financial_connections_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getLinkedAccountsAccount ())
  
  (** <p>Delete a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources/\{id\} *)
  let deleteCustomersCustomerSourcesId =
    let _op = "/v1/customers/{customer}/sources/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (t_856459704a * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_86637173ac
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_856459704a) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteCustomersCustomerSourcesId ())
  
  (** <p>Update a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources/\{id\} *)
  let postCustomersCustomerSourcesId =
    let _op = "/v1/customers/{customer}/sources/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (t_7f9b4fe25c * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_8d2f372785
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_7f9b4fe25c) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCustomersCustomerSourcesId ())
  
  (** <p>Retrieve a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources/\{id\} *)
  let getCustomersCustomerSourcesId =
    let _op = "/v1/customers/{customer}/sources/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (payment_source * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_source) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCustomersCustomerSourcesId ())
  
  (** <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      <p>This request only accepts metadata as an argument.</p>
      
      @param fee fee
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{fee\}/refunds/\{id\} *)
  let postApplicationFeesFeeRefundsId =
    let _op = "/v1/application_fees/{fee}/refunds/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (fee_refund * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_4c8a52d117
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.fee_refund) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postApplicationFeesFeeRefundsId ())
  
  (** <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p>
      
      @param fee fee
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{fee\}/refunds/\{id\} *)
  let getApplicationFeesFeeRefundsId =
    let _op = "/v1/application_fees/{fee}/refunds/{id}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (fee_refund * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.fee_refund) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getApplicationFeesFeeRefundsId ())
  
  (** <p>Deletes the feature attachment to a product</p>
      
      @param product product
      @param id id
      @see "openapi/spec3.json" /v1/products/\{product\}/features/\{id\} *)
  let deleteProductsProductFeaturesId =
    let _op = "/v1/products/{product}/features/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_product_feature * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.deleted_product_feature) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteProductsProductFeaturesId ())
  
  (** <p>Retrieves a product_feature, which represents a feature attachment to a product</p>
      
      @param product The ID of the product.
      @param id The ID of the product_feature.
      @see "openapi/spec3.json" /v1/products/\{product\}/features/\{id\} *)
  let getProductsProductFeaturesId =
    let _op = "/v1/products/{product}/features/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (product_feature * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.product_feature) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getProductsProductFeaturesId ())
  
  (** <p>Removes the currently applied discount on a customer.</p>
      
      @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\}/discount *)
  let deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount =
    let _op = "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_discount * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.deleted_discount) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount ())
  
  (** @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\}/discount *)
  let getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount =
    let _op = "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (discount * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.discount) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount ())
  
  (** <p>Updates an existing Account Capability. Request or remove a capability by updating its <code>requested</code> parameter.</p>
      
      @param account account
      @param capability capability
      @see "openapi/spec3.json" /v1/accounts/\{account\}/capabilities/\{capability\} *)
  let postAccountsAccountCapabilitiesCapability =
    let _op = "/v1/accounts/{account}/capabilities/{capability}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (capability * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_710cc66740
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.capability) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postAccountsAccountCapabilitiesCapability ())
  
  (** <p>Retrieves information about the specified Account Capability.</p>
      
      @param account account
      @param capability capability
      @see "openapi/spec3.json" /v1/accounts/\{account\}/capabilities/\{capability\} *)
  let getAccountsAccountCapabilitiesCapability =
    let _op = "/v1/accounts/{account}/capabilities/{capability}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (capability * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.capability) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getAccountsAccountCapabilitiesCapability ())
  
  (** <p>Delete a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts/\{id\} *)
  let deleteCustomersCustomerBankAccountsId =
    let _op = "/v1/customers/{customer}/bank_accounts/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (t_f45fcafdae * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_a53acb8ec8
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_f45fcafdae) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteCustomersCustomerBankAccountsId ())
  
  (** <p>Update a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts/\{id\} *)
  let postCustomersCustomerBankAccountsId =
    let _op = "/v1/customers/{customer}/bank_accounts/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (t_2bc92fc692 * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_e2011092a6
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_2bc92fc692) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCustomersCustomerBankAccountsId ())
  
  (** <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts/\{id\} *)
  let getCustomersCustomerBankAccountsId =
    let _op = "/v1/customers/{customer}/bank_accounts/{id}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (bank_account * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.bank_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCustomersCustomerBankAccountsId ())
  
  (** <p>Retrieves a PaymentMethod object for a given Customer.</p>
      
      @param customer customer
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/customers/\{customer\}/payment_methods/\{payment_method\} *)
  let getCustomersCustomerPaymentMethodsPaymentMethod =
    let _op = "/v1/customers/{customer}/payment_methods/{payment_method}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (payment_method * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.payment_method) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getCustomersCustomerPaymentMethodsPaymentMethod ())
  
  (** <p>Deletes an existing <code>tax_id</code> object.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/tax_ids/\{id\} *)
  let deleteCustomersCustomerTaxIdsId =
    let _op = "/v1/customers/{customer}/tax_ids/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_tax_id * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.deleted_tax_id) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteCustomersCustomerTaxIdsId ())
  
  (** <p>Retrieves the <code>tax_id</code> object with the given identifier.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/tax_ids/\{id\} *)
  let getCustomersCustomerTaxIdsId =
    let _op = "/v1/customers/{customer}/tax_ids/{id}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (tax_id * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.tax_id) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCustomersCustomerTaxIdsId ())
  
  (** <p>Delete a specified external account for a given account.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/bank_accounts/\{id\} *)
  let deleteAccountsAccountBankAccountsId =
    let _op = "/v1/accounts/{account}/bank_accounts/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_external_account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.deleted_external_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteAccountsAccountBankAccountsId ())
  
  (** <p>Updates the metadata, account holder name, account holder type of a bank account belonging to
      a connected account and optionally sets it as the default for its currency. Other bank account
      details are not editable by design.</p>
      
      <p>You can only update bank accounts when <a href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a> is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>
      
      <p>You can re-enable a disabled bank account by performing an update call without providing any
      arguments or changes.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/bank_accounts/\{id\} *)
  let postAccountsAccountBankAccountsId =
    let _op = "/v1/accounts/{account}/bank_accounts/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (external_account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_6bfc2fe3c9
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.external_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postAccountsAccountBankAccountsId ())
  
  (** <p>Retrieve a specified external account for a given account.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/bank_accounts/\{id\} *)
  let getAccountsAccountBankAccountsId =
    let _op = "/v1/accounts/{account}/bank_accounts/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (external_account * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.external_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getAccountsAccountBankAccountsId ())
  
  (** <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      <p>This request only accepts metadata and description as arguments.</p>
      
      @param transfer transfer
      @param id id
      @see "openapi/spec3.json" /v1/transfers/\{transfer\}/reversals/\{id\} *)
  let postTransfersTransferReversalsId =
    let _op = "/v1/transfers/{transfer}/reversals/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (transfer_reversal * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_77c2de13de
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.transfer_reversal) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postTransfersTransferReversalsId ())
  
  (** <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p>
      
      @param transfer transfer
      @param id id
      @see "openapi/spec3.json" /v1/transfers/\{transfer\}/reversals/\{id\} *)
  let getTransfersTransferReversalsId =
    let _op = "/v1/transfers/{transfer}/reversals/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (transfer_reversal * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.transfer_reversal) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getTransfersTransferReversalsId ())
  
  (** <p>Update a specified refund.</p>
      
      @param charge charge
      @param refund refund
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refunds/\{refund\} *)
  let postChargesChargeRefundsRefund =
    let _op = "/v1/charges/{charge}/refunds/{refund}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (refund * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_4688cef40c
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.refund) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postChargesChargeRefundsRefund ())
  
  (** <p>Retrieves the details of an existing refund.</p>
      
      @param charge charge
      @param refund refund
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refunds/\{refund\} *)
  let getChargesChargeRefundsRefund =
    let _op = "/v1/charges/{charge}/refunds/{refund}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (refund * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.refund) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getChargesChargeRefundsRefund ())
  
  (** <p>Delete a specified external account for a given account.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts/\{id\} *)
  let deleteAccountsAccountExternalAccountsId =
    let _op = "/v1/accounts/{account}/external_accounts/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_external_account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.deleted_external_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteAccountsAccountExternalAccountsId ())
  
  (** <p>Updates the metadata, account holder name, account holder type of a bank account belonging to
      a connected account and optionally sets it as the default for its currency. Other bank account
      details are not editable by design.</p>
      
      <p>You can only update bank accounts when <a href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a> is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>
      
      <p>You can re-enable a disabled bank account by performing an update call without providing any
      arguments or changes.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts/\{id\} *)
  let postAccountsAccountExternalAccountsId =
    let _op = "/v1/accounts/{account}/external_accounts/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (external_account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_adc038ebfb
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.external_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postAccountsAccountExternalAccountsId ())
  
  (** <p>Retrieve a specified external account for a given account.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts/\{id\} *)
  let getAccountsAccountExternalAccountsId =
    let _op = "/v1/accounts/{account}/external_accounts/{id}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (external_account * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.external_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getAccountsAccountExternalAccountsId ())
  
  (** <p>Retrieves a specific cash balance transaction, which updated the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>
      
      @param customer customer
      @param transaction transaction
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cash_balance_transactions/\{transaction\} *)
  let getCustomersCustomerCashBalanceTransactionsTransaction =
    let _op = "/v1/customers/{customer}/cash_balance_transactions/{transaction}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (customer_cash_balance_transaction * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.customer_cash_balance_transaction) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getCustomersCustomerCashBalanceTransactionsTransaction ())
  
  (** <p>Most credit balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p>
      
      @param customer customer
      @param transaction transaction
      @see "openapi/spec3.json" /v1/customers/\{customer\}/balance_transactions/\{transaction\} *)
  let postCustomersCustomerBalanceTransactionsTransaction =
    let _op = "/v1/customers/{customer}/balance_transactions/{transaction}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (customer_balance_transaction * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_ab61fbafe1
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.customer_balance_transaction) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postCustomersCustomerBalanceTransactionsTransaction ())
  
  (** <p>Retrieves a specific customer balance transaction that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
      
      @param customer customer
      @param transaction transaction
      @see "openapi/spec3.json" /v1/customers/\{customer\}/balance_transactions/\{transaction\} *)
  let getCustomersCustomerBalanceTransactionsTransaction =
    let _op = "/v1/customers/{customer}/balance_transactions/{transaction}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (customer_balance_transaction * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.customer_balance_transaction) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getCustomersCustomerBalanceTransactionsTransaction ())
  
  (** <p>Retrieves a new Source MandateNotification.</p>
      
      @param source source
      @param mandate_notification mandate_notification
      @see "openapi/spec3.json" /v1/sources/\{source\}/mandate_notifications/\{mandate_notification\} *)
  let getSourcesSourceMandateNotificationsMandateNotification =
    let _op = "/v1/sources/{source}/mandate_notifications/{mandate_notification}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (source_mandate_notification * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.source_mandate_notification) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getSourcesSourceMandateNotificationsMandateNotification ())
  
  (** <p>Delete a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards/\{id\} *)
  let deleteCustomersCustomerCardsId =
    let _op = "/v1/customers/{customer}/cards/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (t_d58cff0cff * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_73e3595823
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_d58cff0cff) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteCustomersCustomerCardsId ())
  
  (** <p>Update a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards/\{id\} *)
  let postCustomersCustomerCardsId =
    let _op = "/v1/customers/{customer}/cards/{id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (t_8bf295c604 * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_0d61aaaa53
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.t_8bf295c604) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCustomersCustomerCardsId ())
  
  (** <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards/\{id\} *)
  let getCustomersCustomerCardsId =
    let _op = "/v1/customers/{customer}/cards/{id}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (card * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.card) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getCustomersCustomerCardsId ())
  
  (** <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>
      
      <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
      
      <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
      
      @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\} *)
  let deleteCustomersCustomerSubscriptionsSubscriptionExposedId =
    let _op = "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (subscription * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_d83a6d8f1b
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.subscription) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.deleteCustomersCustomerSubscriptionsSubscriptionExposedId ())
  
  (** <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>
      
      @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\} *)
  let postCustomersCustomerSubscriptionsSubscriptionExposedId =
    let _op = "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (subscription * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_6a54c2e4bd
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.subscription) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.postCustomersCustomerSubscriptionsSubscriptionExposedId ())
  
  (** <p>Retrieves the subscription with the given ID.</p>
      
      @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\} *)
  let getCustomersCustomerSubscriptionsSubscriptionExposedId =
    let _op = "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (subscription * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.subscription) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getCustomersCustomerSubscriptionsSubscriptionExposedId ())
  
  (** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons/\{person\} *)
  let deleteAccountsAccountPersonsPerson =
    let _op = "/v1/accounts/{account}/persons/{person}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_person * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.deleted_person) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteAccountsAccountPersonsPerson ())
  
  (** <p>Updates an existing person.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons/\{person\} *)
  let postAccountsAccountPersonsPerson =
    let _op = "/v1/accounts/{account}/persons/{person}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (person * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_fcf9823b71
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.person) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postAccountsAccountPersonsPerson ())
  
  (** <p>Retrieves an existing person.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons/\{person\} *)
  let getAccountsAccountPersonsPerson =
    let _op = "/v1/accounts/{account}/persons/{person}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (person * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.person) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getAccountsAccountPersonsPerson ())
  
  (** <p>Updates an invoice’s line item. Some fields, such as <code>tax_amounts</code>, only live on the invoice line item,
      so they can only be updated through this endpoint. Other fields, such as <code>amount</code>, live on both the invoice
      item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well.
      Updating an invoice’s line item is only possible before the invoice is finalized.</p>
      
      @param invoice Invoice ID of line item
      @param line_item_id Invoice line item ID
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/lines/\{line_item_id\} *)
  let postInvoicesInvoiceLinesLineItemId =
    let _op = "/v1/invoices/{invoice}/lines/{line_item_id}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (line_item * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_05b4eca2cd
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.line_item) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postInvoicesInvoiceLinesLineItemId ())
  
  (** <p>Verify a specified bank account for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts/\{id\}/verify *)
  let postCustomersCustomerBankAccountsIdVerify =
    let _op = "/v1/customers/{customer}/bank_accounts/{id}/verify" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (bank_account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_62de8cc6bb
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.bank_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCustomersCustomerBankAccountsIdVerify ())
  
  (** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people/\{person\} *)
  let deleteAccountsAccountPeoplePerson =
    let _op = "/v1/accounts/{account}/people/{person}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (deleted_person * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `DELETE ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.deleted_person) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.deleteAccountsAccountPeoplePerson ())
  
  (** <p>Updates an existing person.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people/\{person\} *)
  let postAccountsAccountPeoplePerson =
    let _op = "/v1/accounts/{account}/people/{person}" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (person * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_f8ce442641
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.person) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postAccountsAccountPeoplePerson ())
  
  (** <p>Retrieves an existing person.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people/\{person\} *)
  let getAccountsAccountPeoplePerson =
    let _op = "/v1/accounts/{account}/people/{person}" in
    let _k _path ?expand
        _req :
          ([`CH_OK of (person * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.person) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.getAccountsAccountPeoplePerson ())
  
  (** <p>Verify a specified bank account for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources/\{id\}/verify *)
  let postCustomersCustomerSourcesIdVerify =
    let _op = "/v1/customers/{customer}/sources/{id}/verify" in
    let _k _path _req :
                   ([
                     `CH_OK of
                       (bank_account * [`Http_header of string * string] list)
                    | `CH_Default of
                        (int * error * [`Http_header of string * string] list)],
                    [`Invalid_agent_attribute of string
                     | `Nonconforming_response of string * string option
                     | `Unparseable_response of string * ((int * int) * (int * int)) option])
                     result Agent.thread =
      let _attrs = [ `Method `POST ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded",
             BodySerDe'.body_of_t_60553c2dee
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.bank_account) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k (Paths'.postCustomersCustomerSourcesIdVerify ())
  
  (** <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p>
      
      @param source source
      @param source_transaction source_transaction
      @see "openapi/spec3.json" /v1/sources/\{source\}/source_transactions/\{source_transaction\} *)
  let getSourcesSourceSourceTransactionsSourceTransaction =
    let _op = "/v1/sources/{source}/source_transactions/{source_transaction}" in
    let _k _path ?expand
        _req :
          ([
            `CH_OK of
              (source_transaction * [`Http_header of string * string] list)
           | `CH_Default of
               (int * error * [`Http_header of string * string] list)],
           [`Invalid_agent_attribute of string
            | `Nonconforming_response of string * string option
            | `Unparseable_response of string * ((int * int) * (int * int)) option])
            result Agent.thread =
      let _attrs = [ `Method `GET ] in
      let _attrs =
        match _req with
        | None -> _attrs
        | Some _req ->
          `RequestBody
            ("application/x-www-form-urlencoded", BodySerDe'.body_of_p_Unit
             ~op:_op ~ctype:`FormUrlEncoded _req) :: _attrs
      in
      let _uri = (Uri.make ~path:_path ()) in
      let _uri =
        match expand with
        | Some v ->
          let _nv = ParamSerDe'.namevalues_of_p_StringList ~p:"expand" ~op:_op ~loc:`Query ~style:`DeepObject ~explode:true v in
          List.fold_left (fun acc_uri (n,v) -> Uri.add_query_param' acc_uri (n,v)) _uri _nv
        | None -> _uri
      in
      let _attrs = `Path (Uri.to_string _uri) :: _attrs in
      let _result_thread = Agent.execute _attrs in
      let ( let* ) = Agent.bind in
      let* result = _result_thread in
      match result with
      | Error e -> Agent.return (Error e)
      | Ok response ->
        let status = ref None in
        let body = Buffer.create 1024 in
        List.iter
          (function
           | `HttpStatus v -> status := Some v
           | `ResponseBody s -> Buffer.add_string body s
           | `Headers _ -> ())
          response;
        let ret =
          match !status with
          | None -> failwith "No status code returned from http agent."
          | Some _code when _code = 200 ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct
                             Encoders'.source_transaction) j with
              | o -> Ok (`CH_OK (o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
          | Some code ->
            let outheaders = ref []
            in
            List.iter
              (function
               | `HttpStatus _ | `ResponseBody _ -> ()
               | `Headers h ->
                 List.iter
                   (function
                    | n, v -> outheaders := `Http_header (n, v) :: !outheaders)
                   h) response;
            let body' = String.of_bytes (Buffer.to_bytes body) in
            begin match Ezjsonm.value_from_string_result body' with
            | Error e -> Error (Paths'._lift_read_error e)
            | Ok j ->
              begin match (Json_encoding.destruct Encoders'.error) j with
              | o -> Ok (`CH_Default (code,o, !outheaders))
              | exception Json_encoding.Cannot_destruct e ->
                Error (Paths'._lift_cannot_destruct e)
              end
            end
        in
        Agent.return ret
    in
    Routes.ksprintf _k
      (Paths'.getSourcesSourceSourceTransactionsSourceTransaction ())
  
end


module type HANDLERS = sig
  open StripeTypes
  
  
  (** <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p>
      
      @see "openapi/spec3.json" /v1/webhook_endpoints *)
  val postWebhookEndpoints : [`FormUrlEncoded of t_ef97b53327] option
    -> ([
         `CH_OK of
           (webhook_endpoint * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of your webhook endpoints.</p>
      
      @see "openapi/spec3.json" /v1/webhook_endpoints *)
  val getWebhookEndpoints : ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_009f7b6355 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a list of Transaction objects.</p>
      
      @see "openapi/spec3.json" /v1/treasury/transactions *)
  val getTreasuryTransactions : ?created:t_2bb01eccbd ->
    ?ending_before:string -> ?expand:string list ->
    financial_account:string -> ?limit:int -> ?order_by:t_65e58eb6da ->
    ?starting_after:string -> ?status:t_6f04380d09 ->
    ?status_transitions:t_b458f1b6fb -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_7daf65bc51 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates an InboundTransfer.</p>
      
      @see "openapi/spec3.json" /v1/treasury/inbound_transfers *)
  val postTreasuryInboundTransfers : [`FormUrlEncoded of t_d051225f0e] option
    -> ([
         `CH_OK of
           (treasury_inbound_transfer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of InboundTransfers sent from the specified FinancialAccount.</p>
      
      @see "openapi/spec3.json" /v1/treasury/inbound_transfers *)
  val getTreasuryInboundTransfers : ?ending_before:string ->
    ?expand:string list -> financial_account:string -> ?limit:int ->
    ?starting_after:string -> ?status:t_bda61eb198 ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_4c6dd8f0e1 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Reverses a ReceivedDebit and creates a DebitReversal object.</p>
      
      @see "openapi/spec3.json" /v1/treasury/debit_reversals *)
  val postTreasuryDebitReversals : [`FormUrlEncoded of t_82a5266788] option
    -> ([
         `CH_OK of
           (treasury_debit_reversal * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of DebitReversals.</p>
      
      @see "openapi/spec3.json" /v1/treasury/debit_reversals *)
  val getTreasuryDebitReversals : ?ending_before:string ->
    ?expand:string list -> financial_account:string -> ?limit:int ->
    ?received_debit:string -> ?resolution:t_ed1d428d1e ->
    ?starting_after:string -> ?status:t_e27a5a13e2 ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_85b19d50f4 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Allows the user to capture an arbitrary amount, also known as a forced capture.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/issuing/transactions/create_force_capture *)
  val postTestHelpersIssuingTransactionsCreateForceCapture :
    [`FormUrlEncoded of t_4088bc30cc] option
    -> ([
         `CH_OK of
           (issuing_transaction * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/reviews *)
  val getReviews : ?created:t_91991d11ce -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_4b4add6b74 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new price for an existing product. The price can be recurring or one-time.</p>
      
      @see "openapi/spec3.json" /v1/prices *)
  val postPrices : [`FormUrlEncoded of t_7db5a18132] option
    -> ([`CH_OK of (price * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of your active prices, excluding <a href="/docs/products-prices/pricing-models#inline-pricing">inline prices</a>. For the list of inactive prices, set <code>active</code> to false.</p>
      
      @see "openapi/spec3.json" /v1/prices *)
  val getPrices : ?active:bool -> ?created:t_5c423aae2d ->
    ?currency:string -> ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?lookup_keys:string list -> ?product:string ->
    ?recurring:t_54d3503cdb -> ?starting_after:string ->
    ?type_:t_806c738ca8 -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_74158d6312 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p>
      
      @see "openapi/spec3.json" /v1/exchange_rates *)
  val getExchangeRates : ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_7fe89e0e5d * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a Session object.</p>
      
      @see "openapi/spec3.json" /v1/checkout/sessions *)
  val postCheckoutSessions : [`FormUrlEncoded of t_5a1ce40dda] option
    -> ([
         `CH_OK of
           (checkout_session * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of Checkout Sessions.</p>
      
      @see "openapi/spec3.json" /v1/checkout/sessions *)
  val getCheckoutSessions : ?created:t_0b0b7bdb7e -> ?customer:string ->
    ?customer_details:t_12bf81c281 -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?payment_intent:string ->
    ?payment_link:string -> ?starting_after:string -> ?status:t_976c399de7 ->
    ?subscription:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_be210268f2 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a personalization design object.</p>
      
      @see "openapi/spec3.json" /v1/issuing/personalization_designs *)
  val postIssuingPersonalizationDesigns :
    [`FormUrlEncoded of t_2a790f7673] option
    -> ([
         `CH_OK of
           (issuing_personalization_design * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/personalization_designs *)
  val getIssuingPersonalizationDesigns : ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?lookup_keys:string list ->
    ?preferences:t_6565ec2878 -> ?starting_after:string ->
    ?status:t_386a8a09fc -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_a6474a2d5e * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.</p>
      
      @see "openapi/spec3.json" /v1/invoiceitems *)
  val postInvoiceitems : [`FormUrlEncoded of t_8fdaacf028] option
    -> ([`CH_OK of (invoiceitem * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p>
      
      @see "openapi/spec3.json" /v1/invoiceitems *)
  val getInvoiceitems : ?created:t_7181394bbb -> ?customer:string ->
    ?ending_before:string -> ?expand:string list -> ?invoice:string ->
    ?limit:int -> ?pending:bool -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_fc9322fc50 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an account.</p>
      
      @see "openapi/spec3.json" /v1/account *)
  val getAccount : ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a short-lived API key for a given resource.</p>
      
      @see "openapi/spec3.json" /v1/ephemeral_keys *)
  val postEphemeralKeys : [`FormUrlEncoded of t_6c44d9c7d2] option
    -> ([`CH_OK of (ephemeral_key * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Search for customers you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/customers/search *)
  val getCustomersSearch : ?expand:string list -> ?limit:int ->
    ?page:string -> query:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_ada489b57e * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the current account balance, based on the authentication that was used to make the request.
       For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
      
      @see "openapi/spec3.json" /v1/balance *)
  val getBalance : ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (balance * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/treasury/received_credits *)
  val postTestHelpersTreasuryReceivedCredits :
    [`FormUrlEncoded of t_0f1eb7e9e5] option
    -> ([
         `CH_OK of
           (treasury_received_credit * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Search for subscriptions you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/subscriptions/search *)
  val getSubscriptionsSearch : ?expand:string list -> ?limit:int ->
    ?page:string -> query:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_511c6be270 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
      
      <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
      Funds will be refunded to the credit or debit card that was originally charged.</p>
      
      <p>You can optionally refund only part of a charge.
      You can do so multiple times, until the entire charge has been refunded.</p>
      
      <p>Once entirely refunded, a charge can’t be refunded again.
      This method will raise an error when called on an already-refunded charge,
      or when trying to refund more money than is left on a charge.</p>
      
      @see "openapi/spec3.json" /v1/refunds *)
  val postRefunds : [`FormUrlEncoded of t_3131e049b3] option
    -> ([`CH_OK of (refund * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first The 10 most recent refunds are always available by default on the Charge object.</p>
      
      @see "openapi/spec3.json" /v1/refunds *)
  val getRefunds : ?charge:string -> ?created:t_c862988285 ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?payment_intent:string -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_84023f4c8c * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Create or replace a secret in the secret store.</p>
      
      @see "openapi/spec3.json" /v1/apps/secrets *)
  val postAppsSecrets : [`FormUrlEncoded of t_63665b08a9] option
    -> ([`CH_OK of (apps_secret * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>List all secrets stored on the given scope.</p>
      
      @see "openapi/spec3.json" /v1/apps/secrets *)
  val getAppsSecrets : ?ending_before:string -> ?expand:string list ->
    ?limit:int -> scope:t_4ce91395e3 -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_a753848072 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Search for PaymentIntents you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/payment_intents/search *)
  val getPaymentIntentsSearch : ?expand:string list -> ?limit:int ->
    ?page:string -> query:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_2b5089e91b * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieve a list of active entitlements for a customer</p>
      
      @see "openapi/spec3.json" /v1/entitlements/active_entitlements *)
  val getEntitlementsActiveEntitlements : customer:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_a59bf7d41a * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new <code>Configuration</code> object.</p>
      
      @see "openapi/spec3.json" /v1/terminal/configurations *)
  val postTerminalConfigurations : [`FormUrlEncoded of t_be0ad9b5f5] option
    -> ([
         `CH_OK of
           (terminal_configuration * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of <code>Configuration</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/terminal/configurations *)
  val getTerminalConfigurations : ?ending_before:string ->
    ?expand:string list -> ?is_account_default:bool -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_a974b789de * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.</p>
      
      @see "openapi/spec3.json" /v1/subscription_schedules *)
  val postSubscriptionSchedules : [`FormUrlEncoded of t_7e9ce92a64] option
    -> ([
         `CH_OK of
           (subscription_schedule * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the list of your subscription schedules.</p>
      
      @see "openapi/spec3.json" /v1/subscription_schedules *)
  val getSubscriptionSchedules : ?canceled_at:t_edb9c04aba ->
    ?completed_at:t_b053f4a10e -> ?created:t_8dd946adeb ->
    ?customer:string -> ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?released_at:t_e65a202262 -> ?scheduled:bool ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_131d8d58f6 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new object and begin running the report. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
      
      @see "openapi/spec3.json" /v1/reporting/report_runs *)
  val postReportingReportRuns : [`FormUrlEncoded of t_45244250b0] option
    -> ([
         `CH_OK of
           (reporting_report_run * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of Report Runs, with the most recent appearing first.</p>
      
      @see "openapi/spec3.json" /v1/reporting/report_runs *)
  val getReportingReportRuns : ?created:t_95b7b73ff8 ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_c990e5bff8 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a Climate order object for a given Climate product. The order will be processed immediately
      after creation and payment will be deducted your Stripe balance.</p>
      
      @see "openapi/spec3.json" /v1/climate/orders *)
  val postClimateOrders : [`FormUrlEncoded of t_e0d65e6591] option
    -> ([`CH_OK of (climate_order * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Lists all Climate order objects. The orders are returned sorted by creation date, with the
      most recently created orders appearing first.</p>
      
      @see "openapi/spec3.json" /v1/climate/orders *)
  val getClimateOrders : ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_9c934593c9 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>You can now model subscriptions more flexibly using the <a href="#prices">Prices API</a>. It replaces the Plans API and is backwards compatible to simplify your migration.</p>
      
      @see "openapi/spec3.json" /v1/plans *)
  val postPlans : [`FormUrlEncoded of t_2757ce4894] option
    -> ([`CH_OK of (plan * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of your plans.</p>
      
      @see "openapi/spec3.json" /v1/plans *)
  val getPlans : ?active:bool -> ?created:t_c85fb118c6 ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?product:string -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_dd09d84db3 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Lists all Issuing <code>Token</code> objects for a given card.</p>
      
      @see "openapi/spec3.json" /v1/issuing/tokens *)
  val getIssuingTokens : card:string -> ?created:t_a985a64df2 ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> ?status:t_9463e4703f ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_d442622ac0 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @see "openapi/spec3.json" /v1/invoices/upcoming/lines *)
  val getInvoicesUpcomingLines : ?automatic_tax:t_25cc6e6754 ->
    ?coupon:string -> ?currency:string -> ?customer:string ->
    ?customer_details:t_428991b112 -> ?discounts:t_ec12d0adc5 ->
    ?ending_before:string -> ?expand:string list ->
    ?invoice_items:t_6de1e50279 -> ?issuer:t_f2803c8215 -> ?limit:int ->
    ?on_behalf_of:t_d3294049d8 -> ?preview_mode:t_f90350482b ->
    ?schedule:string -> ?schedule_details:t_4592f6749b ->
    ?starting_after:string -> ?subscription:string ->
    ?subscription_billing_cycle_anchor:t_ed69666899 ->
    ?subscription_cancel_at:t_1d44572454 ->
    ?subscription_cancel_at_period_end:bool ->
    ?subscription_cancel_now:bool ->
    ?subscription_default_tax_rates:t_8f5fa696e4 ->
    ?subscription_details:t_7cca4f7dbf -> ?subscription_items:t_1d8dcb799a ->
    ?subscription_proration_behavior:t_b3cdff625a ->
    ?subscription_proration_date:Ptime.t ->
    ?subscription_resume_at:t_f0d6f3faa7 ->
    ?subscription_start_date:Ptime.t ->
    ?subscription_trial_end:t_8a9e68982d -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_298a5f6377 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/treasury/received_debits *)
  val postTestHelpersTreasuryReceivedDebits :
    [`FormUrlEncoded of t_5682e7ca57] option
    -> ([
         `CH_OK of
           (treasury_received_debit * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Allows the user to refund an arbitrary amount, also known as a unlinked refund.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/issuing/transactions/create_unlinked_refund *)
  val postTestHelpersIssuingTransactionsCreateUnlinkedRefund :
    [`FormUrlEncoded of t_5d025dbec5] option
    -> ([
         `CH_OK of
           (issuing_transaction * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Create a test-mode authorization.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations *)
  val postTestHelpersIssuingAuthorizations :
    [`FormUrlEncoded of t_0372bf8c09] option
    -> ([
         `CH_OK of
           (issuing_authorization * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.</p>
      
      <p>When you create a subscription with <code>collection_method=charge_automatically</code>, the first invoice is finalized as part of the request.
      The <code>payment_behavior</code> parameter determines the exact behavior of the initial payment.</p>
      
      <p>To start subscriptions where the first invoice always begins in a <code>draft</code> status, use <a href="/docs/billing/subscriptions/subscription-schedules#managing">subscription schedules</a> instead.
      Schedules provide the flexibility to model more complex billing configurations that change over time.</p>
      
      @see "openapi/spec3.json" /v1/subscriptions *)
  val postSubscriptions : [`FormUrlEncoded of t_43ba264db4] option
    -> ([`CH_OK of (subscription * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p>
      
      @see "openapi/spec3.json" /v1/subscriptions *)
  val getSubscriptions : ?automatic_tax:t_b1188f80a4 ->
    ?collection_method:t_d2098cac25 -> ?created:t_900f55e0e4 ->
    ?current_period_end:t_dad4a4ac5b -> ?current_period_start:t_dce85b0bb2 ->
    ?customer:string -> ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?price:string -> ?starting_after:string ->
    ?status:t_a6b80cd539 -> ?test_clock:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_2f50dabf8e * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="https://docs.stripe.com/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p>
      
      @see "openapi/spec3.json" /v1/events *)
  val getEvents : ?created:t_194d7f2624 -> ?delivery_success:bool ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> ?type_:string -> ?types:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_a9fe829193 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a configuration that describes the functionality and behavior of a PortalSession</p>
      
      @see "openapi/spec3.json" /v1/billing_portal/configurations *)
  val postBillingPortalConfigurations :
    [`FormUrlEncoded of t_a30c2d9c78] option
    -> ([
         `CH_OK of
           (billing_portal_configuration * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of configurations that describe the functionality of the customer portal.</p>
      
      @see "openapi/spec3.json" /v1/billing_portal/configurations *)
  val getBillingPortalConfigurations : ?active:bool ->
    ?ending_before:string -> ?expand:string list -> ?is_default:bool ->
    ?limit:int -> ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_f3884ce0bf * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
      
      <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
      
      @see "openapi/spec3.json" /v1/balance/history *)
  val getBalanceHistory : ?created:t_01b97bcd1e -> ?currency:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?payout:string -> ?source:string -> ?starting_after:string ->
    ?type_:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_2202d52174 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>
      
      <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
      
      <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period\[start\]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request. </p>
      
      <p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>
      
      @see "openapi/spec3.json" /v1/invoices/create_preview *)
  val postInvoicesCreatePreview : [`FormUrlEncoded of t_794a4d2df8] option
    -> ([`CH_OK of (invoice * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a billing meter event adjustment</p>
      
      @see "openapi/spec3.json" /v1/billing/meter_event_adjustments *)
  val postBillingMeterEventAdjustments :
    [`FormUrlEncoded of t_a6ac4c70d5] option
    -> ([
         `CH_OK of
           (billing_meter_event_adjustment * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>
      
      @see "openapi/spec3.json" /v1/terminal/connection_tokens *)
  val postTerminalConnectionTokens : [`FormUrlEncoded of t_2752bc4d8e] option
    -> ([
         `CH_OK of
           (terminal_connection_token * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/physical_bundles *)
  val getIssuingPhysicalBundles : ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    ?status:t_3d82a38285 -> ?type_:t_00d4956c80 ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_93afe9bb1d * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Finds a secret in the secret store by name and scope.</p>
      
      @see "openapi/spec3.json" /v1/apps/secrets/find *)
  val getAppsSecretsFind : ?expand:string list -> name:string ->
    scope:t_4a4b8daa1f -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (apps_secret * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a feature</p>
      
      @see "openapi/spec3.json" /v1/entitlements/features *)
  val postEntitlementsFeatures : [`FormUrlEncoded of t_899a7d7058] option
    -> ([
         `CH_OK of
           (entitlements_feature * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieve a list of features</p>
      
      @see "openapi/spec3.json" /v1/entitlements/features *)
  val getEntitlementsFeatures : ?archived:bool -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?lookup_key:string ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_5c8bbeb9fe * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a payment link.</p>
      
      @see "openapi/spec3.json" /v1/payment_links *)
  val postPaymentLinks : [`FormUrlEncoded of t_3f26729ec9] option
    -> ([`CH_OK of (payment_link * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of your payment links.</p>
      
      @see "openapi/spec3.json" /v1/payment_links *)
  val getPaymentLinks : ?active:bool -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_909266bbb4 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>
      
      @see "openapi/spec3.json" /v1/issuing/cardholders *)
  val postIssuingCardholders : [`FormUrlEncoded of t_7e0601cf2e] option
    -> ([
         `CH_OK of
           (issuing_cardholder * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/cardholders *)
  val getIssuingCardholders : ?created:t_5e23dd8315 -> ?email:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?phone_number:string -> ?starting_after:string -> ?status:t_d05018810d ->
    ?type_:t_9b139b4e87 -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_159106836c * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p>
      
      @see "openapi/spec3.json" /v1/credit_notes/preview/lines *)
  val getCreditNotesPreviewLines : ?amount:int -> ?credit_amount:int ->
    ?effective_at:Ptime.t -> ?ending_before:string -> ?expand:string list ->
    invoice:string -> ?limit:int -> ?lines:t_3acf43dc3b -> ?memo:string ->
    ?metadata:t_2551b208c1 -> ?out_of_band_amount:int ->
    ?reason:t_5780adc875 -> ?refund:string -> ?refund_amount:int ->
    ?shipping_cost:t_7d4b84944c -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_78e52fa8e7 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates Tax <code>Settings</code> parameters used in tax calculations. All parameters are editable but none can be removed once set.</p>
      
      @see "openapi/spec3.json" /v1/tax/settings *)
  val postTaxSettings : [`FormUrlEncoded of t_1ce9291b18] option
    -> ([`CH_OK of (tax_settings * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves Tax <code>Settings</code> for a merchant.</p>
      
      @see "openapi/spec3.json" /v1/tax/settings *)
  val getTaxSettings : ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (tax_settings * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Calculates tax based on input and returns a Tax <code>Calculation</code> object.</p>
      
      @see "openapi/spec3.json" /v1/tax/calculations *)
  val postTaxCalculations : [`FormUrlEncoded of t_28f1ad2c87] option
    -> ([`CH_OK of (tax_calculation * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of your disputes.</p>
      
      @see "openapi/spec3.json" /v1/disputes *)
  val getDisputes : ?charge:string -> ?created:t_d8f80ab533 ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?payment_intent:string -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_922afa3fe7 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>
      
      <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
      
      <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period\[start\]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request.</p>
      
      <p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>
      
      @see "openapi/spec3.json" /v1/invoices/upcoming *)
  val getInvoicesUpcoming : ?automatic_tax:t_a51466ec35 -> ?coupon:string ->
    ?currency:string -> ?customer:string -> ?customer_details:t_c87881fc5c ->
    ?discounts:t_873409613d -> ?expand:string list ->
    ?invoice_items:t_96382fbbc2 -> ?issuer:t_266682ce3a ->
    ?on_behalf_of:t_9aa5bd9e73 -> ?preview_mode:t_50aa3198c9 ->
    ?schedule:string -> ?schedule_details:t_c4767cb749 ->
    ?subscription:string ->
    ?subscription_billing_cycle_anchor:t_312ad6306f ->
    ?subscription_cancel_at:t_b9ba448b2f ->
    ?subscription_cancel_at_period_end:bool ->
    ?subscription_cancel_now:bool ->
    ?subscription_default_tax_rates:t_0178e1face ->
    ?subscription_details:t_baccbfb036 -> ?subscription_items:t_671de99c34 ->
    ?subscription_proration_behavior:t_6dff880c24 ->
    ?subscription_proration_date:Ptime.t ->
    ?subscription_resume_at:t_50e9f09abe ->
    ?subscription_start_date:Ptime.t ->
    ?subscription_trial_end:t_30748e2d12 -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (invoice * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Create an apple pay domain.</p>
      
      @see "openapi/spec3.json" /v1/apple_pay/domains *)
  val postApplePayDomains : [`FormUrlEncoded of t_578ee3d1db] option
    -> ([
         `CH_OK of
           (apple_pay_domain * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>List apple pay domains.</p>
      
      @see "openapi/spec3.json" /v1/apple_pay/domains *)
  val getApplePayDomains : ?domain_name:string -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_2c4769bee6 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p>
      
      @see "openapi/spec3.json" /v1/radar/value_lists *)
  val postRadarValueLists : [`FormUrlEncoded of t_95acbcd7ae] option
    -> ([
         `CH_OK of
           (radar_value_list * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/radar/value_lists *)
  val getRadarValueLists : ?alias:string -> ?contains:string ->
    ?created:t_b205fb898b -> ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_46113411f3 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
      
      @see "openapi/spec3.json" /v1/link_account_sessions *)
  val postLinkAccountSessions : [`FormUrlEncoded of t_5ccaf92d75] option
    -> ([
         `CH_OK of
           (financial_connections_session * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new file link object.</p>
      
      @see "openapi/spec3.json" /v1/file_links *)
  val postFileLinks : [`FormUrlEncoded of t_89239a72fa] option
    -> ([`CH_OK of (file_link * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of file links.</p>
      
      @see "openapi/spec3.json" /v1/file_links *)
  val getFileLinks : ?created:t_76bf2704bf -> ?ending_before:string ->
    ?expand:string list -> ?expired:bool -> ?file:string -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_725237f1c4 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>
      
      <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
      
      @see "openapi/spec3.json" /v1/coupons *)
  val postCoupons : [`FormUrlEncoded of t_fd91397b06] option
    -> ([`CH_OK of (coupon * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of your coupons.</p>
      
      @see "openapi/spec3.json" /v1/coupons *)
  val getCoupons : ?created:t_8efa015a15 -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_06d31e05e4 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/transactions *)
  val getIssuingTransactions : ?card:string -> ?cardholder:string ->
    ?created:t_a6ed41322f -> ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?starting_after:string -> ?type_:t_a13fab6ce7 ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_b1e8ec8e7f * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/authorizations *)
  val getIssuingAuthorizations : ?card:string -> ?cardholder:string ->
    ?created:t_28b874eafa -> ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?starting_after:string -> ?status:t_e7c047a717 ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_426671dc03 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a list of TransactionEntry objects.</p>
      
      @see "openapi/spec3.json" /v1/treasury/transaction_entries *)
  val getTreasuryTransactionEntries : ?created:t_01243047ea ->
    ?effective_at:t_fa33b5a2bd -> ?ending_before:string ->
    ?expand:string list -> financial_account:string -> ?limit:int ->
    ?order_by:t_1f08681071 -> ?starting_after:string ->
    ?transaction:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_6433a1491c * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of ReceivedDebits.</p>
      
      @see "openapi/spec3.json" /v1/treasury/received_debits *)
  val getTreasuryReceivedDebits : ?ending_before:string ->
    ?expand:string list -> financial_account:string -> ?limit:int ->
    ?starting_after:string -> ?status:t_fe86a832fb ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_15e9354091 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates an OutboundTransfer.</p>
      
      @see "openapi/spec3.json" /v1/treasury/outbound_transfers *)
  val postTreasuryOutboundTransfers :
    [`FormUrlEncoded of t_d78871063c] option
    -> ([
         `CH_OK of
           (treasury_outbound_transfer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of OutboundTransfers sent from the specified FinancialAccount.</p>
      
      @see "openapi/spec3.json" /v1/treasury/outbound_transfers *)
  val getTreasuryOutboundTransfers : ?ending_before:string ->
    ?expand:string list -> financial_account:string -> ?limit:int ->
    ?starting_after:string -> ?status:t_7e023d3347 ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_7f08263a31 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p>
      
      @see "openapi/spec3.json" /v1/transfers *)
  val postTransfers : [`FormUrlEncoded of t_304ca2adbe] option
    -> ([`CH_OK of (transfer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p>
      
      @see "openapi/spec3.json" /v1/transfers *)
  val getTransfers : ?created:t_c5c22bba1c -> ?destination:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> ?transfer_group:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_33072f36c2 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new shipping rate object.</p>
      
      @see "openapi/spec3.json" /v1/shipping_rates *)
  val postShippingRates : [`FormUrlEncoded of t_1a73a34312] option
    -> ([`CH_OK of (shipping_rate * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of your shipping rates.</p>
      
      @see "openapi/spec3.json" /v1/shipping_rates *)
  val getShippingRates : ?active:bool -> ?created:t_3115fde6ed ->
    ?currency:string -> ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_455e067f38 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates an Issuing <code>Card</code> object.</p>
      
      @see "openapi/spec3.json" /v1/issuing/cards *)
  val postIssuingCards : [`FormUrlEncoded of t_7ea94600eb] option
    -> ([`CH_OK of (issuing_card * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/cards *)
  val getIssuingCards : ?cardholder:string -> ?created:t_fd32e6450f ->
    ?ending_before:string -> ?exp_month:int -> ?exp_year:int ->
    ?expand:string list -> ?last4:string -> ?limit:int ->
    ?personalization_design:string -> ?starting_after:string ->
    ?status:t_e2b1b56eac -> ?type_:t_e42a3414c1 ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_c504de1304 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Get a preview of a credit note without creating it.</p>
      
      @see "openapi/spec3.json" /v1/credit_notes/preview *)
  val getCreditNotesPreview : ?amount:int -> ?credit_amount:int ->
    ?effective_at:Ptime.t -> ?expand:string list -> invoice:string ->
    ?lines:t_c086813c51 -> ?memo:string -> ?metadata:t_fa0c590277 ->
    ?out_of_band_amount:int -> ?reason:t_935a453a3f -> ?refund:string ->
    ?refund_amount:int -> ?shipping_cost:t_c4284eadfd ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (credit_note * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.</p>
      
      @see "openapi/spec3.json" /v1/account_sessions *)
  val postAccountSessions : [`FormUrlEncoded of t_67905fe2c6] option
    -> ([`CH_OK of (account_session * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/linked_accounts *)
  val getLinkedAccounts : ?account_holder:t_89676accde ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?session:string -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_6583320a34 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/financial_connections/accounts *)
  val getFinancialConnectionsAccounts : ?account_holder:t_32de9e954f ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?session:string -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_f2a503228b * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Search for charges you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/charges/search *)
  val getChargesSearch : ?expand:string list -> ?limit:int -> ?page:string ->
    query:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_54d21de021 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new test clock that can be attached to new customers and quotes.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks *)
  val postTestHelpersTestClocks : [`FormUrlEncoded of t_b8bc4c75fe] option
    -> ([
         `CH_OK of
           (test_helpers_test_clock * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of your test clocks.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks *)
  val getTestHelpersTestClocks : ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_56aeea4dc2 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a Tax <code>Transaction</code> from a calculation.</p>
      
      @see "openapi/spec3.json" /v1/tax/transactions/create_from_calculation *)
  val postTaxTransactionsCreateFromCalculation :
    [`FormUrlEncoded of t_ff9dfe3c27] option
    -> ([`CH_OK of (tax_transaction * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a payment method configuration</p>
      
      @see "openapi/spec3.json" /v1/payment_method_configurations *)
  val postPaymentMethodConfigurations :
    [`FormUrlEncoded of t_ee2c09384f] option
    -> ([
         `CH_OK of
           (payment_method_configuration * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>List payment method configurations</p>
      
      @see "openapi/spec3.json" /v1/payment_method_configurations *)
  val getPaymentMethodConfigurations : ?application:t_41b2207b76 ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_4aa3de8048 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a VerificationSession object.</p>
      
      <p>After the VerificationSession is created, display a verification modal using the session <code>client_secret</code> or send your users to the session’s <code>url</code>.</p>
      
      <p>If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.</p>
      
      <p>Related guide: <a href="/docs/identity/verify-identity-documents">Verify your users’ identity documents</a></p>
      
      @see "openapi/spec3.json" /v1/identity/verification_sessions *)
  val postIdentityVerificationSessions :
    [`FormUrlEncoded of t_c3c4ee4be6] option
    -> ([
         `CH_OK of
           (identity_verification_session * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of VerificationSessions</p>
      
      @see "openapi/spec3.json" /v1/identity/verification_sessions *)
  val getIdentityVerificationSessions : ?client_reference_id:string ->
    ?created:t_8333ac0d50 -> ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?starting_after:string -> ?status:t_060ea1562f ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_611fc95c22 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Lists all available Climate supplier objects.</p>
      
      @see "openapi/spec3.json" /v1/climate/suppliers *)
  val getClimateSuppliers : ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_9108407aa1 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
      
      <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
      
      @see "openapi/spec3.json" /v1/balance_transactions *)
  val getBalanceTransactions : ?created:t_e84cc44f8f -> ?currency:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?payout:string -> ?source:string -> ?starting_after:string ->
    ?type_:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_8c2090b0f2 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates an Issuing <code>Dispute</code> object. Individual pieces of evidence within the <code>evidence</code> object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a> for more details about evidence requirements.</p>
      
      @see "openapi/spec3.json" /v1/issuing/disputes *)
  val postIssuingDisputes : [`FormUrlEncoded of t_e3c236c6f0] option
    -> ([`CH_OK of (issuing_dispute * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/disputes *)
  val getIssuingDisputes : ?created:t_be86c12b19 -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    ?status:t_4b1fd7d313 -> ?transaction:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_bd998bd157 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a billing meter</p>
      
      @see "openapi/spec3.json" /v1/billing/meters *)
  val postBillingMeters : [`FormUrlEncoded of t_8abffeff82] option
    -> ([`CH_OK of (billing_meter * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieve a list of billing meters.</p>
      
      @see "openapi/spec3.json" /v1/billing/meters *)
  val getBillingMeters : ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?starting_after:string -> ?status:t_b478178155 ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_7cdca19673 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a customer session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.</p>
      
      @see "openapi/spec3.json" /v1/customer_sessions *)
  val postCustomerSessions : [`FormUrlEncoded of t_13373ed36b] option
    -> ([
         `CH_OK of
           (customer_session * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Search for products you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/products/search *)
  val getProductsSearch : ?expand:string list -> ?limit:int ->
    ?page:string -> query:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_be54f3678d * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a ForwardingRequest object.</p>
      
      @see "openapi/spec3.json" /v1/forwarding/requests *)
  val postForwardingRequests : [`FormUrlEncoded of t_4793eca8c7] option
    -> ([
         `CH_OK of
           (forwarding_request * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Lists all ForwardingRequest objects.</p>
      
      @see "openapi/spec3.json" /v1/forwarding/requests *)
  val getForwardingRequests : ?created:t_a63e6bd7de ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_893b63e1ac * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.</p>
      
      @see "openapi/spec3.json" /v1/treasury/financial_accounts *)
  val postTreasuryFinancialAccounts :
    [`FormUrlEncoded of t_7853ce0404] option
    -> ([
         `CH_OK of
           (treasury_financial_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of FinancialAccounts.</p>
      
      @see "openapi/spec3.json" /v1/treasury/financial_accounts *)
  val getTreasuryFinancialAccounts : ?created:t_9096085c5b ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_03e433631d * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a single-use token that represents a bank account’s details.
      You can use this token with any API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a <a href="#accounts">connected account</a> where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a> is <code>application</code>, which includes Custom accounts.</p>
      
      @see "openapi/spec3.json" /v1/tokens *)
  val postTokens : [`FormUrlEncoded of t_a20dfc8c22] option
    -> ([`CH_OK of (token * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new tax rate.</p>
      
      @see "openapi/spec3.json" /v1/tax_rates *)
  val postTaxRates : [`FormUrlEncoded of t_0b4946f6fc] option
    -> ([`CH_OK of (tax_rate * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p>
      
      @see "openapi/spec3.json" /v1/tax_rates *)
  val getTaxRates : ?active:bool -> ?created:t_ef1df523db ->
    ?ending_before:string -> ?expand:string list -> ?inclusive:bool ->
    ?limit:int -> ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_6d5428228f * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of scheduled query runs.</p>
      
      @see "openapi/spec3.json" /v1/sigma/scheduled_query_runs *)
  val getSigmaScheduledQueryRuns : ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_eca50da3b0 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>A quote models prices and services for a customer. Default options for <code>header</code>, <code>description</code>, <code>footer</code>, and <code>expires_at</code> can be set in the dashboard via the <a href="https://dashboard.stripe.com/settings/billing/quote">quote template</a>.</p>
      
      @see "openapi/spec3.json" /v1/quotes *)
  val postQuotes : [`FormUrlEncoded of t_59e65fb449] option
    -> ([`CH_OK of (quote * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of your quotes.</p>
      
      @see "openapi/spec3.json" /v1/quotes *)
  val getQuotes : ?customer:string -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    ?status:t_b2c88d22a6 -> ?test_clock:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_6abafa8ff5 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new customer object.</p>
      
      @see "openapi/spec3.json" /v1/customers *)
  val postCustomers : [`FormUrlEncoded of t_e376b878c0] option
    -> ([`CH_OK of (customer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p>
      
      @see "openapi/spec3.json" /v1/customers *)
  val getCustomers : ?created:t_8cd3871a8a -> ?email:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> ?test_clock:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_37ec4334cc * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p>
      
      @see "openapi/spec3.json" /v1/application_fees *)
  val getApplicationFees : ?charge:string -> ?created:t_9d68bdd713 ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_0a9659a95b * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new source object.</p>
      
      @see "openapi/spec3.json" /v1/sources *)
  val postSources : [`FormUrlEncoded of t_ceefb946bc] option
    -> ([`CH_OK of (source * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of SetupAttempts that associate with a provided SetupIntent.</p>
      
      @see "openapi/spec3.json" /v1/setup_attempts *)
  val getSetupAttempts : ?created:t_62ebe57aa0 -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> setup_intent:string ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_7e943f39e7 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a PaymentIntent object.</p>
      
      <p>After the PaymentIntent is created, attach a payment method and <a href="/docs/api/payment_intents/confirm">confirm</a>
      to continue the payment. Learn more about <a href="/docs/payments/payment-intents">the available payment flows
      with the Payment Intents API</a>.</p>
      
      <p>When you use <code>confirm=true</code> during creation, it’s equivalent to creating
      and confirming the PaymentIntent in the same call. You can use any parameters
      available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when you supply
      <code>confirm=true</code>.</p>
      
      @see "openapi/spec3.json" /v1/payment_intents *)
  val postPaymentIntents : [`FormUrlEncoded of t_52bf04ba74] option
    -> ([`CH_OK of (payment_intent * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of PaymentIntents.</p>
      
      @see "openapi/spec3.json" /v1/payment_intents *)
  val getPaymentIntents : ?created:t_94e066c621 -> ?customer:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_35ca92ace5 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of Financial Connections <code>Transaction</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/financial_connections/transactions *)
  val getFinancialConnectionsTransactions : account:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> ?transacted_at:t_656d49aac0 ->
    ?transaction_refresh:t_83d5590180 -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_3224eff6ab * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>A list of <a href="https://stripe.com/docs/tax/tax-categories">all tax codes available</a> to add to Products in order to allow specific tax calculations.</p>
      
      @see "openapi/spec3.json" /v1/tax_codes *)
  val getTaxCodes : ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_766d30cb77 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new product object.</p>
      
      @see "openapi/spec3.json" /v1/products *)
  val postProducts : [`FormUrlEncoded of t_b53a42e3b7] option
    -> ([`CH_OK of (product * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
      
      @see "openapi/spec3.json" /v1/products *)
  val getProducts : ?active:bool -> ?created:t_c04b129744 ->
    ?ending_before:string -> ?expand:string list -> ?ids:string list ->
    ?limit:int -> ?shippable:bool -> ?starting_after:string -> ?url:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_23767204da * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a session of the customer portal.</p>
      
      @see "openapi/spec3.json" /v1/billing_portal/sessions *)
  val postBillingPortalSessions : [`FormUrlEncoded of t_7157acb4f8] option
    -> ([
         `CH_OK of
           (billing_portal_session * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>This method is no longer recommended—use the <a href="/docs/api/payment_intents">Payment Intents API</a>
      to initiate a new payment instead. Confirmation of the PaymentIntent creates the <code>Charge</code>
      object used to request payment.</p>
      
      @see "openapi/spec3.json" /v1/charges *)
  val postCharges : [`FormUrlEncoded of t_110aeba15a] option
    -> ([`CH_OK of (charge * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>
      
      @see "openapi/spec3.json" /v1/charges *)
  val getCharges : ?created:t_9b9d8d63ef -> ?customer:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?payment_intent:string -> ?starting_after:string ->
    ?transfer_group:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_e9250fb72c * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p>
      
      @see "openapi/spec3.json" /v1/radar/value_list_items *)
  val postRadarValueListItems : [`FormUrlEncoded of t_a1c266101e] option
    -> ([
         `CH_OK of
           (radar_value_list_item * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/radar/value_list_items *)
  val getRadarValueListItems : ?created:t_438f8e3e47 ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> ?value:string -> value_list:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_8856fbd6de * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a payment method domain.</p>
      
      @see "openapi/spec3.json" /v1/payment_method_domains *)
  val postPaymentMethodDomains : [`FormUrlEncoded of t_ed10fbf1d5] option
    -> ([
         `CH_OK of
           (payment_method_domain * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Lists the details of existing payment method domains.</p>
      
      @see "openapi/spec3.json" /v1/payment_method_domains *)
  val getPaymentMethodDomains : ?domain_name:string -> ?enabled:bool ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_ae8386a4f0 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of ReceivedCredits.</p>
      
      @see "openapi/spec3.json" /v1/treasury/received_credits *)
  val getTreasuryReceivedCredits : ?ending_before:string ->
    ?expand:string list -> financial_account:string -> ?limit:int ->
    ?linked_flows:t_99ae8c4576 -> ?starting_after:string ->
    ?status:t_ae96c50be4 -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_f5d8852fd7 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates an OutboundPayment.</p>
      
      @see "openapi/spec3.json" /v1/treasury/outbound_payments *)
  val postTreasuryOutboundPayments : [`FormUrlEncoded of t_d8144f8c6c] option
    -> ([
         `CH_OK of
           (treasury_outbound_payment * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of OutboundPayments sent from the specified FinancialAccount.</p>
      
      @see "openapi/spec3.json" /v1/treasury/outbound_payments *)
  val getTreasuryOutboundPayments : ?created:t_fd0b444db8 ->
    ?customer:string -> ?ending_before:string -> ?expand:string list ->
    financial_account:string -> ?limit:int -> ?starting_after:string ->
    ?status:t_e134f021a2 -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_b6ddc430a3 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new <code>Reader</code> object.</p>
      
      @see "openapi/spec3.json" /v1/terminal/readers *)
  val postTerminalReaders : [`FormUrlEncoded of t_51e4bf726b] option
    -> ([`CH_OK of (terminal_reader * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of <code>Reader</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/terminal/readers *)
  val getTerminalReaders : ?device_type:t_477c159e47 ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?location:string -> ?serial_number:string -> ?starting_after:string ->
    ?status:t_76a6cf8994 -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_a08011fc7e * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new account or customer <code>tax_id</code> object.</p>
      
      @see "openapi/spec3.json" /v1/tax_ids *)
  val postTaxIds : [`FormUrlEncoded of t_6b2866cf6b] option
    -> ([`CH_OK of (tax_id * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of tax IDs.</p>
      
      @see "openapi/spec3.json" /v1/tax_ids *)
  val getTaxIds : ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?owner:t_17690afaaf -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_dd3507c4bc * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new Tax <code>Registration</code> object.</p>
      
      @see "openapi/spec3.json" /v1/tax/registrations *)
  val postTaxRegistrations : [`FormUrlEncoded of t_d4cfd141aa] option
    -> ([
         `CH_OK of
           (tax_registration * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of Tax <code>Registration</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/tax/registrations *)
  val getTaxRegistrations : ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?starting_after:string -> ?status:t_66eb6371e3 ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_d15b8e2101 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a billing meter event</p>
      
      @see "openapi/spec3.json" /v1/billing/meter_events *)
  val postBillingMeterEvents : [`FormUrlEncoded of t_be3cd11bea] option
    -> ([
         `CH_OK of
           (billing_meter_event * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a SetupIntent object.</p>
      
      <p>After you create the SetupIntent, attach a payment method and <a href="/docs/api/setup_intents/confirm">confirm</a>
      it to collect any required permissions to charge the payment method later.</p>
      
      @see "openapi/spec3.json" /v1/setup_intents *)
  val postSetupIntents : [`FormUrlEncoded of t_0ec470b3d8] option
    -> ([`CH_OK of (setup_intent * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of SetupIntents.</p>
      
      @see "openapi/spec3.json" /v1/setup_intents *)
  val getSetupIntents : ?attach_to_self:bool -> ?created:t_47dcc46a23 ->
    ?customer:string -> ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?payment_method:string -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_239fb21d51 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users.
      To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>
      
      <p>If you’ve already collected information for your connected accounts, you <a href="/docs/connect/best-practices#onboarding">can prefill that information</a> when
      creating the account. Connect Onboarding won’t ask for the prefilled information during account onboarding.
      You can prefill any information on the account.</p>
      
      @see "openapi/spec3.json" /v1/accounts *)
  val postAccounts : [`FormUrlEncoded of t_ccb3a5d119] option
    -> ([`CH_OK of (account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p>
      
      @see "openapi/spec3.json" /v1/accounts *)
  val getAccounts : ?created:t_ab8d71cc96 -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_e9e70482f6 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Search for prices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/prices/search *)
  val getPricesSearch : ?expand:string list -> ?limit:int -> ?page:string ->
    query:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_b12b4b0777 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>To upload a file to Stripe, you need to send a request of type <code>multipart/form-data</code>. Include the file you want to upload in the request, and the parameters for creating a file.</p>
      
      <p>All of Stripe’s officially supported Client libraries support sending <code>multipart/form-data</code>.</p>
      
      @see "openapi/spec3.json" /v1/files *)
  val postFiles :
    unit -> ([`CH_OK of (file * [`Http_header of string * string] list)
             | `CH_Default of
                 (int * error * [`Http_header of string * string] list)],
             [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of the files that your account has access to. Stripe sorts and returns the files by their creation dates, placing the most recently created files at the top.</p>
      
      @see "openapi/spec3.json" /v1/files *)
  val getFiles : ?created:t_2657bcad54 -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?purpose:t_512e4129fd ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_2a634191d6 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a full list of Report Types.</p>
      
      @see "openapi/spec3.json" /v1/reporting/report_types *)
  val getReportingReportTypes : ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_e7f85dc1b8 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you <a href="#finalize_invoice">finalize</a> the invoice, which allows you to <a href="#pay_invoice">pay</a> or <a href="#send_invoice">send</a> the invoice to your customers.</p>
      
      @see "openapi/spec3.json" /v1/invoices *)
  val postInvoices : [`FormUrlEncoded of t_f4dd4bd97f] option
    -> ([`CH_OK of (invoice * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>
      
      @see "openapi/spec3.json" /v1/invoices *)
  val getInvoices : ?collection_method:t_3d308e0087 ->
    ?created:t_5fae893ff7 -> ?customer:string -> ?due_date:t_e8ff8d2aa0 ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> ?status:t_2e0259263b -> ?subscription:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_3fdedd95af * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Lists all Country Spec objects available in the API.</p>
      
      @see "openapi/spec3.json" /v1/country_specs *)
  val getCountrySpecs : ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_dae1032511 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Deletes a secret from the secret store by name and scope.</p>
      
      @see "openapi/spec3.json" /v1/apps/secrets/delete *)
  val postAppsSecretsDelete : [`FormUrlEncoded of t_612edc5ff6] option
    -> ([`CH_OK of (apps_secret * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p>
      
      @see "openapi/spec3.json" /v1/account_links *)
  val postAccountLinks : [`FormUrlEncoded of t_af021e5cb9] option
    -> ([`CH_OK of (account_link * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p>
      
      <p>Instead of creating a PaymentMethod directly, we recommend using the <a href="/docs/payments/accept-a-payment">PaymentIntents</a> API to accept a payment immediately or the <a href="/docs/payments/save-and-reuse">SetupIntent</a> API to collect payment method details ahead of a future payment.</p>
      
      @see "openapi/spec3.json" /v1/payment_methods *)
  val postPaymentMethods : [`FormUrlEncoded of t_e421cf319c] option
    -> ([`CH_OK of (payment_method * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the <a href="/docs/api/payment_methods/customer_list">List a Customer’s PaymentMethods</a> API instead.</p>
      
      @see "openapi/spec3.json" /v1/payment_methods *)
  val getPaymentMethods : ?customer:string -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    ?type_:t_735ee27343 -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_74744e00a9 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
      
      @see "openapi/spec3.json" /v1/financial_connections/sessions *)
  val postFinancialConnectionsSessions :
    [`FormUrlEncoded of t_cde4466fd6] option
    -> ([
         `CH_OK of
           (financial_connections_session * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Reverses a ReceivedCredit and creates a CreditReversal object.</p>
      
      @see "openapi/spec3.json" /v1/treasury/credit_reversals *)
  val postTreasuryCreditReversals : [`FormUrlEncoded of t_a5c801e05a] option
    -> ([
         `CH_OK of
           (treasury_credit_reversal * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of CreditReversals.</p>
      
      @see "openapi/spec3.json" /v1/treasury/credit_reversals *)
  val getTreasuryCreditReversals : ?ending_before:string ->
    ?expand:string list -> financial_account:string -> ?limit:int ->
    ?received_credit:string -> ?starting_after:string ->
    ?status:t_de06274f51 -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_cd83af3254 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Top up the balance of an account</p>
      
      @see "openapi/spec3.json" /v1/topups *)
  val postTopups : [`FormUrlEncoded of t_022e0bcd29] option
    -> ([`CH_OK of (topup * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of top-ups.</p>
      
      @see "openapi/spec3.json" /v1/topups *)
  val getTopups : ?amount:t_6684cf5aa7 -> ?created:t_ca787dca43 ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> ?status:t_ce1d711154 ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_b3bb6e49c1 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new <code>Location</code> object.
      For further details, including which address fields are required in each country, see the <a href="/docs/terminal/fleet/locations">Manage locations</a> guide.</p>
      
      @see "openapi/spec3.json" /v1/terminal/locations *)
  val postTerminalLocations : [`FormUrlEncoded of t_37595dc516] option
    -> ([
         `CH_OK of
           (terminal_location * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of <code>Location</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/terminal/locations *)
  val getTerminalLocations : ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_18896ee670 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Search for invoices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/invoices/search *)
  val getInvoicesSearch : ?expand:string list -> ?limit:int ->
    ?page:string -> query:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_0dd02c6566 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Partially or fully reverses a previously created <code>Transaction</code>.</p>
      
      @see "openapi/spec3.json" /v1/tax/transactions/create_reversal *)
  val postTaxTransactionsCreateReversal :
    [`FormUrlEncoded of t_dffa1193e7] option
    -> ([`CH_OK of (tax_transaction * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of early fraud warnings.</p>
      
      @see "openapi/spec3.json" /v1/radar/early_fraud_warnings *)
  val getRadarEarlyFraudWarnings : ?charge:string -> ?created:t_902cd52d55 ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?payment_intent:string -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_c75c63afbf * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>To send funds to your own bank account, create a new payout object. Your <a href="#balance">Stripe balance</a> must cover the payout amount. If it doesn’t, you receive an “Insufficient Funds” error.</p>
      
      <p>If your API key is in test mode, money won’t actually be sent, though every other action occurs as if you’re in live mode.</p>
      
      <p>If you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>
      
      @see "openapi/spec3.json" /v1/payouts *)
  val postPayouts : [`FormUrlEncoded of t_14881ac1de] option
    -> ([`CH_OK of (payout * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.</p>
      
      @see "openapi/spec3.json" /v1/payouts *)
  val getPayouts : ?arrival_date:t_dfda23638e -> ?created:t_78f6837d46 ->
    ?destination:string -> ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?starting_after:string -> ?status:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_1db4f9e6c3 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.</p>
      
      @see "openapi/spec3.json" /v1/promotion_codes *)
  val postPromotionCodes : [`FormUrlEncoded of t_cd74e8c628] option
    -> ([`CH_OK of (promotion_code * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of your promotion codes.</p>
      
      @see "openapi/spec3.json" /v1/promotion_codes *)
  val getPromotionCodes : ?active:bool -> ?code:string -> ?coupon:string ->
    ?created:t_1d3358b59f -> ?customer:string -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_2bf486f9cb * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a test mode Confirmation Token server side for your integration tests.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/confirmation_tokens *)
  val postTestHelpersConfirmationTokens :
    [`FormUrlEncoded of t_c84b074f55] option
    -> ([
         `CH_OK of
           (confirmation_token * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p>
      
      @see "openapi/spec3.json" /v1/subscription_items *)
  val postSubscriptionItems : [`FormUrlEncoded of t_bfa35cdc31] option
    -> ([
         `CH_OK of
           (subscription_item * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of your subscription items for a given subscription.</p>
      
      @see "openapi/spec3.json" /v1/subscription_items *)
  val getSubscriptionItems : ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?starting_after:string -> subscription:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_d9f7fccdc8 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>List all verification reports.</p>
      
      @see "openapi/spec3.json" /v1/identity/verification_reports *)
  val getIdentityVerificationReports : ?client_reference_id:string ->
    ?created:t_b566f1b6bc -> ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?starting_after:string -> ?type_:t_53be0c51ff ->
    ?verification_session:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_29f9765270 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces
      its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result
      in any combination of the following:</p>
      
      <ul>
      <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li>
      <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li>
      <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li>
      </ul>
      
      <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>
      
      <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code>
      or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
      
      @see "openapi/spec3.json" /v1/credit_notes *)
  val postCreditNotes : [`FormUrlEncoded of t_e1077cf4c3] option
    -> ([`CH_OK of (credit_note * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of credit notes.</p>
      
      @see "openapi/spec3.json" /v1/credit_notes *)
  val getCreditNotes : ?created:t_d1452a2e6d -> ?customer:string ->
    ?ending_before:string -> ?expand:string list -> ?invoice:string ->
    ?limit:int -> ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_4187904f5b * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Lists all available Climate product objects.</p>
      
      @see "openapi/spec3.json" /v1/climate/products *)
  val getClimateProducts : ?ending_before:string -> ?expand:string list ->
    ?limit:int -> ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_b683fe32c7 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p>
      
      @param webhook_endpoint webhook_endpoint
      @see "openapi/spec3.json" /v1/webhook_endpoints/\{webhook_endpoint\} *)
  val deleteWebhookEndpointsWebhookEndpoint : webhook_endpoint:string ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (deleted_webhook_endpoint * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p>
      
      @param webhook_endpoint webhook_endpoint
      @see "openapi/spec3.json" /v1/webhook_endpoints/\{webhook_endpoint\} *)
  val postWebhookEndpointsWebhookEndpoint : webhook_endpoint:string ->
    [`FormUrlEncoded of t_9298cf8106] option
    -> ([
         `CH_OK of
           (webhook_endpoint * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the webhook endpoint with the given ID.</p>
      
      @param webhook_endpoint webhook_endpoint
      @see "openapi/spec3.json" /v1/webhook_endpoints/\{webhook_endpoint\} *)
  val getWebhookEndpointsWebhookEndpoint : webhook_endpoint:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (webhook_endpoint * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Increment a test-mode Authorization.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations/\{authorization\}/increment *)
  val postTestHelpersIssuingAuthorizationsAuthorizationIncrement :
    authorization:string -> [`FormUrlEncoded of t_080ebc81a7] option
    -> ([
         `CH_OK of
           (issuing_authorization * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\} *)
  val deleteCustomersCustomer : customer:string ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (deleted_customer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>
      
      <p>This request accepts mostly the same arguments as the customer creation call.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\} *)
  val postCustomersCustomer : customer:string ->
    [`FormUrlEncoded of t_ccfda63fd5] option
    -> ([`CH_OK of (customer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a Customer object.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\} *)
  val getCustomersCustomer : customer:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_a33375052d * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p>
      
      @param plan plan
      @see "openapi/spec3.json" /v1/plans/\{plan\} *)
  val deletePlansPlan : plan:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (deleted_plan * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p>
      
      @param plan plan
      @see "openapi/spec3.json" /v1/plans/\{plan\} *)
  val postPlansPlan : plan:string -> [`FormUrlEncoded of t_1f7b8fed6b] option
    -> ([`CH_OK of (plan * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the plan with the given ID.</p>
      
      @param plan plan
      @see "openapi/spec3.json" /v1/plans/\{plan\} *)
  val getPlansPlan : plan:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (plan * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>With <a href="/connect">Connect</a>, you can delete accounts you manage.</p>
      
      <p>Test-mode accounts can be deleted at any time.</p>
      
      <p>Live-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be deleted when all <a href="/api/balance/balanace_object">balances</a> are zero.</p>
      
      <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/settings/account">account information tab in your account settings</a> instead.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\} *)
  val deleteAccountsAccount : account:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (deleted_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates a <a href="/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are
      left unchanged.</p>
      
      <p>For accounts where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a>
      is <code>application</code>, which includes Custom accounts, you can update any information on the account.</p>
      
      <p>For accounts where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a>
      is <code>stripe</code>, which includes Standard and Express accounts, you can update all information until you create
      an <a href="/api/account_links">Account Link</a> or <a href="/api/account_sessions">Account Session</a> to start Connect onboarding,
      after which some properties can no longer be updated.</p>
      
      <p>To update your own account, use the <a href="https://dashboard.stripe.com/settings/account">Dashboard</a>. Refer to our
      <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\} *)
  val postAccountsAccount : account:string ->
    [`FormUrlEncoded of t_89178ede20] option
    -> ([`CH_OK of (account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an account.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\} *)
  val getAccountsAccount : account:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Cancels an InboundTransfer.</p>
      
      @param inbound_transfer inbound_transfer
      @see "openapi/spec3.json" /v1/treasury/inbound_transfers/\{inbound_transfer\}/cancel *)
  val postTreasuryInboundTransfersInboundTransferCancel :
    inbound_transfer:string -> [`FormUrlEncoded of t_6f63e55d30] option
    -> ([
         `CH_OK of
           (treasury_inbound_transfer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Deletes a <code>Configuration</code> object.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/terminal/configurations/\{configuration\} *)
  val deleteTerminalConfigurationsConfiguration : configuration:string ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (deleted_terminal_configuration * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates a new <code>Configuration</code> object.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/terminal/configurations/\{configuration\} *)
  val postTerminalConfigurationsConfiguration : configuration:string ->
    [`FormUrlEncoded of t_171e2b03d7] option
    -> ([`CH_OK of (t_d5eeab4c25 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a <code>Configuration</code> object.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/terminal/configurations/\{configuration\} *)
  val getTerminalConfigurationsConfiguration : configuration:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_95f3d529c1 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of a Financial Connections <code>Session</code></p>
      
      @param session session
      @see "openapi/spec3.json" /v1/financial_connections/sessions/\{session\} *)
  val getFinancialConnectionsSessionsSession : session:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (financial_connections_session * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Finalizes the quote.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/finalize *)
  val postQuotesQuoteFinalize : quote:string ->
    [`FormUrlEncoded of t_5702cbe755] option
    -> ([`CH_OK of (quote * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to <code>Ready</code>.</p>
      
      @param test_clock test_clock
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks/\{test_clock\}/advance *)
  val postTestHelpersTestClocksTestClockAdvance : test_clock:string ->
    [`FormUrlEncoded of t_791a007bd3] option
    -> ([
         `CH_OK of
           (test_helpers_test_clock * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>List source transactions for a given source.</p>
      
      @param source source
      @see "openapi/spec3.json" /v1/sources/\{source\}/source_transactions *)
  val getSourcesSourceSourceTransactions : source:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_f3516c2ed7 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\} *)
  val postChargesCharge : charge:string ->
    [`FormUrlEncoded of t_0e88b91b2f] option
    -> ([`CH_OK of (charge * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\} *)
  val getChargesCharge : charge:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (charge * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates a payment link.</p>
      
      @param payment_link payment_link
      @see "openapi/spec3.json" /v1/payment_links/\{payment_link\} *)
  val postPaymentLinksPaymentLink : payment_link:string ->
    [`FormUrlEncoded of t_9b926cecf2] option
    -> ([`CH_OK of (payment_link * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieve a payment link.</p>
      
      @param payment_link payment_link
      @see "openapi/spec3.json" /v1/payment_links/\{payment_link\} *)
  val getPaymentLinksPaymentLink : payment_link:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (payment_link * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/received_credits/\{id\} *)
  val getTreasuryReceivedCreditsId : id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (treasury_received_credit * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates a test mode created OutboundTransfer with tracking details. The OutboundTransfer must not be cancelable, and cannot be in the <code>canceled</code> or <code>failed</code> states.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_transfers/\{outbound_transfer\} *)
  val postTestHelpersTreasuryOutboundTransfersOutboundTransfer :
    outbound_transfer:string -> [`FormUrlEncoded of t_a55a65347d] option
    -> ([
         `CH_OK of
           (treasury_outbound_transfer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates an existing subscription schedule.</p>
      
      @param schedule schedule
      @see "openapi/spec3.json" /v1/subscription_schedules/\{schedule\} *)
  val postSubscriptionSchedulesSchedule : schedule:string ->
    [`FormUrlEncoded of t_75107ffbeb] option
    -> ([
         `CH_OK of
           (subscription_schedule * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p>
      
      @param schedule schedule
      @see "openapi/spec3.json" /v1/subscription_schedules/\{schedule\} *)
  val getSubscriptionSchedulesSchedule : schedule:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (subscription_schedule * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates a VerificationSession object.</p>
      
      <p>When the session status is <code>requires_input</code>, you can use this method to update the
      verification check and options.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/identity/verification_sessions/\{session\} *)
  val postIdentityVerificationSessionsSession : session:string ->
    [`FormUrlEncoded of t_194f6521ef] option
    -> ([
         `CH_OK of
           (identity_verification_session * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of a VerificationSession that was previously created.</p>
      
      <p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid
      <code>client_secret</code> or <code>url</code> to allow re-submission.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/identity/verification_sessions/\{session\} *)
  val getIdentityVerificationSessionsSession : session:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (identity_verification_session * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p>
      
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/payment_methods/\{payment_method\} *)
  val postPaymentMethodsPaymentMethod : payment_method:string ->
    [`FormUrlEncoded of t_60145a641e] option
    -> ([`CH_OK of (payment_method * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use <a href="/docs/api/payment_methods/customer">Retrieve a Customer’s PaymentMethods</a></p>
      
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/payment_methods/\{payment_method\} *)
  val getPaymentMethodsPaymentMethod : payment_method:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (payment_method * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a Session object.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/checkout/sessions/\{session\} *)
  val getCheckoutSessionsSession : session:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (checkout_session * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Initiates a setup intent flow on a Reader.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/process_setup_intent *)
  val postTerminalReadersReaderProcessSetupIntent : reader:string ->
    [`FormUrlEncoded of t_eafcec1a11] option
    -> ([`CH_OK of (terminal_reader * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p>
      
      @param value_list value_list
      @see "openapi/spec3.json" /v1/radar/value_lists/\{value_list\} *)
  val deleteRadarValueListsValueList : value_list:string ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (deleted_radar_value_list * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p>
      
      @param value_list value_list
      @see "openapi/spec3.json" /v1/radar/value_lists/\{value_list\} *)
  val postRadarValueListsValueList : value_list:string ->
    [`FormUrlEncoded of t_878209b421] option
    -> ([
         `CH_OK of
           (radar_value_list * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a <code>ValueList</code> object.</p>
      
      @param value_list value_list
      @see "openapi/spec3.json" /v1/radar/value_lists/\{value_list\} *)
  val getRadarValueListsValueList : value_list:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (radar_value_list * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>
      
      <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/disputes/\{dispute\} *)
  val postDisputesDispute : dispute:string ->
    [`FormUrlEncoded of t_aa5914890d] option
    -> ([`CH_OK of (dispute * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the dispute with the given ID.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/disputes/\{dispute\} *)
  val getDisputesDispute : dispute:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (dispute * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a physical bundle object.</p>
      
      @param physical_bundle physical_bundle
      @see "openapi/spec3.json" /v1/issuing/physical_bundles/\{physical_bundle\} *)
  val getIssuingPhysicalBundlesPhysicalBundle : physical_bundle:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (issuing_physical_bundle * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list</p>
      
      @param credit_reversal credit_reversal
      @see "openapi/spec3.json" /v1/treasury/credit_reversals/\{credit_reversal\} *)
  val getTreasuryCreditReversalsCreditReversal : credit_reversal:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (treasury_credit_reversal * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the line items of a committed standalone transaction as a collection.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/tax/transactions/\{transaction\}/line_items *)
  val getTaxTransactionsTransactionLineItems : transaction:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_ff63b43cc3 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>
      
      <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/send *)
  val postInvoicesInvoiceSend : invoice:string ->
    [`FormUrlEncoded of t_20e4e9cd0c] option
    -> ([`CH_OK of (invoice * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Deactivates a billing meter</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\}/deactivate *)
  val postBillingMetersIdDeactivate : id:string ->
    [`FormUrlEncoded of t_55d5f288f2] option
    -> ([`CH_OK of (billing_meter * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>rejected</code>.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/test_helpers/issuing/personalization_designs/\{personalization_design\}/reject *)
  val postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject :
    personalization_design:string -> [`FormUrlEncoded of t_dd895638f0] option
    -> ([
         `CH_OK of
           (issuing_personalization_design * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Verifies microdeposits on a SetupIntent object.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\}/verify_microdeposits *)
  val postSetupIntentsIntentVerifyMicrodeposits : intent:string ->
    [`FormUrlEncoded of t_c64a825721] option
    -> ([`CH_OK of (setup_intent * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Changes the settings on a customer’s cash balance.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cash_balance *)
  val postCustomersCustomerCashBalance : customer:string ->
    [`FormUrlEncoded of t_0700419bcc] option
    -> ([`CH_OK of (cash_balance * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a customer’s cash balance.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cash_balance *)
  val getCustomersCustomerCashBalance : customer:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (cash_balance * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates properties on a PaymentIntent object without confirming.</p>
      
      <p>Depending on which properties you update, you might need to confirm the
      PaymentIntent again. For example, updating the <code>payment_method</code>
      always requires you to confirm the PaymentIntent again. If you prefer to
      update and confirm at the same time, we recommend updating properties through
      the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\} *)
  val postPaymentIntentsIntent : intent:string ->
    [`FormUrlEncoded of t_4a360b8862] option
    -> ([`CH_OK of (payment_intent * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of a PaymentIntent that has previously been created. </p>
      
      <p>You can retrieve a PaymentIntent client-side using a publishable key when the <code>client_secret</code> is in the query string. </p>
      
      <p>If you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\} *)
  val getPaymentIntentsIntent : intent:string -> ?client_secret:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (payment_intent * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a TransactionEntry object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/transaction_entries/\{id\} *)
  val getTreasuryTransactionEntriesId : id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (treasury_transaction_entry * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p>
      
      @param invoiceitem invoiceitem
      @see "openapi/spec3.json" /v1/invoiceitems/\{invoiceitem\} *)
  val deleteInvoiceitemsInvoiceitem : invoiceitem:string ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (deleted_invoiceitem * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p>
      
      @param invoiceitem invoiceitem
      @see "openapi/spec3.json" /v1/invoiceitems/\{invoiceitem\} *)
  val postInvoiceitemsInvoiceitem : invoiceitem:string ->
    [`FormUrlEncoded of t_d10dfee0d1] option
    -> ([`CH_OK of (invoiceitem * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the invoice item with the given ID.</p>
      
      @param invoiceitem invoiceitem
      @see "openapi/spec3.json" /v1/invoiceitems/\{invoiceitem\} *)
  val getInvoiceitemsInvoiceitem : invoiceitem:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (invoiceitem * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Create an incoming testmode bank transfer</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/test_helpers/customers/\{customer\}/fund_cash_balance *)
  val postTestHelpersCustomersCustomerFundCashBalance : customer:string ->
    [`FormUrlEncoded of t_b230fe05a9] option
    -> ([
         `CH_OK of
           (customer_cash_balance_transaction * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the specified order by setting the values of the parameters passed.</p>
      
      @param order Unique identifier of the order.
      @see "openapi/spec3.json" /v1/climate/orders/\{order\} *)
  val postClimateOrdersOrder : order:string ->
    [`FormUrlEncoded of t_3d31dce950] option
    -> ([`CH_OK of (climate_order * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of a Climate order object with the given ID.</p>
      
      @param order Unique identifier of the order.
      @see "openapi/spec3.json" /v1/climate/orders/\{order\} *)
  val getClimateOrdersOrder : order:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (climate_order * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer, new
      funding instructions will be created. If funding instructions have already been created for a given customer, the same
      funding instructions will be retrieved. In other words, we will return the same funding instructions each time.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/funding_instructions *)
  val postCustomersCustomerFundingInstructions : customer:string ->
    [`FormUrlEncoded of t_b31edc1c47] option
    -> ([
         `CH_OK of
           (funding_instructions * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you don’t provide. This request only accepts the metadata as arguments.</p>
      
      @param payout payout
      @see "openapi/spec3.json" /v1/payouts/\{payout\} *)
  val postPayoutsPayout : payout:string ->
    [`FormUrlEncoded of t_758f437535] option
    -> ([`CH_OK of (payout * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.</p>
      
      @param payout payout
      @see "openapi/spec3.json" /v1/payouts/\{payout\} *)
  val getPayoutsPayout : payout:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (payout * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new person.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people *)
  val postAccountsAccountPeople : account:string ->
    [`FormUrlEncoded of t_bcec995787] option
    -> ([`CH_OK of (person * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people *)
  val getAccountsAccountPeople : account:string -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?relationship:t_8dfdeac1ad ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_fde3b546b3 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the details of a FinancialAccount.</p>
      
      @param financial_account financial_account
      @see "openapi/spec3.json" /v1/treasury/financial_accounts/\{financial_account\} *)
  val postTreasuryFinancialAccountsFinancialAccount :
    financial_account:string -> [`FormUrlEncoded of t_0ff6a5a72c] option
    -> ([
         `CH_OK of
           (treasury_financial_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of a FinancialAccount.</p>
      
      @param financial_account financial_account
      @see "openapi/spec3.json" /v1/treasury/financial_accounts/\{financial_account\} *)
  val getTreasuryFinancialAccountsFinancialAccount :
    financial_account:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (treasury_financial_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Expire a refund with a status of <code>requires_action</code>.</p>
      
      @param refund refund
      @see "openapi/spec3.json" /v1/test_helpers/refunds/\{refund\}/expire *)
  val postTestHelpersRefundsRefundExpire : refund:string ->
    [`FormUrlEncoded of t_6672714713] option
    -> ([`CH_OK of (refund * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an scheduled query run.</p>
      
      @param scheduled_query_run scheduled_query_run
      @see "openapi/spec3.json" /v1/sigma/scheduled_query_runs/\{scheduled_query_run\} *)
  val getSigmaScheduledQueryRunsScheduledQueryRun :
    scheduled_query_run:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (scheduled_query_run * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/refresh *)
  val postFinancialConnectionsAccountsAccountRefresh : account:string ->
    [`FormUrlEncoded of t_9c2b26fa6b] option
    -> ([
         `CH_OK of
           (financial_connections_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Confirm that your customer intends to pay with current or provided
      payment method. Upon confirmation, the PaymentIntent will attempt to initiate
      a payment.
      If the selected payment method requires additional authentication steps, the
      PaymentIntent will transition to the <code>requires_action</code> status and
      suggest additional actions via <code>next_action</code>. If payment fails,
      the PaymentIntent transitions to the <code>requires_payment_method</code> status or the
      <code>canceled</code> status if the confirmation limit is reached. If
      payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
      status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).
      If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
      using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
      and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
      After <code>next_action</code>s are handled by the client, no additional
      confirmation is required to complete the payment.
      If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
      initiated using a secret key.
      If any actions are required for the payment, the PaymentIntent will
      return to the <code>requires_confirmation</code> state
      after those actions are completed. Your server needs to then
      explicitly re-confirm the PaymentIntent to initiate the next payment
      attempt.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/confirm *)
  val postPaymentIntentsIntentConfirm : intent:string ->
    [`FormUrlEncoded of t_d3f7d69ce7] option
    -> ([`CH_OK of (payment_intent * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates a configuration that describes the functionality of the customer portal.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/billing_portal/configurations/\{configuration\} *)
  val postBillingPortalConfigurationsConfiguration : configuration:string ->
    [`FormUrlEncoded of t_9eb8fe0469] option
    -> ([
         `CH_OK of
           (billing_portal_configuration * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a configuration that describes the functionality of the customer portal.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/billing_portal/configurations/\{configuration\} *)
  val getBillingPortalConfigurationsConfiguration : configuration:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (billing_portal_configuration * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Deletes an existing account or customer <code>tax_id</code> object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax_ids/\{id\} *)
  val deleteTaxIdsId : id:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (deleted_tax_id * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves an account or customer <code>tax_id</code> object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax_ids/\{id\} *)
  val getTaxIdsId : id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (tax_id * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>A quote models prices and services for a customer.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\} *)
  val postQuotesQuote : quote:string ->
    [`FormUrlEncoded of t_9c06359ad3] option
    -> ([`CH_OK of (quote * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the quote with the given ID.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\} *)
  val getQuotesQuote : quote:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (quote * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/credit_notes/\{id\}/void *)
  val postCreditNotesIdVoid : id:string ->
    [`FormUrlEncoded of t_3bb839257d] option
    -> ([`CH_OK of (credit_note * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>\[Deprecated\] Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow. 
      This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to approve an authorization</a>.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/issuing/authorizations/\{authorization\}/approve *)
  val postIssuingAuthorizationsAuthorizationApprove : authorization:string ->
    [`FormUrlEncoded of t_e235b824c0] option
    -> ([
         `CH_OK of
           (issuing_authorization * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a ForwardingRequest object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/forwarding/requests/\{id\} *)
  val getForwardingRequestsId : id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (forwarding_request * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an early fraud warning that has previously been created. </p>
      
      <p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
      
      @param early_fraud_warning early_fraud_warning
      @see "openapi/spec3.json" /v1/radar/early_fraud_warnings/\{early_fraud_warning\} *)
  val getRadarEarlyFraudWarningsEarlyFraudWarning :
    early_fraud_warning:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (radar_early_fraud_warning * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates a test mode created OutboundPayment with tracking details. The OutboundPayment must not be cancelable, and cannot be in the <code>canceled</code> or <code>failed</code> states.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_payments/\{id\} *)
  val postTestHelpersTreasuryOutboundPaymentsId : id:string ->
    [`FormUrlEncoded of t_c381952697] option
    -> ([
         `CH_OK of
           (treasury_outbound_payment * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/subscription_items/\{item\} *)
  val deleteSubscriptionItemsItem : item:string ->
    [`FormUrlEncoded of t_bac8413461] option
    -> ([
         `CH_OK of
           (deleted_subscription_item * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the plan or quantity of an item on a current subscription.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/subscription_items/\{item\} *)
  val postSubscriptionItemsItem : item:string ->
    [`FormUrlEncoded of t_82f4439e13] option
    -> ([
         `CH_OK of
           (subscription_item * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the subscription item with the given ID.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/subscription_items/\{item\} *)
  val getSubscriptionItemsItem : item:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (subscription_item * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>When you create a new refund, you must specify either a Charge or a PaymentIntent object.</p>
      
      <p>This action refunds a previously created charge that’s not refunded yet.
      Funds are refunded to the credit or debit card that’s originally charged.</p>
      
      <p>You can optionally refund only part of a charge.
      You can repeat this until the entire charge is refunded.</p>
      
      <p>After you entirely refund a charge, you can’t refund it again.
      This method raises an error when it’s called on an already-refunded charge,
      or when you attempt to refund more money than is left on a charge.</p>
      
      @param charge The identifier of the charge to refund.
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refund *)
  val postChargesChargeRefund : charge:string ->
    [`FormUrlEncoded of t_6fb1415a2f] option
    -> ([`CH_OK of (charge * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a>.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/issuing/disputes/\{dispute\}/submit *)
  val postIssuingDisputesDisputeSubmit : dispute:string ->
    [`FormUrlEncoded of t_7e671e2ddc] option
    -> ([`CH_OK of (issuing_dispute * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>When you create a new reversal, you must specify a transfer to create it on.</p>
      
      <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>
      
      <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/transfers/\{id\}/reversals *)
  val postTransfersIdReversals : id:string ->
    [`FormUrlEncoded of t_e880d6c9c8] option
    -> ([
         `CH_OK of
           (transfer_reversal * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/transfers/\{id\}/reversals *)
  val getTransfersIdReversals : id:string -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_2e23061d84 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a Country Spec for a given Country code.</p>
      
      @param country country
      @see "openapi/spec3.json" /v1/country_specs/\{country\} *)
  val getCountrySpecsCountry : country:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (country_spec * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/linked_accounts/\{account\}/refresh *)
  val postLinkedAccountsAccountRefresh : account:string ->
    [`FormUrlEncoded of t_7802e54b91] option
    -> ([
         `CH_OK of
           (financial_connections_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>returned</code>.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/test_helpers/issuing/cards/\{card\}/shipping/return *)
  val postTestHelpersIssuingCardsCardShippingReturn : card:string ->
    [`FormUrlEncoded of t_05e3124cdb] option
    -> ([`CH_OK of (issuing_card * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>With <a href="/connect">Connect</a>, you can reject accounts that you have flagged as suspicious.</p>
      
      <p>Only accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/reject *)
  val postAccountsAccountReject : account:string ->
    [`FormUrlEncoded of t_bac46e226d] option
    -> ([`CH_OK of (account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/lines *)
  val getInvoicesInvoiceLines : invoice:string -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_40aa9228af * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an existing Transaction.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/transactions/\{id\} *)
  val getTreasuryTransactionsId : id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (treasury_transaction * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Capture a test-mode authorization.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations/\{authorization\}/capture *)
  val postTestHelpersIssuingAuthorizationsAuthorizationCapture :
    authorization:string -> [`FormUrlEncoded of t_4113a1f78c] option
    -> ([
         `CH_OK of
           (issuing_authorization * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Reverses a payout by debiting the destination bank account. At this time, you can only reverse payouts for connected accounts to US bank accounts. If the payout is manual and in the <code>pending</code> status, use <code>/v1/payouts/:id/cancel</code> instead.</p>
      
      <p>By requesting a reversal through <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account authorizes the debit on the bank account and that no other authorization is required.</p>
      
      @param payout payout
      @see "openapi/spec3.json" /v1/payouts/\{payout\}/reverse *)
  val postPayoutsPayoutReverse : payout:string ->
    [`FormUrlEncoded of t_8eb20ab6f4] option
    -> ([`CH_OK of (payout * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Removes the currently applied discount on a subscription.</p>
      
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription_exposed_id\}/discount *)
  val deleteSubscriptionsSubscriptionExposedIdDiscount :
    subscription_exposed_id:string -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (deleted_discount * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new person.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons *)
  val postAccountsAccountPersons : account:string ->
    [`FormUrlEncoded of t_8dfd49ec14] option
    -> ([`CH_OK of (person * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons *)
  val getAccountsAccountPersons : account:string -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?relationship:t_52a890434c ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_adf6bacbbd * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Cancels the quote.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/cancel *)
  val postQuotesQuoteCancel : quote:string ->
    [`FormUrlEncoded of t_4b0daf9ed9] option
    -> ([`CH_OK of (quote * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates an existing tax rate.</p>
      
      @param tax_rate tax_rate
      @see "openapi/spec3.json" /v1/tax_rates/\{tax_rate\} *)
  val postTaxRatesTaxRate : tax_rate:string ->
    [`FormUrlEncoded of t_bd0ab56125] option
    -> ([`CH_OK of (tax_rate * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a tax rate with the given ID</p>
      
      @param tax_rate tax_rate
      @see "openapi/spec3.json" /v1/tax_rates/\{tax_rate\} *)
  val getTaxRatesTaxRate : tax_rate:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (tax_rate * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>
      
      @param source source
      @see "openapi/spec3.json" /v1/sources/\{source\} *)
  val postSourcesSource : source:string ->
    [`FormUrlEncoded of t_8b8321d428] option
    -> ([`CH_OK of (source * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>
      
      @param source source
      @see "openapi/spec3.json" /v1/sources/\{source\} *)
  val getSourcesSource : source:string -> ?client_secret:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (source * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Unsubscribes from periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/unsubscribe *)
  val postFinancialConnectionsAccountsAccountUnsubscribe : account:string ->
    [`FormUrlEncoded of t_957eb39b31] option
    -> ([
         `CH_OK of
           (financial_connections_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Verifies microdeposits on a PaymentIntent object.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/verify_microdeposits *)
  val postPaymentIntentsIntentVerifyMicrodeposits : intent:string ->
    [`FormUrlEncoded of t_50eac85280] option
    -> ([`CH_OK of (payment_intent * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>An OutboundTransfer can be canceled if the funds have not yet been paid out.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/treasury/outbound_transfers/\{outbound_transfer\}/cancel *)
  val postTreasuryOutboundTransfersOutboundTransferCancel :
    outbound_transfer:string -> [`FormUrlEncoded of t_e0e7761ff7] option
    -> ([
         `CH_OK of
           (treasury_outbound_transfer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Transitions a test mode created OutboundPayment to the <code>posted</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_payments/\{id\}/post *)
  val postTestHelpersTreasuryOutboundPaymentsIdPost : id:string ->
    [`FormUrlEncoded of t_9853c54b9d] option
    -> ([
         `CH_OK of
           (treasury_outbound_payment * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>
      
      <p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>
      
      <p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>
      
      <p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
      
      @param subscription_item subscription_item
      @see "openapi/spec3.json" /v1/subscription_items/\{subscription_item\}/usage_records *)
  val postSubscriptionItemsSubscriptionItemUsageRecords :
    subscription_item:string -> [`FormUrlEncoded of t_19ad43629e] option
    -> ([`CH_OK of (usage_record * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves an existing VerificationReport</p>
      
      @param report report
      @see "openapi/spec3.json" /v1/identity/verification_reports/\{report\} *)
  val getIdentityVerificationReportsReport : report:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (identity_verification_report * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Some payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren’t satisfied when the domain was created, the payment method will be inactive on the domain.
      The payment method doesn’t appear in Elements for this domain until it is active.</p>
      
      <p>To activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.</p>
      
      <p>Related guides: <a href="/docs/payments/payment-methods/pmd-registration">Payment method domains</a>.</p>
      
      @param payment_method_domain payment_method_domain
      @see "openapi/spec3.json" /v1/payment_method_domains/\{payment_method_domain\}/validate *)
  val postPaymentMethodDomainsPaymentMethodDomainValidate :
    payment_method_domain:string -> [`FormUrlEncoded of t_71e47b1b4e] option
    -> ([
         `CH_OK of
           (payment_method_domain * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Cancels the current reader action.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/cancel_action *)
  val postTerminalReadersReaderCancelAction : reader:string ->
    [`FormUrlEncoded of t_0ca647b86f] option
    -> ([`CH_OK of (terminal_reader * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/radar/value_list_items/\{item\} *)
  val deleteRadarValueListItemsItem : item:string ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (deleted_radar_value_list_item * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a <code>ValueListItem</code> object.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/radar/value_list_items/\{item\} *)
  val getRadarValueListItemsItem : item:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (radar_value_list_item * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{id\}/refund *)
  val postApplicationFeesIdRefund : id:string ->
    [`FormUrlEncoded of t_fbe77ceb11] option
    -> ([`CH_OK of (application_fee * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates a card personalization object.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/issuing/personalization_designs/\{personalization_design\} *)
  val postIssuingPersonalizationDesignsPersonalizationDesign :
    personalization_design:string -> [`FormUrlEncoded of t_51d6e29ed8] option
    -> ([
         `CH_OK of
           (issuing_personalization_design * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a personalization design object.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/issuing/personalization_designs/\{personalization_design\} *)
  val getIssuingPersonalizationDesignsPersonalizationDesign :
    personalization_design:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (issuing_personalization_design * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
      
      <p>If the card’s owner has no default card, then the new card will become the default.
      However, if the owner already has a default, then it will not change.
      To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards *)
  val postCustomersCustomerCards : customer:string ->
    [`FormUrlEncoded of t_03bcd47aa2] option
    -> ([`CH_OK of (payment_source * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>You can see a list of the cards belonging to a customer.
      Note that the 10 most recent sources are always available on the <code>Customer</code> object.
      If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards *)
  val getCustomersCustomerCards : customer:string -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_935be5d592 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with <code>type=good</code> is only possible if it has no SKUs associated with it.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/products/\{id\} *)
  val deleteProductsId : id:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (deleted_product * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/products/\{id\} *)
  val postProductsId : id:string -> [`FormUrlEncoded of t_209218c363] option
    -> ([`CH_OK of (product * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/products/\{id\} *)
  val getProductsId : id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (product * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>active</code>.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/test_helpers/issuing/personalization_designs/\{personalization_design\}/activate *)
  val postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate :
    personalization_design:string -> [`FormUrlEncoded of t_7cbe5b26ac] option
    -> ([
         `CH_OK of
           (issuing_personalization_design * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>You can cancel a SetupIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>
      
      <p>After you cancel it, setup is abandoned and any operations on the SetupIntent fail with an error.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\}/cancel *)
  val postSetupIntentsIntentCancel : intent:string ->
    [`FormUrlEncoded of t_05b947f5ee] option
    -> ([`CH_OK of (setup_intent * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p>
      
      @param coupon coupon
      @see "openapi/spec3.json" /v1/coupons/\{coupon\} *)
  val deleteCouponsCoupon : coupon:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (deleted_coupon * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p>
      
      @param coupon coupon
      @see "openapi/spec3.json" /v1/coupons/\{coupon\} *)
  val postCouponsCoupon : coupon:string ->
    [`FormUrlEncoded of t_87e7e7fa42] option
    -> ([`CH_OK of (coupon * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the coupon with the given ID.</p>
      
      @param coupon coupon
      @see "openapi/spec3.json" /v1/coupons/\{coupon\} *)
  val getCouponsCoupon : coupon:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (coupon * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/mark_uncollectible *)
  val postInvoicesInvoiceMarkUncollectible : invoice:string ->
    [`FormUrlEncoded of t_1e3fe8c357] option
    -> ([`CH_OK of (invoice * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/received_debits/\{id\} *)
  val getTreasuryReceivedDebitsId : id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (treasury_received_debit * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Sets reader display to show cart details.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/set_reader_display *)
  val postTerminalReadersReaderSetReaderDisplay : reader:string ->
    [`FormUrlEncoded of t_8d65e25082] option
    -> ([`CH_OK of (terminal_reader * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact
      the VerificationSession and all objects related to it, including VerificationReports, Events,
      request logs, etc.</p>
      
      <p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code>
      <a href="/docs/identity/how-sessions-work">status</a>. Redacting a VerificationSession in <code>requires_action</code>
      state will automatically cancel it.</p>
      
      <p>The redaction process may take up to four days. When the redaction process is in progress, the
      VerificationSession’s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is
      finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event
      will be emitted.</p>
      
      <p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the
      fields that contain personal data will be replaced by the string <code>\[redacted\]</code> or a similar
      placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or
      used for any purpose.</p>
      
      <p><a href="/docs/identity/verification-sessions#redact">Learn more</a>.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/identity/verification_sessions/\{session\}/redact *)
  val postIdentityVerificationSessionsSessionRedact : session:string ->
    [`FormUrlEncoded of t_247ea586be] option
    -> ([
         `CH_OK of
           (identity_verification_session * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the refund that you specify by setting the values of the passed parameters. Any parameters that you don’t provide remain unchanged.</p>
      
      <p>This request only accepts <code>metadata</code> as an argument.</p>
      
      @param refund refund
      @see "openapi/spec3.json" /v1/refunds/\{refund\} *)
  val postRefundsRefund : refund:string ->
    [`FormUrlEncoded of t_000c001e81] option
    -> ([`CH_OK of (refund * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an existing refund.</p>
      
      @param refund refund
      @see "openapi/spec3.json" /v1/refunds/\{refund\} *)
  val getRefundsRefund : refund:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (refund * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/checkout/sessions/\{session\}/line_items *)
  val getCheckoutSessionsSessionLineItems : session:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_b5bae8d183 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Transitions a test mode created OutboundTransfer to the <code>posted</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_transfers/\{outbound_transfer\}/post *)
  val postTestHelpersTreasuryOutboundTransfersOutboundTransferPost :
    outbound_transfer:string -> [`FormUrlEncoded of t_2057b87ef0] option
    -> ([
         `CH_OK of
           (treasury_outbound_transfer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>
      
      @param schedule schedule
      @see "openapi/spec3.json" /v1/subscription_schedules/\{schedule\}/release *)
  val postSubscriptionSchedulesScheduleRelease : schedule:string ->
    [`FormUrlEncoded of t_9438e1e97d] option
    -> ([
         `CH_OK of
           (subscription_schedule * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param credit_note credit_note
      @see "openapi/spec3.json" /v1/credit_notes/\{credit_note\}/lines *)
  val getCreditNotesCreditNoteLines : credit_note:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_17654892a5 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.</p>
      
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/payment_methods/\{payment_method\}/detach *)
  val postPaymentMethodsPaymentMethodDetach : payment_method:string ->
    [`FormUrlEncoded of t_189e25f024] option
    -> ([`CH_OK of (payment_method * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a DebitReversal object.</p>
      
      @param debit_reversal debit_reversal
      @see "openapi/spec3.json" /v1/treasury/debit_reversals/\{debit_reversal\} *)
  val getTreasuryDebitReversalsDebitReversal : debit_reversal:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (treasury_debit_reversal * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax_codes/\{id\} *)
  val getTaxCodesId : id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (tax_code * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/disconnect *)
  val postFinancialConnectionsAccountsAccountDisconnect : account:string ->
    [`FormUrlEncoded of t_190bfbf094] option
    -> ([
         `CH_OK of
           (financial_connections_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.</p>
      
      @param promotion_code promotion_code
      @see "openapi/spec3.json" /v1/promotion_codes/\{promotion_code\} *)
  val postPromotionCodesPromotionCode : promotion_code:string ->
    [`FormUrlEncoded of t_8f07f499ed] option
    -> ([`CH_OK of (promotion_code * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing <code>code</code> use <a href="/docs/api/promotion_codes/list">list</a> with the desired <code>code</code>.</p>
      
      @param promotion_code promotion_code
      @see "openapi/spec3.json" /v1/promotion_codes/\{promotion_code\} *)
  val getPromotionCodesPromotionCode : promotion_code:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (promotion_code * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates an existing shipping rate object.</p>
      
      @param shipping_rate_token shipping_rate_token
      @see "openapi/spec3.json" /v1/shipping_rates/\{shipping_rate_token\} *)
  val postShippingRatesShippingRateToken : shipping_rate_token:string ->
    [`FormUrlEncoded of t_f0785efe33] option
    -> ([`CH_OK of (shipping_rate * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns the shipping rate object with the given ID.</p>
      
      @param shipping_rate_token shipping_rate_token
      @see "openapi/spec3.json" /v1/shipping_rates/\{shipping_rate_token\} *)
  val getShippingRatesShippingRateToken : shipping_rate_token:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (shipping_rate * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Reactivates a billing meter</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\}/reactivate *)
  val postBillingMetersIdReactivate : id:string ->
    [`FormUrlEncoded of t_e4fa4d38ff] option
    -> ([`CH_OK of (billing_meter * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>You can cancel a PaymentIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code> or, <a href="/docs/payments/intents">in rare cases</a>, <code>processing</code>. </p>
      
      <p>After it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a <code>status</code> of <code>requires_capture</code>, the remaining <code>amount_capturable</code> is automatically refunded. </p>
      
      <p>You can’t cancel the PaymentIntent for a Checkout Session. <a href="/docs/api/checkout/sessions/expire">Expire the Checkout Session</a> instead.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/cancel *)
  val postPaymentIntentsIntentCancel : intent:string ->
    [`FormUrlEncoded of t_87beadc647] option
    -> ([`CH_OK of (payment_intent * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/outbound_payments/\{id\} *)
  val getTreasuryOutboundPaymentsId : id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (treasury_outbound_payment * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of a Financial Connections <code>Transaction</code></p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/financial_connections/transactions/\{transaction\} *)
  val getFinancialConnectionsTransactionsTransaction : transaction:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (financial_connections_transaction * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Download the PDF for a finalized quote. Explanation for special handling can be found <a href="https://docs.corp.stripe.com/quotes/overview#quote_pdf">here</a></p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/pdf *)
  val getQuotesQuotePdf : quote:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (int * string * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/dispute *)
  val postChargesChargeDispute : charge:string ->
    [`FormUrlEncoded of t_4636c13369] option
    -> ([`CH_OK of (dispute * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieve a dispute for a specified charge.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/dispute *)
  val getChargesChargeDispute : charge:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (dispute * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Marks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the <code>succeeded</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/inbound_transfers/\{id\}/return *)
  val postTestHelpersTreasuryInboundTransfersIdReturn : id:string ->
    [`FormUrlEncoded of t_c1768f47d2] option
    -> ([
         `CH_OK of
           (treasury_inbound_transfer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves an existing ConfirmationToken object</p>
      
      @param confirmation_token confirmation_token
      @see "openapi/spec3.json" /v1/confirmation_tokens/\{confirmation_token\} *)
  val getConfirmationTokensConfirmationToken : confirmation_token:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (confirmation_token * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Verify a given source.</p>
      
      @param source source
      @see "openapi/spec3.json" /v1/sources/\{source\}/verify *)
  val postSourcesSourceVerify : source:string ->
    [`FormUrlEncoded of t_8aa8f331cd] option
    -> ([`CH_OK of (source * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Cancels a top-up. Only pending top-ups can be canceled.</p>
      
      @param topup topup
      @see "openapi/spec3.json" /v1/topups/\{topup\}/cancel *)
  val postTopupsTopupCancel : topup:string ->
    [`FormUrlEncoded of t_4c666f30a4] option
    -> ([`CH_OK of (topup * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new subscription on an existing customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions *)
  val postCustomersCustomerSubscriptions : customer:string ->
    [`FormUrlEncoded of t_02eb6abcb0] option
    -> ([`CH_OK of (subscription * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions *)
  val getCustomersCustomerSubscriptions : customer:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_725e7e390f * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/linked_accounts/\{account\}/disconnect *)
  val postLinkedAccountsAccountDisconnect : account:string ->
    [`FormUrlEncoded of t_004e372a90] option
    -> ([
         `CH_OK of
           (financial_connections_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>delivered</code>.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/test_helpers/issuing/cards/\{card\}/shipping/deliver *)
  val postTestHelpersIssuingCardsCardShippingDeliver : card:string ->
    [`FormUrlEncoded of t_d3fb355477] option
    -> ([`CH_OK of (issuing_card * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>
      
      @param review review
      @see "openapi/spec3.json" /v1/reviews/\{review\}/approve *)
  val postReviewsReviewApprove : review:string ->
    [`FormUrlEncoded of t_2fd5762094] option
    -> ([`CH_OK of (review * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Delete an apple pay domain.</p>
      
      @param domain domain
      @see "openapi/spec3.json" /v1/apple_pay/domains/\{domain\} *)
  val deleteApplePayDomainsDomain : domain:string ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (deleted_apple_pay_domain * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieve an apple pay domain.</p>
      
      @param domain domain
      @see "openapi/spec3.json" /v1/apple_pay/domains/\{domain\} *)
  val getApplePayDomainsDomain : domain:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (apple_pay_domain * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a href="#void_invoice">voided</a>.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\} *)
  val deleteInvoicesInvoice : invoice:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (deleted_invoice * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>,
      monetary values, as well as <code>collection_method</code>, become uneditable.</p>
      
      <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
      sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass
      <code>auto_advance=false</code>.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\} *)
  val postInvoicesInvoice : invoice:string ->
    [`FormUrlEncoded of t_9bd5268fc2] option
    -> ([`CH_OK of (invoice * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the invoice with the given ID.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\} *)
  val getInvoicesInvoice : invoice:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (invoice * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Expire a test-mode Authorization.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations/\{authorization\}/expire *)
  val postTestHelpersIssuingAuthorizationsAuthorizationExpire :
    authorization:string -> [`FormUrlEncoded of t_e813eb08ba] option
    -> ([
         `CH_OK of
           (issuing_authorization * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of a Financial Connections <code>Session</code></p>
      
      @param session session
      @see "openapi/spec3.json" /v1/link_account_sessions/\{session\} *)
  val getLinkAccountSessionsSession : session:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (financial_connections_session * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of a Report Type. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
      
      @param report_type report_type
      @see "openapi/spec3.json" /v1/reporting/report_types/\{report_type\} *)
  val getReportingReportTypesReportType : report_type:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (reporting_report_type * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Invalidates a short-lived API key for a given resource.</p>
      
      @param key key
      @see "openapi/spec3.json" /v1/ephemeral_keys/\{key\} *)
  val deleteEphemeralKeysKey : key:string ->
    [`FormUrlEncoded of t_9c3ca26028] option
    -> ([`CH_OK of (ephemeral_key * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the token with the given ID.</p>
      
      @param token token
      @see "openapi/spec3.json" /v1/tokens/\{token\} *)
  val getTokensToken : token:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (token * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Initiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become <code>active</code>, and if payment fails the subscription will be <code>past_due</code>. The resumption invoice will void automatically if not paid by the expiration date.</p>
      
      @param subscription subscription
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription\}/resume *)
  val postSubscriptionsSubscriptionResume : subscription:string ->
    [`FormUrlEncoded of t_ad795eca9c] option
    -> ([`CH_OK of (subscription * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an existing InboundTransfer.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/inbound_transfers/\{id\} *)
  val getTreasuryInboundTransfersId : id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (treasury_inbound_transfer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param cardholder cardholder
      @see "openapi/spec3.json" /v1/issuing/cardholders/\{cardholder\} *)
  val postIssuingCardholdersCardholder : cardholder:string ->
    [`FormUrlEncoded of t_5485d2e44c] option
    -> ([
         `CH_OK of
           (issuing_cardholder * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves an Issuing <code>Cardholder</code> object.</p>
      
      @param cardholder cardholder
      @see "openapi/spec3.json" /v1/issuing/cardholders/\{cardholder\} *)
  val getIssuingCardholdersCardholder : cardholder:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (issuing_cardholder * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>When retrieving a quote, there is an includable <a href="https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items"><strong>computed.upfront.line_items</strong></a> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/computed_upfront_line_items *)
  val getQuotesQuoteComputedUpfrontLineItems : quote:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_61b163891b * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of a Climate product with the given ID.</p>
      
      @param product product
      @see "openapi/spec3.json" /v1/climate/products/\{product\} *)
  val getClimateProductsProduct : product:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (climate_product * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Deletes a test clock.</p>
      
      @param test_clock test_clock
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks/\{test_clock\} *)
  val deleteTestHelpersTestClocksTestClock : test_clock:string ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (deleted_test_helpers_test_clock * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a test clock.</p>
      
      @param test_clock test_clock
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks/\{test_clock\} *)
  val getTestHelpersTestClocksTestClock : test_clock:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (test_helpers_test_clock * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
      
      <p>If the card’s owner has no default card, then the new card will become the default.
      However, if the owner already has a default, then it will not change.
      To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources *)
  val postCustomersCustomerSources : customer:string ->
    [`FormUrlEncoded of t_25713982da] option
    -> ([`CH_OK of (payment_source * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>List sources for a specified customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources *)
  val getCustomersCustomerSources : customer:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?object_:string -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_08def66363 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Initiates a payment flow on a Reader.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/process_payment_intent *)
  val postTerminalReadersReaderProcessPaymentIntent : reader:string ->
    [`FormUrlEncoded of t_bcad42072c] option
    -> ([`CH_OK of (terminal_reader * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Transitions a test mode created OutboundPayment to the <code>returned</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_payments/\{id\}/return *)
  val postTestHelpersTreasuryOutboundPaymentsIdReturn : id:string ->
    [`FormUrlEncoded of t_5e31eb0dbe] option
    -> ([
         `CH_OK of
           (treasury_outbound_payment * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a single-use login link for a connected account to access the Express Dashboard.</p>
      
      <p><strong>You can only create login links for accounts that use the <a href="/connect/express-dashboard">Express Dashboard</a> and are connected to your platform</strong>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/login_links *)
  val postAccountsAccountLoginLinks : account:string ->
    [`FormUrlEncoded of t_5afb636173] option
    -> ([`CH_OK of (login_link * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a Tax <code>Transaction</code> object.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/tax/transactions/\{transaction\} *)
  val getTaxTransactionsTransaction : transaction:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (tax_transaction * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an existing file object. After you supply a unique file ID, Stripe returns the corresponding file object. Learn how to <a href="/docs/file-upload#download-file-contents">access file contents</a>.</p>
      
      @param file file
      @see "openapi/spec3.json" /v1/files/\{file\} *)
  val getFilesFile : file:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (file * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a product_feature, which represents a feature attachment to a product</p>
      
      @param product product
      @see "openapi/spec3.json" /v1/products/\{product\}/features *)
  val postProductsProductFeatures : product:string ->
    [`FormUrlEncoded of t_a8fa6f704e] option
    -> ([`CH_OK of (product_feature * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieve a list of features for a product</p>
      
      @param product product
      @see "openapi/spec3.json" /v1/products/\{product\}/features *)
  val getProductsProductFeatures : product:string -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_7db760c7aa * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>inactive</code>.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/test_helpers/issuing/personalization_designs/\{personalization_design\}/deactivate *)
  val postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate :
    personalization_design:string -> [`FormUrlEncoded of t_e40a5805ad] option
    -> ([
         `CH_OK of
           (issuing_personalization_design * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Confirm that your customer intends to set up the current or
      provided payment method. For example, you would confirm a SetupIntent
      when a customer hits the “Save” button on a payment method management
      page on your website.</p>
      
      <p>If the selected payment method does not require any additional
      steps from the customer, the SetupIntent will transition to the
      <code>succeeded</code> status.</p>
      
      <p>Otherwise, it will transition to the <code>requires_action</code> status and
      suggest additional actions via <code>next_action</code>. If setup fails,
      the SetupIntent will transition to the
      <code>requires_payment_method</code> status or the <code>canceled</code> status if the
      confirmation limit is reached.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\}/confirm *)
  val postSetupIntentsIntentConfirm : intent:string ->
    [`FormUrlEncoded of t_3fb2b8754f] option
    -> ([`CH_OK of (setup_intent * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates a billing meter</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\} *)
  val postBillingMetersId : id:string ->
    [`FormUrlEncoded of t_e54ad7b1b1] option
    -> ([`CH_OK of (billing_meter * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a billing meter given an ID</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\} *)
  val getBillingMetersId : id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (billing_meter * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/pay *)
  val postInvoicesInvoicePay : invoice:string ->
    [`FormUrlEncoded of t_ea602f43e3] option
    -> ([`CH_OK of (invoice * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Attempts to update the specified Issuing <code>Token</code> object to the status specified.</p>
      
      @param token token
      @see "openapi/spec3.json" /v1/issuing/tokens/\{token\} *)
  val postIssuingTokensToken : token:string ->
    [`FormUrlEncoded of t_a2a369a5f3] option
    -> ([`CH_OK of (issuing_token * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves an Issuing <code>Token</code> object.</p>
      
      @param token token
      @see "openapi/spec3.json" /v1/issuing/tokens/\{token\} *)
  val getIssuingTokensToken : token:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (issuing_token * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Cancels a refund with a status of <code>requires_action</code>.</p>
      
      <p>You can’t cancel refunds in other states. Only refunds for payment methods that require customer action can enter the <code>requires_action</code> state.</p>
      
      @param refund refund
      @see "openapi/spec3.json" /v1/refunds/\{refund\}/cancel *)
  val postRefundsRefundCancel : refund:string ->
    [`FormUrlEncoded of t_c2338af3d2] option
    -> ([`CH_OK of (refund * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates an existing credit note.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/credit_notes/\{id\} *)
  val postCreditNotesId : id:string ->
    [`FormUrlEncoded of t_ca6b3dc196] option
    -> ([`CH_OK of (credit_note * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the credit note object with the given identifier.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/credit_notes/\{id\} *)
  val getCreditNotesId : id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (credit_note * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Transitions a test mode created OutboundTransfer to the <code>returned</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_transfers/\{outbound_transfer\}/return *)
  val postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn :
    outbound_transfer:string -> [`FormUrlEncoded of t_3eca492c14] option
    -> ([
         `CH_OK of
           (treasury_outbound_transfer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieve an active entitlement</p>
      
      @param id The ID of the entitlement.
      @see "openapi/spec3.json" /v1/entitlements/active_entitlements/\{id\} *)
  val getEntitlementsActiveEntitlementsId : id:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (entitlements_active_entitlement * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/capabilities *)
  val getAccountsAccountCapabilities : account:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_05eeb89580 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Lists all owners for a given <code>Account</code></p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/owners *)
  val getFinancialConnectionsAccountsAccountOwners : account:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ownership:string -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_cb70d0eeef * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>
      
      <p>Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.</p>
      
      <p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/capture *)
  val postPaymentIntentsIntentCapture : intent:string ->
    [`FormUrlEncoded of t_0221580d23] option
    -> ([`CH_OK of (payment_intent * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the balance transaction with the given ID.</p>
      
      <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/balance_transactions/\{id\} *)
  val getBalanceTransactionsId : id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (balance_transaction * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Refund a test-mode Transaction.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/test_helpers/issuing/transactions/\{transaction\}/refund *)
  val postTestHelpersIssuingTransactionsTransactionRefund :
    transaction:string -> [`FormUrlEncoded of t_fe2456625b] option
    -> ([
         `CH_OK of
           (issuing_transaction * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Removes the currently applied discount on a customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/discount *)
  val deleteCustomersCustomerDiscount : customer:string ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (deleted_discount * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/discount *)
  val getCustomersCustomerDiscount : customer:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (discount * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/issuing/authorizations/\{authorization\} *)
  val postIssuingAuthorizationsAuthorization : authorization:string ->
    [`FormUrlEncoded of t_335ed61920] option
    -> ([
         `CH_OK of
           (issuing_authorization * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves an Issuing <code>Authorization</code> object.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/issuing/authorizations/\{authorization\} *)
  val getIssuingAuthorizationsAuthorization : authorization:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (issuing_authorization * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Cancel an OutboundPayment.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/outbound_payments/\{id\}/cancel *)
  val postTreasuryOutboundPaymentsIdCancel : id:string ->
    [`FormUrlEncoded of t_fdc5092fe1] option
    -> ([
         `CH_OK of
           (treasury_outbound_payment * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing in an empty string.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/issuing/disputes/\{dispute\} *)
  val postIssuingDisputesDispute : dispute:string ->
    [`FormUrlEncoded of t_891f2f5132] option
    -> ([`CH_OK of (issuing_dispute * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves an Issuing <code>Dispute</code> object.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/issuing/disputes/\{dispute\} *)
  val getIssuingDisputesDispute : dispute:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (issuing_dispute * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Deletes a <code>Location</code> object.</p>
      
      @param location location
      @see "openapi/spec3.json" /v1/terminal/locations/\{location\} *)
  val deleteTerminalLocationsLocation : location:string ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (deleted_terminal_location * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param location location
      @see "openapi/spec3.json" /v1/terminal/locations/\{location\} *)
  val postTerminalLocationsLocation : location:string ->
    [`FormUrlEncoded of t_9854b54c89] option
    -> ([`CH_OK of (t_5cf0bd6b40 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a <code>Location</code> object.</p>
      
      @param location location
      @see "openapi/spec3.json" /v1/terminal/locations/\{location\} *)
  val getTerminalLocationsLocation : location:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_9ea5160203 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Transitions a test mode created InboundTransfer to the <code>succeeded</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/inbound_transfers/\{id\}/succeed *)
  val postTestHelpersTreasuryInboundTransfersIdSucceed : id:string ->
    [`FormUrlEncoded of t_bbe8140a62] option
    -> ([
         `CH_OK of
           (treasury_inbound_transfer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/dispute/close *)
  val postChargesChargeDisputeClose : charge:string ->
    [`FormUrlEncoded of t_77d060fc3e] option
    -> ([`CH_OK of (dispute * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Update payment method configuration</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/payment_method_configurations/\{configuration\} *)
  val postPaymentMethodConfigurationsConfiguration : configuration:string ->
    [`FormUrlEncoded of t_9c715047af] option
    -> ([
         `CH_OK of
           (payment_method_configuration * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieve payment method configuration</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/payment_method_configurations/\{configuration\} *)
  val getPaymentMethodConfigurationsConfiguration : configuration:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (payment_method_configuration * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates an existing Tax <code>Registration</code> object.</p>
      
      <p>A registration cannot be deleted after it has been created. If you wish to end a registration you may do so by setting <code>expires_at</code>.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax/registrations/\{id\} *)
  val postTaxRegistrationsId : id:string ->
    [`FormUrlEncoded of t_25582b7d89] option
    -> ([
         `CH_OK of
           (tax_registration * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a Tax <code>Registration</code> object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax/registrations/\{id\} *)
  val getTaxRegistrationsId : id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (tax_registration * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the exchange rates from the given currency to every supported currency.</p>
      
      @param rate_id rate_id
      @see "openapi/spec3.json" /v1/exchange_rates/\{rate_id\} *)
  val getExchangeRatesRateId : rate_id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (exchange_rate * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Lists all owners for a given <code>Account</code></p>
      
      @param account account
      @see "openapi/spec3.json" /v1/linked_accounts/\{account\}/owners *)
  val getLinkedAccountsAccountOwners : account:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ownership:string -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_606c2d05a7 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Refunds an application fee that has previously been collected but not yet refunded.
      Funds will be refunded to the Stripe account from which the fee was originally collected.</p>
      
      <p>You can optionally refund only part of an application fee.
      You can do so multiple times, until the entire fee has been refunded.</p>
      
      <p>Once entirely refunded, an application fee can’t be refunded again.
      This method will raise an error when called on an already-refunded application fee,
      or when trying to refund more money than is left on an application fee.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{id\}/refunds *)
  val postApplicationFeesIdRefunds : id:string ->
    [`FormUrlEncoded of t_7cb28563a7] option
    -> ([`CH_OK of (fee_refund * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{id\}/refunds *)
  val getApplicationFeesIdRefunds : id:string -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_b9e0aa198c * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>failure</code>.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/test_helpers/issuing/cards/\{card\}/shipping/fail *)
  val postTestHelpersIssuingCardsCardShippingFail : card:string ->
    [`FormUrlEncoded of t_a72563115a] option
    -> ([`CH_OK of (issuing_card * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.</p>
      
      @param price price
      @see "openapi/spec3.json" /v1/prices/\{price\} *)
  val postPricesPrice : price:string ->
    [`FormUrlEncoded of t_a7fbbe89bf] option
    -> ([`CH_OK of (price * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the price with the given ID.</p>
      
      @param price price
      @see "openapi/spec3.json" /v1/prices/\{price\} *)
  val getPricesPrice : price:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (price * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
      
      <p>If the card’s owner has no default card, then the new card will become the default.
      However, if the owner already has a default, then it will not change.
      To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts *)
  val postCustomersCustomerBankAccounts : customer:string ->
    [`FormUrlEncoded of t_c5d1d32dfc] option
    -> ([`CH_OK of (payment_source * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts *)
  val getCustomersCustomerBankAccounts : customer:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_f21a0fa679 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/finalize *)
  val postInvoicesInvoiceFinalize : invoice:string ->
    [`FormUrlEncoded of t_a6714eec9b] option
    -> ([`CH_OK of (invoice * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/issuing/transactions/\{transaction\} *)
  val postIssuingTransactionsTransaction : transaction:string ->
    [`FormUrlEncoded of t_6dc541f3f4] option
    -> ([
         `CH_OK of
           (issuing_transaction * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves an Issuing <code>Transaction</code> object.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/issuing/transactions/\{transaction\} *)
  val getIssuingTransactionsTransaction : transaction:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (issuing_transaction * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an existing Report Run.</p>
      
      @param report_run report_run
      @see "openapi/spec3.json" /v1/reporting/report_runs/\{report_run\} *)
  val getReportingReportRunsReportRun : report_run:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (reporting_report_run * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Update a feature’s metadata or permanently deactivate it.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/entitlements/features/\{id\} *)
  val postEntitlementsFeaturesId : id:string ->
    [`FormUrlEncoded of t_1b0e22ccbc] option
    -> ([
         `CH_OK of
           (entitlements_feature * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a feature</p>
      
      @param id The ID of the feature.
      @see "openapi/spec3.json" /v1/entitlements/features/\{id\} *)
  val getEntitlementsFeaturesId : id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (entitlements_feature * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>You can cancel a previously created payout if its status is <code>pending</code>. Stripe refunds the funds to your available balance. You can’t cancel automatic Stripe payouts.</p>
      
      @param payout payout
      @see "openapi/spec3.json" /v1/payouts/\{payout\}/cancel *)
  val postPayoutsPayoutCancel : payout:string ->
    [`FormUrlEncoded of t_664ed968a8] option
    -> ([`CH_OK of (payout * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p>
      
      <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
      
      <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
      
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription_exposed_id\} *)
  val deleteSubscriptionsSubscriptionExposedId :
    subscription_exposed_id:string ->
    [`FormUrlEncoded of t_762524c8dc] option
    -> ([`CH_OK of (subscription * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates an existing subscription to match the specified parameters.
      When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes.
      To preview how the proration is calculated, use the <a href="/docs/api/invoices/upcoming">upcoming invoice</a> endpoint.</p>
      
      <p>By default, we prorate subscription changes. For example, if a customer signs up on May 1 for a <currency>100</currency> price, they’ll be billed <currency>100</currency> immediately. If on May 15 they switch to a <currency>200</currency> price, then on June 1 they’ll be billed <currency>250</currency> (<currency>200</currency> for a renewal of her subscription, plus a <currency>50</currency> prorating adjustment for half of the previous month’s <currency>100</currency> difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.</p>
      
      <p>Switching prices does not normally change the billing date or generate an immediate charge unless:</p>
      
      <ul>
      <li>The billing interval is changed (for example, from monthly to yearly).</li>
      <li>The subscription moves from free to paid, or paid to free.</li>
      <li>A trial starts or ends.</li>
      </ul>
      
      <p>In these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date.</p>
      
      <p>If you want to charge for an upgrade immediately, pass <code>proration_behavior</code> as <code>always_invoice</code> to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass <code>create_prorations</code>, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually <a href="/docs/api/invoices/create">invoice the customer</a>.</p>
      
      <p>If you don’t want to prorate, set the <code>proration_behavior</code> option to <code>none</code>. With this option, the customer is billed <currency>100</currency> on May 1 and <currency>200</currency> on June 1. Similarly, if you set <code>proration_behavior</code> to <code>none</code> when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.</p>
      
      <p>Updating the quantity on a subscription many times in an hour may result in <a href="/docs/rate-limits">rate limiting</a>. If you need to bill for a frequently changing quantity, consider integrating <a href="/docs/billing/subscriptions/usage-based">usage-based billing</a> instead.</p>
      
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription_exposed_id\} *)
  val postSubscriptionsSubscriptionExposedId :
    subscription_exposed_id:string ->
    [`FormUrlEncoded of t_90d08b81d8] option
    -> ([`CH_OK of (subscription * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the subscription with the given ID.</p>
      
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription_exposed_id\} *)
  val getSubscriptionsSubscriptionExposedId :
    subscription_exposed_id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (subscription * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Create an external account for a given account.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts *)
  val postAccountsAccountExternalAccounts : account:string ->
    [`FormUrlEncoded of t_cdbc0083b6] option
    -> ([
         `CH_OK of
           (external_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>List external accounts for an account.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts *)
  val getAccountsAccountExternalAccounts : account:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?object_:t_4e604540e7 -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_ed7910ccf0 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the Features associated with a FinancialAccount.</p>
      
      @param financial_account financial_account
      @see "openapi/spec3.json" /v1/treasury/financial_accounts/\{financial_account\}/features *)
  val postTreasuryFinancialAccountsFinancialAccountFeatures :
    financial_account:string -> [`FormUrlEncoded of t_e0e1caabf4] option
    -> ([
         `CH_OK of
           (treasury_financial_account_features * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves Features information associated with the FinancialAccount.</p>
      
      @param financial_account financial_account
      @see "openapi/spec3.json" /v1/treasury/financial_accounts/\{financial_account\}/features *)
  val getTreasuryFinancialAccountsFinancialAccountFeatures :
    financial_account:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (treasury_financial_account_features * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Subscribes to periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/subscribe *)
  val postFinancialConnectionsAccountsAccountSubscribe : account:string ->
    [`FormUrlEncoded of t_5e3733c22b] option
    -> ([
         `CH_OK of
           (financial_connections_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Perform an incremental authorization on an eligible
      <a href="/docs/api/payment_intents/object">PaymentIntent</a>. To be eligible, the
      PaymentIntent’s status must be <code>requires_capture</code> and
      <a href="/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported">incremental_authorization_supported</a>
      must be <code>true</code>.</p>
      
      <p>Incremental authorizations attempt to increase the authorized amount on
      your customer’s card to the new, higher <code>amount</code> provided. Similar to the
      initial authorization, incremental authorizations can be declined. A
      single PaymentIntent can call this endpoint multiple times to further
      increase the authorized amount.</p>
      
      <p>If the incremental authorization succeeds, the PaymentIntent object
      returns with the updated
      <a href="/docs/api/payment_intents/object#payment_intent_object-amount">amount</a>.
      If the incremental authorization fails, a
      <a href="/docs/error-codes#card-declined">card_declined</a> error returns, and no other
      fields on the PaymentIntent or Charge update. The PaymentIntent
      object remains capturable for the previously authorized amount.</p>
      
      <p>Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines.
      After it’s captured, a PaymentIntent can no longer be incremented.</p>
      
      <p>Learn more about <a href="/docs/terminal/features/incremental-authorizations">incremental authorizations</a>.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/increment_authorization *)
  val postPaymentIntentsIntentIncrementAuthorization : intent:string ->
    [`FormUrlEncoded of t_49208ce375] option
    -> ([`CH_OK of (payment_intent * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Cancels a Climate order. You can cancel an order within 30 days of creation. Stripe refunds the
      reservation <code>amount_subtotal</code>, but not the <code>amount_fees</code> for user-triggered cancellations. Frontier
      might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe
      provides 90 days advance notice and refunds the <code>amount_total</code>.</p>
      
      @param order Unique identifier of the order.
      @see "openapi/spec3.json" /v1/climate/orders/\{order\}/cancel *)
  val postClimateOrdersOrderCancel : order:string ->
    [`FormUrlEncoded of t_443b3fa246] option
    -> ([`CH_OK of (climate_order * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/test_helpers/terminal/readers/\{reader\}/present_payment_method *)
  val postTestHelpersTerminalReadersReaderPresentPaymentMethod :
    reader:string -> [`FormUrlEncoded of t_97d6bcf429] option
    -> ([`CH_OK of (terminal_reader * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Accepts the specified quote.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/accept *)
  val postQuotesQuoteAccept : quote:string ->
    [`FormUrlEncoded of t_7904238c21] option
    -> ([`CH_OK of (quote * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of PaymentMethods for a given Customer</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/payment_methods *)
  val getCustomersCustomerPaymentMethods : customer:string ->
    ?allow_redisplay:t_4f49500d45 -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    ?type_:t_e03d9a444b -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_ad4081eaea * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>\[Deprecated\] Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.
      This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to decline an authorization</a>.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/issuing/authorizations/\{authorization\}/decline *)
  val postIssuingAuthorizationsAuthorizationDecline : authorization:string ->
    [`FormUrlEncoded of t_9c4b9da4b4] option
    -> ([
         `CH_OK of
           (issuing_authorization * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/treasury/outbound_transfers/\{outbound_transfer\} *)
  val getTreasuryOutboundTransfersOutboundTransfer :
    outbound_transfer:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (treasury_outbound_transfer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Deletes a <code>Reader</code> object.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\} *)
  val deleteTerminalReadersReader : reader:string ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (deleted_terminal_reader * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\} *)
  val postTerminalReadersReader : reader:string ->
    [`FormUrlEncoded of t_d395ce2720] option
    -> ([`CH_OK of (t_d2ba7ca387 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a <code>Reader</code> object.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\} *)
  val getTerminalReadersReader : reader:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_2ca1ba2569 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates a new <code>tax_id</code> object for a customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/tax_ids *)
  val postCustomersCustomerTaxIds : customer:string ->
    [`FormUrlEncoded of t_3f758fb90a] option
    -> ([`CH_OK of (tax_id * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of tax IDs for a customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/tax_ids *)
  val getCustomersCustomerTaxIds : customer:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_38c8f764f1 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Transitions a test mode created OutboundPayment to the <code>failed</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_payments/\{id\}/fail *)
  val postTestHelpersTreasuryOutboundPaymentsIdFail : id:string ->
    [`FormUrlEncoded of t_36bf1a8752] option
    -> ([
         `CH_OK of
           (treasury_outbound_payment * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates an existing payment method domain.</p>
      
      @param payment_method_domain payment_method_domain
      @see "openapi/spec3.json" /v1/payment_method_domains/\{payment_method_domain\} *)
  val postPaymentMethodDomainsPaymentMethodDomain :
    payment_method_domain:string -> [`FormUrlEncoded of t_966b79b159] option
    -> ([
         `CH_OK of
           (payment_method_domain * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an existing payment method domain.</p>
      
      @param payment_method_domain payment_method_domain
      @see "openapi/spec3.json" /v1/payment_method_domains/\{payment_method_domain\} *)
  val getPaymentMethodDomainsPaymentMethodDomain :
    payment_method_domain:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (payment_method_domain * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).</p>
      
      <p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
      
      @param subscription_item subscription_item
      @see "openapi/spec3.json" /v1/subscription_items/\{subscription_item\}/usage_record_summaries *)
  val getSubscriptionItemsSubscriptionItemUsageRecordSummaries :
    subscription_item:string -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_691092e518 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Create an external account for a given account.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/bank_accounts *)
  val postAccountsAccountBankAccounts : account:string ->
    [`FormUrlEncoded of t_33b35c33e3] option
    -> ([
         `CH_OK of
           (external_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      <p>This request accepts only metadata as an argument.</p>
      
      @param transfer transfer
      @see "openapi/spec3.json" /v1/transfers/\{transfer\} *)
  val postTransfersTransfer : transfer:string ->
    [`FormUrlEncoded of t_b6a545cdf2] option
    -> ([`CH_OK of (transfer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p>
      
      @param transfer transfer
      @see "openapi/spec3.json" /v1/transfers/\{transfer\} *)
  val getTransfersTransfer : transfer:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (transfer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a Mandate object.</p>
      
      @param mandate mandate
      @see "openapi/spec3.json" /v1/mandates/\{mandate\} *)
  val getMandatesMandate : mandate:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (mandate * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>shipped</code>.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/test_helpers/issuing/cards/\{card\}/shipping/ship *)
  val postTestHelpersIssuingCardsCardShippingShip : card:string ->
    [`FormUrlEncoded of t_5a52a204c1] option
    -> ([`CH_OK of (issuing_card * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates a SetupIntent object.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\} *)
  val postSetupIntentsIntent : intent:string ->
    [`FormUrlEncoded of t_cf96a999b4] option
    -> ([`CH_OK of (setup_intent * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of a SetupIntent that has previously been created. </p>
      
      <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
      
      <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\} *)
  val getSetupIntentsIntent : intent:string -> ?client_secret:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (setup_intent * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
      
      <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
      Funds will be refunded to the credit or debit card that was originally charged.</p>
      
      <p>You can optionally refund only part of a charge.
      You can do so multiple times, until the entire charge has been refunded.</p>
      
      <p>Once entirely refunded, a charge can’t be refunded again.
      This method will raise an error when called on an already-refunded charge,
      or when trying to refund more money than is left on a charge.</p>
      
      @param charge The identifier of the charge to refund.
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refunds *)
  val postChargesChargeRefunds : charge:string ->
    [`FormUrlEncoded of t_79e7f8c8c2] option
    -> ([`CH_OK of (refund * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refunds *)
  val getChargesChargeRefunds : charge:string -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_0fc9eda318 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates an existing file link object. Expired links can no longer be updated.</p>
      
      @param link link
      @see "openapi/spec3.json" /v1/file_links/\{link\} *)
  val postFileLinksLink : link:string ->
    [`FormUrlEncoded of t_94fbd9b0fa] option
    -> ([`CH_OK of (file_link * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the file link with the given ID.</p>
      
      @param link link
      @see "openapi/spec3.json" /v1/file_links/\{link\} *)
  val getFileLinksLink : link:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (file_link * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Initiates a refund on a Reader</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/refund_payment *)
  val postTerminalReadersReaderRefundPayment : reader:string ->
    [`FormUrlEncoded of t_bc1efb62b6] option
    -> ([`CH_OK of (terminal_reader * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\} *)
  val getFinancialConnectionsAccountsAccount : account:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (financial_connections_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Manually reconcile the remaining amount for a <code>customer_balance</code> PaymentIntent.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/apply_customer_balance *)
  val postPaymentIntentsIntentApplyCustomerBalance : intent:string ->
    [`FormUrlEncoded of t_2a30856b32] option
    -> ([`CH_OK of (payment_intent * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Capture the payment of an existing, uncaptured charge that was created with the <code>capture</code> option set to false.</p>
      
      <p>Uncaptured payments expire a set number of days after they are created (<a href="/docs/charges/placing-a-hold">7 by default</a>), after which they are marked as refunded and capture attempts will fail.</p>
      
      <p>Don’t use this method to capture a PaymentIntent-initiated charge. Use <a href="/docs/api/payment_intents/capture">Capture a PaymentIntent</a>.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/capture *)
  val postChargesChargeCapture : charge:string ->
    [`FormUrlEncoded of t_0a23dd73f1] option
    -> ([`CH_OK of (charge * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Transitions a test mode created OutboundTransfer to the <code>failed</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_transfers/\{outbound_transfer\}/fail *)
  val postTestHelpersTreasuryOutboundTransfersOutboundTransferFail :
    outbound_transfer:string -> [`FormUrlEncoded of t_cd767fc4a9] option
    -> ([
         `CH_OK of
           (treasury_outbound_transfer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>
      
      @param schedule schedule
      @see "openapi/spec3.json" /v1/subscription_schedules/\{schedule\}/cancel *)
  val postSubscriptionSchedulesScheduleCancel : schedule:string ->
    [`FormUrlEncoded of t_11a645720c] option
    -> ([
         `CH_OK of
           (subscription_schedule * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of transactions that modified the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cash_balance_transactions *)
  val getCustomersCustomerCashBalanceTransactions : customer:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_34ac9bd06d * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>
      
      <p>Consult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to <a href="#create_invoice">issue another invoice</a> or <a href="#create_credit_note">credit note</a> instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/void *)
  val postInvoicesInvoiceVoid : invoice:string ->
    [`FormUrlEncoded of t_f804a131e1] option
    -> ([`CH_OK of (invoice * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>
      
      <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/disputes/\{dispute\}/close *)
  val postDisputesDisputeClose : dispute:string ->
    [`FormUrlEncoded of t_c5198a426a] option
    -> ([`CH_OK of (dispute * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param settlement settlement
      @see "openapi/spec3.json" /v1/issuing/settlements/\{settlement\} *)
  val postIssuingSettlementsSettlement : settlement:string ->
    [`FormUrlEncoded of t_fc73a4ef65] option
    -> ([
         `CH_OK of
           (issuing_settlement * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves an Issuing <code>Settlement</code> object.</p>
      
      @param settlement settlement
      @see "openapi/spec3.json" /v1/issuing/settlements/\{settlement\} *)
  val getIssuingSettlementsSettlement : settlement:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (issuing_settlement * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the balance transaction with the given ID.</p>
      
      <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/balance/history/\{id\} *)
  val getBalanceHistoryId : id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (balance_transaction * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Attaches a PaymentMethod object to a Customer.</p>
      
      <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
      or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
      These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the <code>/v1/payment_methods/:id/attach</code>
      endpoint without first using a SetupIntent or PaymentIntent with <code>setup_future_usage</code> does not optimize the PaymentMethod for
      future use, which makes later declines and payment friction more likely.
      See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up
      future payments.</p>
      
      <p>To use this PaymentMethod as the default for invoice or subscription payments,
      set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
      on the Customer to the PaymentMethod’s ID.</p>
      
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/payment_methods/\{payment_method\}/attach *)
  val postPaymentMethodsPaymentMethodAttach : payment_method:string ->
    [`FormUrlEncoded of t_a2cd932c31] option
    -> ([`CH_OK of (payment_method * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a Climate supplier object.</p>
      
      @param supplier supplier
      @see "openapi/spec3.json" /v1/climate/suppliers/\{supplier\} *)
  val getClimateSuppliersSupplier : supplier:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (climate_supplier * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a href="/docs/identity/how-sessions-work">status</a>.</p>
      
      <p>Once canceled, future submission attempts are disabled. This cannot be undone. <a href="/docs/identity/verification-sessions#cancel">Learn more</a>.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/identity/verification_sessions/\{session\}/cancel *)
  val postIdentityVerificationSessionsSessionCancel : session:string ->
    [`FormUrlEncoded of t_63ae974194] option
    -> ([
         `CH_OK of
           (identity_verification_session * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/line_items *)
  val getQuotesQuoteLineItems : quote:string -> ?ending_before:string ->
    ?expand:string list -> ?limit:int -> ?starting_after:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_b05b9010db * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/events/\{id\} *)
  val getEventsId : id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (event * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>When retrieving a payment link, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param payment_link payment_link
      @see "openapi/spec3.json" /v1/payment_links/\{payment_link\}/line_items *)
  val getPaymentLinksPaymentLinkLineItems : payment_link:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_1a3b6929f1 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Transitions a test mode created InboundTransfer to the <code>failed</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/inbound_transfers/\{id\}/fail *)
  val postTestHelpersTreasuryInboundTransfersIdFail : id:string ->
    [`FormUrlEncoded of t_7ee7f99a15] option
    -> ([
         `CH_OK of
           (treasury_inbound_transfer * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/issuing/cards/\{card\} *)
  val postIssuingCardsCard : card:string ->
    [`FormUrlEncoded of t_af6348f16b] option
    -> ([`CH_OK of (issuing_card * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves an Issuing <code>Card</code> object.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/issuing/cards/\{card\} *)
  val getIssuingCardsCard : card:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (issuing_card * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieve a list of billing meter event summaries.</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\}/event_summaries *)
  val getBillingMetersIdEventSummaries : id:string -> customer:string ->
    end_time:Ptime.t -> ?ending_before:string -> ?expand:string list ->
    ?limit:int -> start_time:Ptime.t -> ?starting_after:string ->
    ?value_grouping_window:t_2ef034b1cb -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_d9b8cfd01d * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p>
      
      @param topup topup
      @see "openapi/spec3.json" /v1/topups/\{topup\} *)
  val postTopupsTopup : topup:string ->
    [`FormUrlEncoded of t_4336fe6b25] option
    -> ([`CH_OK of (topup * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p>
      
      @param topup topup
      @see "openapi/spec3.json" /v1/topups/\{topup\} *)
  val getTopupsTopup : topup:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (topup * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Creates an immutable transaction that updates the customer’s credit <a href="/docs/billing/customer/balance">balance</a>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/balance_transactions *)
  val postCustomersCustomerBalanceTransactions : customer:string ->
    [`FormUrlEncoded of t_3cf7957d1b] option
    -> ([
         `CH_OK of
           (customer_balance_transaction * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Returns a list of transactions that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/balance_transactions *)
  val getCustomersCustomerBalanceTransactions : customer:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_0ff9c6b16b * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the line items of a persisted tax calculation as a collection.</p>
      
      @param calculation calculation
      @see "openapi/spec3.json" /v1/tax/calculations/\{calculation\}/line_items *)
  val getTaxCalculationsCalculationLineItems : calculation:string ->
    ?ending_before:string -> ?expand:string list -> ?limit:int ->
    ?starting_after:string -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (t_8db77c995a * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{id\} *)
  val getApplicationFeesId : id:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (application_fee * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Reverse a test-mode Authorization.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations/\{authorization\}/reverse *)
  val postTestHelpersIssuingAuthorizationsAuthorizationReverse :
    authorization:string -> [`FormUrlEncoded of t_71368f28f0] option
    -> ([
         `CH_OK of
           (issuing_authorization * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a <code>Review</code> object.</p>
      
      @param review review
      @see "openapi/spec3.json" /v1/reviews/\{review\} *)
  val getReviewsReview : review:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (review * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>A Session can be expired when it is in one of these statuses: <code>open</code> </p>
      
      <p>After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/checkout/sessions/\{session\}/expire *)
  val postCheckoutSessionsSessionExpire : session:string ->
    [`FormUrlEncoded of t_b43e6c27b9] option
    -> ([
         `CH_OK of
           (checkout_session * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/linked_accounts/\{account\} *)
  val getLinkedAccountsAccount : account:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (financial_connections_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Delete a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources/\{id\} *)
  val deleteCustomersCustomerSourcesId : customer:string -> id:string ->
    [`FormUrlEncoded of t_86637173ac] option
    -> ([`CH_OK of (t_856459704a * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Update a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources/\{id\} *)
  val postCustomersCustomerSourcesId : customer:string -> id:string ->
    [`FormUrlEncoded of t_8d2f372785] option
    -> ([`CH_OK of (t_7f9b4fe25c * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieve a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources/\{id\} *)
  val getCustomersCustomerSourcesId : customer:string -> id:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (payment_source * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      <p>This request only accepts metadata as an argument.</p>
      
      @param fee fee
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{fee\}/refunds/\{id\} *)
  val postApplicationFeesFeeRefundsId : fee:string -> id:string ->
    [`FormUrlEncoded of t_4c8a52d117] option
    -> ([`CH_OK of (fee_refund * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p>
      
      @param fee fee
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{fee\}/refunds/\{id\} *)
  val getApplicationFeesFeeRefundsId : fee:string -> id:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (fee_refund * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Deletes the feature attachment to a product</p>
      
      @param product product
      @param id id
      @see "openapi/spec3.json" /v1/products/\{product\}/features/\{id\} *)
  val deleteProductsProductFeaturesId : id:string -> product:string ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (deleted_product_feature * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a product_feature, which represents a feature attachment to a product</p>
      
      @param product The ID of the product.
      @param id The ID of the product_feature.
      @see "openapi/spec3.json" /v1/products/\{product\}/features/\{id\} *)
  val getProductsProductFeaturesId : id:string -> product:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (product_feature * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Removes the currently applied discount on a customer.</p>
      
      @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\}/discount *)
  val deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount :
    customer:string -> subscription_exposed_id:string ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (deleted_discount * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\}/discount *)
  val getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount :
    customer:string -> subscription_exposed_id:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (discount * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates an existing Account Capability. Request or remove a capability by updating its <code>requested</code> parameter.</p>
      
      @param account account
      @param capability capability
      @see "openapi/spec3.json" /v1/accounts/\{account\}/capabilities/\{capability\} *)
  val postAccountsAccountCapabilitiesCapability : account:string ->
    capability:string -> [`FormUrlEncoded of t_710cc66740] option
    -> ([`CH_OK of (capability * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves information about the specified Account Capability.</p>
      
      @param account account
      @param capability capability
      @see "openapi/spec3.json" /v1/accounts/\{account\}/capabilities/\{capability\} *)
  val getAccountsAccountCapabilitiesCapability : account:string ->
    capability:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (capability * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Delete a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts/\{id\} *)
  val deleteCustomersCustomerBankAccountsId : customer:string -> id:string ->
    [`FormUrlEncoded of t_a53acb8ec8] option
    -> ([`CH_OK of (t_f45fcafdae * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Update a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts/\{id\} *)
  val postCustomersCustomerBankAccountsId : customer:string -> id:string ->
    [`FormUrlEncoded of t_e2011092a6] option
    -> ([`CH_OK of (t_2bc92fc692 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts/\{id\} *)
  val getCustomersCustomerBankAccountsId : customer:string -> id:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (bank_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a PaymentMethod object for a given Customer.</p>
      
      @param customer customer
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/customers/\{customer\}/payment_methods/\{payment_method\} *)
  val getCustomersCustomerPaymentMethodsPaymentMethod : customer:string ->
    payment_method:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (payment_method * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Deletes an existing <code>tax_id</code> object.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/tax_ids/\{id\} *)
  val deleteCustomersCustomerTaxIdsId : customer:string -> id:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (deleted_tax_id * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the <code>tax_id</code> object with the given identifier.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/tax_ids/\{id\} *)
  val getCustomersCustomerTaxIdsId : customer:string -> id:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (tax_id * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Delete a specified external account for a given account.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/bank_accounts/\{id\} *)
  val deleteAccountsAccountBankAccountsId : account:string -> id:string ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (deleted_external_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the metadata, account holder name, account holder type of a bank account belonging to
      a connected account and optionally sets it as the default for its currency. Other bank account
      details are not editable by design.</p>
      
      <p>You can only update bank accounts when <a href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a> is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>
      
      <p>You can re-enable a disabled bank account by performing an update call without providing any
      arguments or changes.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/bank_accounts/\{id\} *)
  val postAccountsAccountBankAccountsId : account:string -> id:string ->
    [`FormUrlEncoded of t_6bfc2fe3c9] option
    -> ([
         `CH_OK of
           (external_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieve a specified external account for a given account.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/bank_accounts/\{id\} *)
  val getAccountsAccountBankAccountsId : account:string -> id:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (external_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      <p>This request only accepts metadata and description as arguments.</p>
      
      @param transfer transfer
      @param id id
      @see "openapi/spec3.json" /v1/transfers/\{transfer\}/reversals/\{id\} *)
  val postTransfersTransferReversalsId : id:string -> transfer:string ->
    [`FormUrlEncoded of t_77c2de13de] option
    -> ([
         `CH_OK of
           (transfer_reversal * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p>
      
      @param transfer transfer
      @param id id
      @see "openapi/spec3.json" /v1/transfers/\{transfer\}/reversals/\{id\} *)
  val getTransfersTransferReversalsId : id:string -> transfer:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (transfer_reversal * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Update a specified refund.</p>
      
      @param charge charge
      @param refund refund
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refunds/\{refund\} *)
  val postChargesChargeRefundsRefund : charge:string -> refund:string ->
    [`FormUrlEncoded of t_4688cef40c] option
    -> ([`CH_OK of (refund * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the details of an existing refund.</p>
      
      @param charge charge
      @param refund refund
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refunds/\{refund\} *)
  val getChargesChargeRefundsRefund : charge:string -> refund:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (refund * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Delete a specified external account for a given account.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts/\{id\} *)
  val deleteAccountsAccountExternalAccountsId : account:string ->
    id:string -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (deleted_external_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates the metadata, account holder name, account holder type of a bank account belonging to
      a connected account and optionally sets it as the default for its currency. Other bank account
      details are not editable by design.</p>
      
      <p>You can only update bank accounts when <a href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a> is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>
      
      <p>You can re-enable a disabled bank account by performing an update call without providing any
      arguments or changes.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts/\{id\} *)
  val postAccountsAccountExternalAccountsId : account:string -> id:string ->
    [`FormUrlEncoded of t_adc038ebfb] option
    -> ([
         `CH_OK of
           (external_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieve a specified external account for a given account.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts/\{id\} *)
  val getAccountsAccountExternalAccountsId : account:string -> id:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (external_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a specific cash balance transaction, which updated the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>
      
      @param customer customer
      @param transaction transaction
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cash_balance_transactions/\{transaction\} *)
  val getCustomersCustomerCashBalanceTransactionsTransaction :
    customer:string -> transaction:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (customer_cash_balance_transaction * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Most credit balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p>
      
      @param customer customer
      @param transaction transaction
      @see "openapi/spec3.json" /v1/customers/\{customer\}/balance_transactions/\{transaction\} *)
  val postCustomersCustomerBalanceTransactionsTransaction :
    customer:string -> transaction:string ->
    [`FormUrlEncoded of t_ab61fbafe1] option
    -> ([
         `CH_OK of
           (customer_balance_transaction * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a specific customer balance transaction that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
      
      @param customer customer
      @param transaction transaction
      @see "openapi/spec3.json" /v1/customers/\{customer\}/balance_transactions/\{transaction\} *)
  val getCustomersCustomerBalanceTransactionsTransaction : customer:string ->
    transaction:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (customer_balance_transaction * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves a new Source MandateNotification.</p>
      
      @param source source
      @param mandate_notification mandate_notification
      @see "openapi/spec3.json" /v1/sources/\{source\}/mandate_notifications/\{mandate_notification\} *)
  val getSourcesSourceMandateNotificationsMandateNotification :
    mandate_notification:string -> source:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (source_mandate_notification * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Delete a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards/\{id\} *)
  val deleteCustomersCustomerCardsId : customer:string -> id:string ->
    [`FormUrlEncoded of t_73e3595823] option
    -> ([`CH_OK of (t_d58cff0cff * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Update a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards/\{id\} *)
  val postCustomersCustomerCardsId : customer:string -> id:string ->
    [`FormUrlEncoded of t_0d61aaaa53] option
    -> ([`CH_OK of (t_8bf295c604 * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards/\{id\} *)
  val getCustomersCustomerCardsId : customer:string -> id:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (card * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>
      
      <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
      
      <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
      
      @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\} *)
  val deleteCustomersCustomerSubscriptionsSubscriptionExposedId :
    customer:string -> subscription_exposed_id:string ->
    [`FormUrlEncoded of t_d83a6d8f1b] option
    -> ([`CH_OK of (subscription * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>
      
      @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\} *)
  val postCustomersCustomerSubscriptionsSubscriptionExposedId :
    customer:string -> subscription_exposed_id:string ->
    [`FormUrlEncoded of t_6a54c2e4bd] option
    -> ([`CH_OK of (subscription * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves the subscription with the given ID.</p>
      
      @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\} *)
  val getCustomersCustomerSubscriptionsSubscriptionExposedId :
    customer:string -> subscription_exposed_id:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (subscription * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons/\{person\} *)
  val deleteAccountsAccountPersonsPerson : account:string -> person:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (deleted_person * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates an existing person.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons/\{person\} *)
  val postAccountsAccountPersonsPerson : account:string -> person:string ->
    [`FormUrlEncoded of t_fcf9823b71] option
    -> ([`CH_OK of (person * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves an existing person.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons/\{person\} *)
  val getAccountsAccountPersonsPerson : account:string -> person:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (person * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates an invoice’s line item. Some fields, such as <code>tax_amounts</code>, only live on the invoice line item,
      so they can only be updated through this endpoint. Other fields, such as <code>amount</code>, live on both the invoice
      item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well.
      Updating an invoice’s line item is only possible before the invoice is finalized.</p>
      
      @param invoice Invoice ID of line item
      @param line_item_id Invoice line item ID
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/lines/\{line_item_id\} *)
  val postInvoicesInvoiceLinesLineItemId : invoice:string ->
    line_item_id:string -> [`FormUrlEncoded of t_05b4eca2cd] option
    -> ([`CH_OK of (line_item * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Verify a specified bank account for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts/\{id\}/verify *)
  val postCustomersCustomerBankAccountsIdVerify : customer:string ->
    id:string -> [`FormUrlEncoded of t_62de8cc6bb] option
    -> ([`CH_OK of (bank_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people/\{person\} *)
  val deleteAccountsAccountPeoplePerson : account:string -> person:string ->
    [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (deleted_person * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Updates an existing person.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people/\{person\} *)
  val postAccountsAccountPeoplePerson : account:string -> person:string ->
    [`FormUrlEncoded of t_f8ce442641] option
    -> ([`CH_OK of (person * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieves an existing person.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people/\{person\} *)
  val getAccountsAccountPeoplePerson : account:string -> person:string ->
    ?expand:string list -> [`FormUrlEncoded of unit] option
    -> ([`CH_OK of (person * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Verify a specified bank account for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources/\{id\}/verify *)
  val postCustomersCustomerSourcesIdVerify : customer:string -> id:string ->
    [`FormUrlEncoded of t_60553c2dee] option
    -> ([`CH_OK of (bank_account * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
  
  (** <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p>
      
      @param source source
      @param source_transaction source_transaction
      @see "openapi/spec3.json" /v1/sources/\{source\}/source_transactions/\{source_transaction\} *)
  val getSourcesSourceSourceTransactionsSourceTransaction : source:string ->
    source_transaction:string -> ?expand:string list ->
    [`FormUrlEncoded of unit] option
    -> ([
         `CH_OK of
           (source_transaction * [`Http_header of string * string] list)
        | `CH_Default of
            (int * error * [`Http_header of string * string] list)],
        [`Nonconforming_request of string * string option]) result
end

module type DEFAULTS = sig
  open StripeTypes
  
  val error : error
end

module BaseHandlers (Defaults : DEFAULTS) : HANDLERS = struct
  
  (** <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p>
      
      @see "openapi/spec3.json" /v1/webhook_endpoints *)
  let postWebhookEndpoints _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of your webhook endpoints.</p>
      
      @see "openapi/spec3.json" /v1/webhook_endpoints *)
  let getWebhookEndpoints ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a list of Transaction objects.</p>
      
      @see "openapi/spec3.json" /v1/treasury/transactions *)
  let getTreasuryTransactions ?created:_ ?ending_before:_ ?expand:_
    ~financial_account:_ ?limit:_ ?order_by:_ ?starting_after:_ ?status:_
    ?status_transitions:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates an InboundTransfer.</p>
      
      @see "openapi/spec3.json" /v1/treasury/inbound_transfers *)
  let postTreasuryInboundTransfers _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of InboundTransfers sent from the specified FinancialAccount.</p>
      
      @see "openapi/spec3.json" /v1/treasury/inbound_transfers *)
  let getTreasuryInboundTransfers ?ending_before:_ ?expand:_
    ~financial_account:_ ?limit:_ ?starting_after:_ ?status:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Reverses a ReceivedDebit and creates a DebitReversal object.</p>
      
      @see "openapi/spec3.json" /v1/treasury/debit_reversals *)
  let postTreasuryDebitReversals _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of DebitReversals.</p>
      
      @see "openapi/spec3.json" /v1/treasury/debit_reversals *)
  let getTreasuryDebitReversals ?ending_before:_ ?expand:_
    ~financial_account:_ ?limit:_ ?received_debit:_ ?resolution:_
    ?starting_after:_ ?status:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Allows the user to capture an arbitrary amount, also known as a forced capture.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/issuing/transactions/create_force_capture *)
  let postTestHelpersIssuingTransactionsCreateForceCapture _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/reviews *)
  let getReviews ?created:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new price for an existing product. The price can be recurring or one-time.</p>
      
      @see "openapi/spec3.json" /v1/prices *)
  let postPrices _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of your active prices, excluding <a href="/docs/products-prices/pricing-models#inline-pricing">inline prices</a>. For the list of inactive prices, set <code>active</code> to false.</p>
      
      @see "openapi/spec3.json" /v1/prices *)
  let getPrices ?active:_ ?created:_ ?currency:_ ?ending_before:_ ?expand:_
    ?limit:_ ?lookup_keys:_ ?product:_ ?recurring:_ ?starting_after:_
    ?type_:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p>
      
      @see "openapi/spec3.json" /v1/exchange_rates *)
  let getExchangeRates ?ending_before:_ ?expand:_ ?limit:_ ?starting_after:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a Session object.</p>
      
      @see "openapi/spec3.json" /v1/checkout/sessions *)
  let postCheckoutSessions _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of Checkout Sessions.</p>
      
      @see "openapi/spec3.json" /v1/checkout/sessions *)
  let getCheckoutSessions ?created:_ ?customer:_ ?customer_details:_
    ?ending_before:_ ?expand:_ ?limit:_ ?payment_intent:_ ?payment_link:_
    ?starting_after:_ ?status:_ ?subscription:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a personalization design object.</p>
      
      @see "openapi/spec3.json" /v1/issuing/personalization_designs *)
  let postIssuingPersonalizationDesigns _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/personalization_designs *)
  let getIssuingPersonalizationDesigns ?ending_before:_ ?expand:_ ?limit:_
    ?lookup_keys:_ ?preferences:_ ?starting_after:_ ?status:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.</p>
      
      @see "openapi/spec3.json" /v1/invoiceitems *)
  let postInvoiceitems _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p>
      
      @see "openapi/spec3.json" /v1/invoiceitems *)
  let getInvoiceitems ?created:_ ?customer:_ ?ending_before:_ ?expand:_
    ?invoice:_ ?limit:_ ?pending:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an account.</p>
      
      @see "openapi/spec3.json" /v1/account *)
  let getAccount ?expand:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a short-lived API key for a given resource.</p>
      
      @see "openapi/spec3.json" /v1/ephemeral_keys *)
  let postEphemeralKeys _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Search for customers you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/customers/search *)
  let getCustomersSearch ?expand:_ ?limit:_ ?page:_ ~query:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the current account balance, based on the authentication that was used to make the request.
       For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
      
      @see "openapi/spec3.json" /v1/balance *)
  let getBalance ?expand:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/treasury/received_credits *)
  let postTestHelpersTreasuryReceivedCredits _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Search for subscriptions you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/subscriptions/search *)
  let getSubscriptionsSearch ?expand:_ ?limit:_ ?page:_ ~query:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
      
      <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
      Funds will be refunded to the credit or debit card that was originally charged.</p>
      
      <p>You can optionally refund only part of a charge.
      You can do so multiple times, until the entire charge has been refunded.</p>
      
      <p>Once entirely refunded, a charge can’t be refunded again.
      This method will raise an error when called on an already-refunded charge,
      or when trying to refund more money than is left on a charge.</p>
      
      @see "openapi/spec3.json" /v1/refunds *)
  let postRefunds _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first The 10 most recent refunds are always available by default on the Charge object.</p>
      
      @see "openapi/spec3.json" /v1/refunds *)
  let getRefunds ?charge:_ ?created:_ ?ending_before:_ ?expand:_ ?limit:_
    ?payment_intent:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Create or replace a secret in the secret store.</p>
      
      @see "openapi/spec3.json" /v1/apps/secrets *)
  let postAppsSecrets _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>List all secrets stored on the given scope.</p>
      
      @see "openapi/spec3.json" /v1/apps/secrets *)
  let getAppsSecrets ?ending_before:_ ?expand:_ ?limit:_ ~scope:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Search for PaymentIntents you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/payment_intents/search *)
  let getPaymentIntentsSearch ?expand:_ ?limit:_ ?page:_ ~query:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieve a list of active entitlements for a customer</p>
      
      @see "openapi/spec3.json" /v1/entitlements/active_entitlements *)
  let getEntitlementsActiveEntitlements ~customer:_ ?ending_before:_
    ?expand:_ ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new <code>Configuration</code> object.</p>
      
      @see "openapi/spec3.json" /v1/terminal/configurations *)
  let postTerminalConfigurations _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of <code>Configuration</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/terminal/configurations *)
  let getTerminalConfigurations ?ending_before:_ ?expand:_
    ?is_account_default:_ ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.</p>
      
      @see "openapi/spec3.json" /v1/subscription_schedules *)
  let postSubscriptionSchedules _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the list of your subscription schedules.</p>
      
      @see "openapi/spec3.json" /v1/subscription_schedules *)
  let getSubscriptionSchedules ?canceled_at:_ ?completed_at:_ ?created:_
    ?customer:_ ?ending_before:_ ?expand:_ ?limit:_ ?released_at:_
    ?scheduled:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new object and begin running the report. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
      
      @see "openapi/spec3.json" /v1/reporting/report_runs *)
  let postReportingReportRuns _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of Report Runs, with the most recent appearing first.</p>
      
      @see "openapi/spec3.json" /v1/reporting/report_runs *)
  let getReportingReportRuns ?created:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a Climate order object for a given Climate product. The order will be processed immediately
      after creation and payment will be deducted your Stripe balance.</p>
      
      @see "openapi/spec3.json" /v1/climate/orders *)
  let postClimateOrders _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Lists all Climate order objects. The orders are returned sorted by creation date, with the
      most recently created orders appearing first.</p>
      
      @see "openapi/spec3.json" /v1/climate/orders *)
  let getClimateOrders ?ending_before:_ ?expand:_ ?limit:_ ?starting_after:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>You can now model subscriptions more flexibly using the <a href="#prices">Prices API</a>. It replaces the Plans API and is backwards compatible to simplify your migration.</p>
      
      @see "openapi/spec3.json" /v1/plans *)
  let postPlans _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of your plans.</p>
      
      @see "openapi/spec3.json" /v1/plans *)
  let getPlans ?active:_ ?created:_ ?ending_before:_ ?expand:_ ?limit:_
    ?product:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Lists all Issuing <code>Token</code> objects for a given card.</p>
      
      @see "openapi/spec3.json" /v1/issuing/tokens *)
  let getIssuingTokens ~card:_ ?created:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ ?status:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @see "openapi/spec3.json" /v1/invoices/upcoming/lines *)
  let getInvoicesUpcomingLines ?automatic_tax:_ ?coupon:_ ?currency:_
    ?customer:_ ?customer_details:_ ?discounts:_ ?ending_before:_ ?expand:_
    ?invoice_items:_ ?issuer:_ ?limit:_ ?on_behalf_of:_ ?preview_mode:_
    ?schedule:_ ?schedule_details:_ ?starting_after:_ ?subscription:_
    ?subscription_billing_cycle_anchor:_ ?subscription_cancel_at:_
    ?subscription_cancel_at_period_end:_ ?subscription_cancel_now:_
    ?subscription_default_tax_rates:_ ?subscription_details:_
    ?subscription_items:_ ?subscription_proration_behavior:_
    ?subscription_proration_date:_ ?subscription_resume_at:_
    ?subscription_start_date:_ ?subscription_trial_end:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/treasury/received_debits *)
  let postTestHelpersTreasuryReceivedDebits _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Allows the user to refund an arbitrary amount, also known as a unlinked refund.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/issuing/transactions/create_unlinked_refund *)
  let postTestHelpersIssuingTransactionsCreateUnlinkedRefund _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Create a test-mode authorization.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations *)
  let postTestHelpersIssuingAuthorizations _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.</p>
      
      <p>When you create a subscription with <code>collection_method=charge_automatically</code>, the first invoice is finalized as part of the request.
      The <code>payment_behavior</code> parameter determines the exact behavior of the initial payment.</p>
      
      <p>To start subscriptions where the first invoice always begins in a <code>draft</code> status, use <a href="/docs/billing/subscriptions/subscription-schedules#managing">subscription schedules</a> instead.
      Schedules provide the flexibility to model more complex billing configurations that change over time.</p>
      
      @see "openapi/spec3.json" /v1/subscriptions *)
  let postSubscriptions _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p>
      
      @see "openapi/spec3.json" /v1/subscriptions *)
  let getSubscriptions ?automatic_tax:_ ?collection_method:_ ?created:_
    ?current_period_end:_ ?current_period_start:_ ?customer:_
    ?ending_before:_ ?expand:_ ?limit:_ ?price:_ ?starting_after:_ ?status:_
    ?test_clock:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="https://docs.stripe.com/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p>
      
      @see "openapi/spec3.json" /v1/events *)
  let getEvents ?created:_ ?delivery_success:_ ?ending_before:_ ?expand:_
    ?limit:_ ?starting_after:_ ?type_:_ ?types:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a configuration that describes the functionality and behavior of a PortalSession</p>
      
      @see "openapi/spec3.json" /v1/billing_portal/configurations *)
  let postBillingPortalConfigurations _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of configurations that describe the functionality of the customer portal.</p>
      
      @see "openapi/spec3.json" /v1/billing_portal/configurations *)
  let getBillingPortalConfigurations ?active:_ ?ending_before:_ ?expand:_
    ?is_default:_ ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
      
      <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
      
      @see "openapi/spec3.json" /v1/balance/history *)
  let getBalanceHistory ?created:_ ?currency:_ ?ending_before:_ ?expand:_
    ?limit:_ ?payout:_ ?source:_ ?starting_after:_ ?type_:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>
      
      <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
      
      <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period\[start\]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request. </p>
      
      <p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>
      
      @see "openapi/spec3.json" /v1/invoices/create_preview *)
  let postInvoicesCreatePreview _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a billing meter event adjustment</p>
      
      @see "openapi/spec3.json" /v1/billing/meter_event_adjustments *)
  let postBillingMeterEventAdjustments _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>
      
      @see "openapi/spec3.json" /v1/terminal/connection_tokens *)
  let postTerminalConnectionTokens _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/physical_bundles *)
  let getIssuingPhysicalBundles ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ ?status:_ ?type_:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Finds a secret in the secret store by name and scope.</p>
      
      @see "openapi/spec3.json" /v1/apps/secrets/find *)
  let getAppsSecretsFind ?expand:_ ~name:_ ~scope:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a feature</p>
      
      @see "openapi/spec3.json" /v1/entitlements/features *)
  let postEntitlementsFeatures _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieve a list of features</p>
      
      @see "openapi/spec3.json" /v1/entitlements/features *)
  let getEntitlementsFeatures ?archived:_ ?ending_before:_ ?expand:_ ?limit:_
    ?lookup_key:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a payment link.</p>
      
      @see "openapi/spec3.json" /v1/payment_links *)
  let postPaymentLinks _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of your payment links.</p>
      
      @see "openapi/spec3.json" /v1/payment_links *)
  let getPaymentLinks ?active:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>
      
      @see "openapi/spec3.json" /v1/issuing/cardholders *)
  let postIssuingCardholders _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/cardholders *)
  let getIssuingCardholders ?created:_ ?email:_ ?ending_before:_ ?expand:_
    ?limit:_ ?phone_number:_ ?starting_after:_ ?status:_ ?type_:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p>
      
      @see "openapi/spec3.json" /v1/credit_notes/preview/lines *)
  let getCreditNotesPreviewLines ?amount:_ ?credit_amount:_ ?effective_at:_
    ?ending_before:_ ?expand:_ ~invoice:_ ?limit:_ ?lines:_ ?memo:_
    ?metadata:_ ?out_of_band_amount:_ ?reason:_ ?refund:_ ?refund_amount:_
    ?shipping_cost:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates Tax <code>Settings</code> parameters used in tax calculations. All parameters are editable but none can be removed once set.</p>
      
      @see "openapi/spec3.json" /v1/tax/settings *)
  let postTaxSettings _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves Tax <code>Settings</code> for a merchant.</p>
      
      @see "openapi/spec3.json" /v1/tax/settings *)
  let getTaxSettings ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Calculates tax based on input and returns a Tax <code>Calculation</code> object.</p>
      
      @see "openapi/spec3.json" /v1/tax/calculations *)
  let postTaxCalculations _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of your disputes.</p>
      
      @see "openapi/spec3.json" /v1/disputes *)
  let getDisputes ?charge:_ ?created:_ ?ending_before:_ ?expand:_ ?limit:_
    ?payment_intent:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>
      
      <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
      
      <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period\[start\]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request.</p>
      
      <p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>
      
      @see "openapi/spec3.json" /v1/invoices/upcoming *)
  let getInvoicesUpcoming ?automatic_tax:_ ?coupon:_ ?currency:_ ?customer:_
    ?customer_details:_ ?discounts:_ ?expand:_ ?invoice_items:_ ?issuer:_
    ?on_behalf_of:_ ?preview_mode:_ ?schedule:_ ?schedule_details:_
    ?subscription:_ ?subscription_billing_cycle_anchor:_
    ?subscription_cancel_at:_ ?subscription_cancel_at_period_end:_
    ?subscription_cancel_now:_ ?subscription_default_tax_rates:_
    ?subscription_details:_ ?subscription_items:_
    ?subscription_proration_behavior:_ ?subscription_proration_date:_
    ?subscription_resume_at:_ ?subscription_start_date:_
    ?subscription_trial_end:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Create an apple pay domain.</p>
      
      @see "openapi/spec3.json" /v1/apple_pay/domains *)
  let postApplePayDomains _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>List apple pay domains.</p>
      
      @see "openapi/spec3.json" /v1/apple_pay/domains *)
  let getApplePayDomains ?domain_name:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p>
      
      @see "openapi/spec3.json" /v1/radar/value_lists *)
  let postRadarValueLists _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/radar/value_lists *)
  let getRadarValueLists ?alias:_ ?contains:_ ?created:_ ?ending_before:_
    ?expand:_ ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
      
      @see "openapi/spec3.json" /v1/link_account_sessions *)
  let postLinkAccountSessions _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new file link object.</p>
      
      @see "openapi/spec3.json" /v1/file_links *)
  let postFileLinks _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of file links.</p>
      
      @see "openapi/spec3.json" /v1/file_links *)
  let getFileLinks ?created:_ ?ending_before:_ ?expand:_ ?expired:_ ?file:_
    ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>
      
      <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
      
      @see "openapi/spec3.json" /v1/coupons *)
  let postCoupons _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of your coupons.</p>
      
      @see "openapi/spec3.json" /v1/coupons *)
  let getCoupons ?created:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/transactions *)
  let getIssuingTransactions ?card:_ ?cardholder:_ ?created:_
    ?ending_before:_ ?expand:_ ?limit:_ ?starting_after:_ ?type_:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/authorizations *)
  let getIssuingAuthorizations ?card:_ ?cardholder:_ ?created:_
    ?ending_before:_ ?expand:_ ?limit:_ ?starting_after:_ ?status:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a list of TransactionEntry objects.</p>
      
      @see "openapi/spec3.json" /v1/treasury/transaction_entries *)
  let getTreasuryTransactionEntries ?created:_ ?effective_at:_
    ?ending_before:_ ?expand:_ ~financial_account:_ ?limit:_ ?order_by:_
    ?starting_after:_ ?transaction:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of ReceivedDebits.</p>
      
      @see "openapi/spec3.json" /v1/treasury/received_debits *)
  let getTreasuryReceivedDebits ?ending_before:_ ?expand:_
    ~financial_account:_ ?limit:_ ?starting_after:_ ?status:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates an OutboundTransfer.</p>
      
      @see "openapi/spec3.json" /v1/treasury/outbound_transfers *)
  let postTreasuryOutboundTransfers _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of OutboundTransfers sent from the specified FinancialAccount.</p>
      
      @see "openapi/spec3.json" /v1/treasury/outbound_transfers *)
  let getTreasuryOutboundTransfers ?ending_before:_ ?expand:_
    ~financial_account:_ ?limit:_ ?starting_after:_ ?status:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p>
      
      @see "openapi/spec3.json" /v1/transfers *)
  let postTransfers _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p>
      
      @see "openapi/spec3.json" /v1/transfers *)
  let getTransfers ?created:_ ?destination:_ ?ending_before:_ ?expand:_
    ?limit:_ ?starting_after:_ ?transfer_group:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new shipping rate object.</p>
      
      @see "openapi/spec3.json" /v1/shipping_rates *)
  let postShippingRates _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of your shipping rates.</p>
      
      @see "openapi/spec3.json" /v1/shipping_rates *)
  let getShippingRates ?active:_ ?created:_ ?currency:_ ?ending_before:_
    ?expand:_ ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates an Issuing <code>Card</code> object.</p>
      
      @see "openapi/spec3.json" /v1/issuing/cards *)
  let postIssuingCards _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/cards *)
  let getIssuingCards ?cardholder:_ ?created:_ ?ending_before:_ ?exp_month:_
    ?exp_year:_ ?expand:_ ?last4:_ ?limit:_ ?personalization_design:_
    ?starting_after:_ ?status:_ ?type_:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Get a preview of a credit note without creating it.</p>
      
      @see "openapi/spec3.json" /v1/credit_notes/preview *)
  let getCreditNotesPreview ?amount:_ ?credit_amount:_ ?effective_at:_
    ?expand:_ ~invoice:_ ?lines:_ ?memo:_ ?metadata:_ ?out_of_band_amount:_
    ?reason:_ ?refund:_ ?refund_amount:_ ?shipping_cost:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.</p>
      
      @see "openapi/spec3.json" /v1/account_sessions *)
  let postAccountSessions _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/linked_accounts *)
  let getLinkedAccounts ?account_holder:_ ?ending_before:_ ?expand:_ ?limit:_
    ?session:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/financial_connections/accounts *)
  let getFinancialConnectionsAccounts ?account_holder:_ ?ending_before:_
    ?expand:_ ?limit:_ ?session:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Search for charges you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/charges/search *)
  let getChargesSearch ?expand:_ ?limit:_ ?page:_ ~query:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new test clock that can be attached to new customers and quotes.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks *)
  let postTestHelpersTestClocks _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of your test clocks.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks *)
  let getTestHelpersTestClocks ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a Tax <code>Transaction</code> from a calculation.</p>
      
      @see "openapi/spec3.json" /v1/tax/transactions/create_from_calculation *)
  let postTaxTransactionsCreateFromCalculation _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a payment method configuration</p>
      
      @see "openapi/spec3.json" /v1/payment_method_configurations *)
  let postPaymentMethodConfigurations _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>List payment method configurations</p>
      
      @see "openapi/spec3.json" /v1/payment_method_configurations *)
  let getPaymentMethodConfigurations ?application:_ ?ending_before:_
    ?expand:_ ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a VerificationSession object.</p>
      
      <p>After the VerificationSession is created, display a verification modal using the session <code>client_secret</code> or send your users to the session’s <code>url</code>.</p>
      
      <p>If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.</p>
      
      <p>Related guide: <a href="/docs/identity/verify-identity-documents">Verify your users’ identity documents</a></p>
      
      @see "openapi/spec3.json" /v1/identity/verification_sessions *)
  let postIdentityVerificationSessions _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of VerificationSessions</p>
      
      @see "openapi/spec3.json" /v1/identity/verification_sessions *)
  let getIdentityVerificationSessions ?client_reference_id:_ ?created:_
    ?ending_before:_ ?expand:_ ?limit:_ ?starting_after:_ ?status:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Lists all available Climate supplier objects.</p>
      
      @see "openapi/spec3.json" /v1/climate/suppliers *)
  let getClimateSuppliers ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
      
      <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
      
      @see "openapi/spec3.json" /v1/balance_transactions *)
  let getBalanceTransactions ?created:_ ?currency:_ ?ending_before:_
    ?expand:_ ?limit:_ ?payout:_ ?source:_ ?starting_after:_ ?type_:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates an Issuing <code>Dispute</code> object. Individual pieces of evidence within the <code>evidence</code> object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a> for more details about evidence requirements.</p>
      
      @see "openapi/spec3.json" /v1/issuing/disputes *)
  let postIssuingDisputes _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/disputes *)
  let getIssuingDisputes ?created:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ ?status:_ ?transaction:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a billing meter</p>
      
      @see "openapi/spec3.json" /v1/billing/meters *)
  let postBillingMeters _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieve a list of billing meters.</p>
      
      @see "openapi/spec3.json" /v1/billing/meters *)
  let getBillingMeters ?ending_before:_ ?expand:_ ?limit:_ ?starting_after:_
    ?status:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a customer session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.</p>
      
      @see "openapi/spec3.json" /v1/customer_sessions *)
  let postCustomerSessions _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Search for products you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/products/search *)
  let getProductsSearch ?expand:_ ?limit:_ ?page:_ ~query:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a ForwardingRequest object.</p>
      
      @see "openapi/spec3.json" /v1/forwarding/requests *)
  let postForwardingRequests _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Lists all ForwardingRequest objects.</p>
      
      @see "openapi/spec3.json" /v1/forwarding/requests *)
  let getForwardingRequests ?created:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.</p>
      
      @see "openapi/spec3.json" /v1/treasury/financial_accounts *)
  let postTreasuryFinancialAccounts _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of FinancialAccounts.</p>
      
      @see "openapi/spec3.json" /v1/treasury/financial_accounts *)
  let getTreasuryFinancialAccounts ?created:_ ?ending_before:_ ?expand:_
    ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a single-use token that represents a bank account’s details.
      You can use this token with any API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a <a href="#accounts">connected account</a> where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a> is <code>application</code>, which includes Custom accounts.</p>
      
      @see "openapi/spec3.json" /v1/tokens *)
  let postTokens _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new tax rate.</p>
      
      @see "openapi/spec3.json" /v1/tax_rates *)
  let postTaxRates _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p>
      
      @see "openapi/spec3.json" /v1/tax_rates *)
  let getTaxRates ?active:_ ?created:_ ?ending_before:_ ?expand:_
    ?inclusive:_ ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of scheduled query runs.</p>
      
      @see "openapi/spec3.json" /v1/sigma/scheduled_query_runs *)
  let getSigmaScheduledQueryRuns ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>A quote models prices and services for a customer. Default options for <code>header</code>, <code>description</code>, <code>footer</code>, and <code>expires_at</code> can be set in the dashboard via the <a href="https://dashboard.stripe.com/settings/billing/quote">quote template</a>.</p>
      
      @see "openapi/spec3.json" /v1/quotes *)
  let postQuotes _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of your quotes.</p>
      
      @see "openapi/spec3.json" /v1/quotes *)
  let getQuotes ?customer:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ ?status:_ ?test_clock:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new customer object.</p>
      
      @see "openapi/spec3.json" /v1/customers *)
  let postCustomers _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p>
      
      @see "openapi/spec3.json" /v1/customers *)
  let getCustomers ?created:_ ?email:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ ?test_clock:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p>
      
      @see "openapi/spec3.json" /v1/application_fees *)
  let getApplicationFees ?charge:_ ?created:_ ?ending_before:_ ?expand:_
    ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new source object.</p>
      
      @see "openapi/spec3.json" /v1/sources *)
  let postSources _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of SetupAttempts that associate with a provided SetupIntent.</p>
      
      @see "openapi/spec3.json" /v1/setup_attempts *)
  let getSetupAttempts ?created:_ ?ending_before:_ ?expand:_ ?limit:_
    ~setup_intent:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a PaymentIntent object.</p>
      
      <p>After the PaymentIntent is created, attach a payment method and <a href="/docs/api/payment_intents/confirm">confirm</a>
      to continue the payment. Learn more about <a href="/docs/payments/payment-intents">the available payment flows
      with the Payment Intents API</a>.</p>
      
      <p>When you use <code>confirm=true</code> during creation, it’s equivalent to creating
      and confirming the PaymentIntent in the same call. You can use any parameters
      available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when you supply
      <code>confirm=true</code>.</p>
      
      @see "openapi/spec3.json" /v1/payment_intents *)
  let postPaymentIntents _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of PaymentIntents.</p>
      
      @see "openapi/spec3.json" /v1/payment_intents *)
  let getPaymentIntents ?created:_ ?customer:_ ?ending_before:_ ?expand:_
    ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of Financial Connections <code>Transaction</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/financial_connections/transactions *)
  let getFinancialConnectionsTransactions ~account:_ ?ending_before:_
    ?expand:_ ?limit:_ ?starting_after:_ ?transacted_at:_
    ?transaction_refresh:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>A list of <a href="https://stripe.com/docs/tax/tax-categories">all tax codes available</a> to add to Products in order to allow specific tax calculations.</p>
      
      @see "openapi/spec3.json" /v1/tax_codes *)
  let getTaxCodes ?ending_before:_ ?expand:_ ?limit:_ ?starting_after:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new product object.</p>
      
      @see "openapi/spec3.json" /v1/products *)
  let postProducts _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
      
      @see "openapi/spec3.json" /v1/products *)
  let getProducts ?active:_ ?created:_ ?ending_before:_ ?expand:_ ?ids:_
    ?limit:_ ?shippable:_ ?starting_after:_ ?url:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a session of the customer portal.</p>
      
      @see "openapi/spec3.json" /v1/billing_portal/sessions *)
  let postBillingPortalSessions _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>This method is no longer recommended—use the <a href="/docs/api/payment_intents">Payment Intents API</a>
      to initiate a new payment instead. Confirmation of the PaymentIntent creates the <code>Charge</code>
      object used to request payment.</p>
      
      @see "openapi/spec3.json" /v1/charges *)
  let postCharges _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>
      
      @see "openapi/spec3.json" /v1/charges *)
  let getCharges ?created:_ ?customer:_ ?ending_before:_ ?expand:_ ?limit:_
    ?payment_intent:_ ?starting_after:_ ?transfer_group:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p>
      
      @see "openapi/spec3.json" /v1/radar/value_list_items *)
  let postRadarValueListItems _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/radar/value_list_items *)
  let getRadarValueListItems ?created:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ ?value:_ ~value_list:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a payment method domain.</p>
      
      @see "openapi/spec3.json" /v1/payment_method_domains *)
  let postPaymentMethodDomains _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Lists the details of existing payment method domains.</p>
      
      @see "openapi/spec3.json" /v1/payment_method_domains *)
  let getPaymentMethodDomains ?domain_name:_ ?enabled:_ ?ending_before:_
    ?expand:_ ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of ReceivedCredits.</p>
      
      @see "openapi/spec3.json" /v1/treasury/received_credits *)
  let getTreasuryReceivedCredits ?ending_before:_ ?expand:_
    ~financial_account:_ ?limit:_ ?linked_flows:_ ?starting_after:_ ?status:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates an OutboundPayment.</p>
      
      @see "openapi/spec3.json" /v1/treasury/outbound_payments *)
  let postTreasuryOutboundPayments _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of OutboundPayments sent from the specified FinancialAccount.</p>
      
      @see "openapi/spec3.json" /v1/treasury/outbound_payments *)
  let getTreasuryOutboundPayments ?created:_ ?customer:_ ?ending_before:_
    ?expand:_ ~financial_account:_ ?limit:_ ?starting_after:_ ?status:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new <code>Reader</code> object.</p>
      
      @see "openapi/spec3.json" /v1/terminal/readers *)
  let postTerminalReaders _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of <code>Reader</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/terminal/readers *)
  let getTerminalReaders ?device_type:_ ?ending_before:_ ?expand:_ ?limit:_
    ?location:_ ?serial_number:_ ?starting_after:_ ?status:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new account or customer <code>tax_id</code> object.</p>
      
      @see "openapi/spec3.json" /v1/tax_ids *)
  let postTaxIds _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of tax IDs.</p>
      
      @see "openapi/spec3.json" /v1/tax_ids *)
  let getTaxIds ?ending_before:_ ?expand:_ ?limit:_ ?owner:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new Tax <code>Registration</code> object.</p>
      
      @see "openapi/spec3.json" /v1/tax/registrations *)
  let postTaxRegistrations _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of Tax <code>Registration</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/tax/registrations *)
  let getTaxRegistrations ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ ?status:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a billing meter event</p>
      
      @see "openapi/spec3.json" /v1/billing/meter_events *)
  let postBillingMeterEvents _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a SetupIntent object.</p>
      
      <p>After you create the SetupIntent, attach a payment method and <a href="/docs/api/setup_intents/confirm">confirm</a>
      it to collect any required permissions to charge the payment method later.</p>
      
      @see "openapi/spec3.json" /v1/setup_intents *)
  let postSetupIntents _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of SetupIntents.</p>
      
      @see "openapi/spec3.json" /v1/setup_intents *)
  let getSetupIntents ?attach_to_self:_ ?created:_ ?customer:_
    ?ending_before:_ ?expand:_ ?limit:_ ?payment_method:_ ?starting_after:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users.
      To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>
      
      <p>If you’ve already collected information for your connected accounts, you <a href="/docs/connect/best-practices#onboarding">can prefill that information</a> when
      creating the account. Connect Onboarding won’t ask for the prefilled information during account onboarding.
      You can prefill any information on the account.</p>
      
      @see "openapi/spec3.json" /v1/accounts *)
  let postAccounts _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p>
      
      @see "openapi/spec3.json" /v1/accounts *)
  let getAccounts ?created:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Search for prices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/prices/search *)
  let getPricesSearch ?expand:_ ?limit:_ ?page:_ ~query:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>To upload a file to Stripe, you need to send a request of type <code>multipart/form-data</code>. Include the file you want to upload in the request, and the parameters for creating a file.</p>
      
      <p>All of Stripe’s officially supported Client libraries support sending <code>multipart/form-data</code>.</p>
      
      @see "openapi/spec3.json" /v1/files *)
  let postFiles _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of the files that your account has access to. Stripe sorts and returns the files by their creation dates, placing the most recently created files at the top.</p>
      
      @see "openapi/spec3.json" /v1/files *)
  let getFiles ?created:_ ?ending_before:_ ?expand:_ ?limit:_ ?purpose:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a full list of Report Types.</p>
      
      @see "openapi/spec3.json" /v1/reporting/report_types *)
  let getReportingReportTypes ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you <a href="#finalize_invoice">finalize</a> the invoice, which allows you to <a href="#pay_invoice">pay</a> or <a href="#send_invoice">send</a> the invoice to your customers.</p>
      
      @see "openapi/spec3.json" /v1/invoices *)
  let postInvoices _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>
      
      @see "openapi/spec3.json" /v1/invoices *)
  let getInvoices ?collection_method:_ ?created:_ ?customer:_ ?due_date:_
    ?ending_before:_ ?expand:_ ?limit:_ ?starting_after:_ ?status:_
    ?subscription:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Lists all Country Spec objects available in the API.</p>
      
      @see "openapi/spec3.json" /v1/country_specs *)
  let getCountrySpecs ?ending_before:_ ?expand:_ ?limit:_ ?starting_after:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Deletes a secret from the secret store by name and scope.</p>
      
      @see "openapi/spec3.json" /v1/apps/secrets/delete *)
  let postAppsSecretsDelete _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p>
      
      @see "openapi/spec3.json" /v1/account_links *)
  let postAccountLinks _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p>
      
      <p>Instead of creating a PaymentMethod directly, we recommend using the <a href="/docs/payments/accept-a-payment">PaymentIntents</a> API to accept a payment immediately or the <a href="/docs/payments/save-and-reuse">SetupIntent</a> API to collect payment method details ahead of a future payment.</p>
      
      @see "openapi/spec3.json" /v1/payment_methods *)
  let postPaymentMethods _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the <a href="/docs/api/payment_methods/customer_list">List a Customer’s PaymentMethods</a> API instead.</p>
      
      @see "openapi/spec3.json" /v1/payment_methods *)
  let getPaymentMethods ?customer:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ ?type_:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
      
      @see "openapi/spec3.json" /v1/financial_connections/sessions *)
  let postFinancialConnectionsSessions _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Reverses a ReceivedCredit and creates a CreditReversal object.</p>
      
      @see "openapi/spec3.json" /v1/treasury/credit_reversals *)
  let postTreasuryCreditReversals _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of CreditReversals.</p>
      
      @see "openapi/spec3.json" /v1/treasury/credit_reversals *)
  let getTreasuryCreditReversals ?ending_before:_ ?expand:_
    ~financial_account:_ ?limit:_ ?received_credit:_ ?starting_after:_
    ?status:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Top up the balance of an account</p>
      
      @see "openapi/spec3.json" /v1/topups *)
  let postTopups _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of top-ups.</p>
      
      @see "openapi/spec3.json" /v1/topups *)
  let getTopups ?amount:_ ?created:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ ?status:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new <code>Location</code> object.
      For further details, including which address fields are required in each country, see the <a href="/docs/terminal/fleet/locations">Manage locations</a> guide.</p>
      
      @see "openapi/spec3.json" /v1/terminal/locations *)
  let postTerminalLocations _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of <code>Location</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/terminal/locations *)
  let getTerminalLocations ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Search for invoices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/invoices/search *)
  let getInvoicesSearch ?expand:_ ?limit:_ ?page:_ ~query:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Partially or fully reverses a previously created <code>Transaction</code>.</p>
      
      @see "openapi/spec3.json" /v1/tax/transactions/create_reversal *)
  let postTaxTransactionsCreateReversal _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of early fraud warnings.</p>
      
      @see "openapi/spec3.json" /v1/radar/early_fraud_warnings *)
  let getRadarEarlyFraudWarnings ?charge:_ ?created:_ ?ending_before:_
    ?expand:_ ?limit:_ ?payment_intent:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>To send funds to your own bank account, create a new payout object. Your <a href="#balance">Stripe balance</a> must cover the payout amount. If it doesn’t, you receive an “Insufficient Funds” error.</p>
      
      <p>If your API key is in test mode, money won’t actually be sent, though every other action occurs as if you’re in live mode.</p>
      
      <p>If you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>
      
      @see "openapi/spec3.json" /v1/payouts *)
  let postPayouts _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.</p>
      
      @see "openapi/spec3.json" /v1/payouts *)
  let getPayouts ?arrival_date:_ ?created:_ ?destination:_ ?ending_before:_
    ?expand:_ ?limit:_ ?starting_after:_ ?status:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.</p>
      
      @see "openapi/spec3.json" /v1/promotion_codes *)
  let postPromotionCodes _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of your promotion codes.</p>
      
      @see "openapi/spec3.json" /v1/promotion_codes *)
  let getPromotionCodes ?active:_ ?code:_ ?coupon:_ ?created:_ ?customer:_
    ?ending_before:_ ?expand:_ ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a test mode Confirmation Token server side for your integration tests.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/confirmation_tokens *)
  let postTestHelpersConfirmationTokens _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p>
      
      @see "openapi/spec3.json" /v1/subscription_items *)
  let postSubscriptionItems _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of your subscription items for a given subscription.</p>
      
      @see "openapi/spec3.json" /v1/subscription_items *)
  let getSubscriptionItems ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ ~subscription:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>List all verification reports.</p>
      
      @see "openapi/spec3.json" /v1/identity/verification_reports *)
  let getIdentityVerificationReports ?client_reference_id:_ ?created:_
    ?ending_before:_ ?expand:_ ?limit:_ ?starting_after:_ ?type_:_
    ?verification_session:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces
      its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result
      in any combination of the following:</p>
      
      <ul>
      <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li>
      <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li>
      <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li>
      </ul>
      
      <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>
      
      <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code>
      or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
      
      @see "openapi/spec3.json" /v1/credit_notes *)
  let postCreditNotes _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of credit notes.</p>
      
      @see "openapi/spec3.json" /v1/credit_notes *)
  let getCreditNotes ?created:_ ?customer:_ ?ending_before:_ ?expand:_
    ?invoice:_ ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Lists all available Climate product objects.</p>
      
      @see "openapi/spec3.json" /v1/climate/products *)
  let getClimateProducts ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p>
      
      @param webhook_endpoint webhook_endpoint
      @see "openapi/spec3.json" /v1/webhook_endpoints/\{webhook_endpoint\} *)
  let deleteWebhookEndpointsWebhookEndpoint ~webhook_endpoint:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p>
      
      @param webhook_endpoint webhook_endpoint
      @see "openapi/spec3.json" /v1/webhook_endpoints/\{webhook_endpoint\} *)
  let postWebhookEndpointsWebhookEndpoint ~webhook_endpoint:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the webhook endpoint with the given ID.</p>
      
      @param webhook_endpoint webhook_endpoint
      @see "openapi/spec3.json" /v1/webhook_endpoints/\{webhook_endpoint\} *)
  let getWebhookEndpointsWebhookEndpoint ~webhook_endpoint:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Increment a test-mode Authorization.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations/\{authorization\}/increment *)
  let postTestHelpersIssuingAuthorizationsAuthorizationIncrement
    ~authorization:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\} *)
  let deleteCustomersCustomer ~customer:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>
      
      <p>This request accepts mostly the same arguments as the customer creation call.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\} *)
  let postCustomersCustomer ~customer:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a Customer object.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\} *)
  let getCustomersCustomer ~customer:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p>
      
      @param plan plan
      @see "openapi/spec3.json" /v1/plans/\{plan\} *)
  let deletePlansPlan ~plan:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p>
      
      @param plan plan
      @see "openapi/spec3.json" /v1/plans/\{plan\} *)
  let postPlansPlan ~plan:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the plan with the given ID.</p>
      
      @param plan plan
      @see "openapi/spec3.json" /v1/plans/\{plan\} *)
  let getPlansPlan ~plan:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>With <a href="/connect">Connect</a>, you can delete accounts you manage.</p>
      
      <p>Test-mode accounts can be deleted at any time.</p>
      
      <p>Live-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be deleted when all <a href="/api/balance/balanace_object">balances</a> are zero.</p>
      
      <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/settings/account">account information tab in your account settings</a> instead.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\} *)
  let deleteAccountsAccount ~account:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates a <a href="/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are
      left unchanged.</p>
      
      <p>For accounts where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a>
      is <code>application</code>, which includes Custom accounts, you can update any information on the account.</p>
      
      <p>For accounts where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a>
      is <code>stripe</code>, which includes Standard and Express accounts, you can update all information until you create
      an <a href="/api/account_links">Account Link</a> or <a href="/api/account_sessions">Account Session</a> to start Connect onboarding,
      after which some properties can no longer be updated.</p>
      
      <p>To update your own account, use the <a href="https://dashboard.stripe.com/settings/account">Dashboard</a>. Refer to our
      <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\} *)
  let postAccountsAccount ~account:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an account.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\} *)
  let getAccountsAccount ~account:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Cancels an InboundTransfer.</p>
      
      @param inbound_transfer inbound_transfer
      @see "openapi/spec3.json" /v1/treasury/inbound_transfers/\{inbound_transfer\}/cancel *)
  let postTreasuryInboundTransfersInboundTransferCancel ~inbound_transfer:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Deletes a <code>Configuration</code> object.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/terminal/configurations/\{configuration\} *)
  let deleteTerminalConfigurationsConfiguration ~configuration:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates a new <code>Configuration</code> object.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/terminal/configurations/\{configuration\} *)
  let postTerminalConfigurationsConfiguration ~configuration:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a <code>Configuration</code> object.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/terminal/configurations/\{configuration\} *)
  let getTerminalConfigurationsConfiguration ~configuration:_ ?expand:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of a Financial Connections <code>Session</code></p>
      
      @param session session
      @see "openapi/spec3.json" /v1/financial_connections/sessions/\{session\} *)
  let getFinancialConnectionsSessionsSession ~session:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Finalizes the quote.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/finalize *)
  let postQuotesQuoteFinalize ~quote:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to <code>Ready</code>.</p>
      
      @param test_clock test_clock
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks/\{test_clock\}/advance *)
  let postTestHelpersTestClocksTestClockAdvance ~test_clock:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>List source transactions for a given source.</p>
      
      @param source source
      @see "openapi/spec3.json" /v1/sources/\{source\}/source_transactions *)
  let getSourcesSourceSourceTransactions ~source:_ ?ending_before:_ ?expand:_
    ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\} *)
  let postChargesCharge ~charge:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\} *)
  let getChargesCharge ~charge:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates a payment link.</p>
      
      @param payment_link payment_link
      @see "openapi/spec3.json" /v1/payment_links/\{payment_link\} *)
  let postPaymentLinksPaymentLink ~payment_link:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieve a payment link.</p>
      
      @param payment_link payment_link
      @see "openapi/spec3.json" /v1/payment_links/\{payment_link\} *)
  let getPaymentLinksPaymentLink ~payment_link:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/received_credits/\{id\} *)
  let getTreasuryReceivedCreditsId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates a test mode created OutboundTransfer with tracking details. The OutboundTransfer must not be cancelable, and cannot be in the <code>canceled</code> or <code>failed</code> states.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_transfers/\{outbound_transfer\} *)
  let postTestHelpersTreasuryOutboundTransfersOutboundTransfer
    ~outbound_transfer:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates an existing subscription schedule.</p>
      
      @param schedule schedule
      @see "openapi/spec3.json" /v1/subscription_schedules/\{schedule\} *)
  let postSubscriptionSchedulesSchedule ~schedule:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p>
      
      @param schedule schedule
      @see "openapi/spec3.json" /v1/subscription_schedules/\{schedule\} *)
  let getSubscriptionSchedulesSchedule ~schedule:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates a VerificationSession object.</p>
      
      <p>When the session status is <code>requires_input</code>, you can use this method to update the
      verification check and options.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/identity/verification_sessions/\{session\} *)
  let postIdentityVerificationSessionsSession ~session:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of a VerificationSession that was previously created.</p>
      
      <p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid
      <code>client_secret</code> or <code>url</code> to allow re-submission.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/identity/verification_sessions/\{session\} *)
  let getIdentityVerificationSessionsSession ~session:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p>
      
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/payment_methods/\{payment_method\} *)
  let postPaymentMethodsPaymentMethod ~payment_method:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use <a href="/docs/api/payment_methods/customer">Retrieve a Customer’s PaymentMethods</a></p>
      
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/payment_methods/\{payment_method\} *)
  let getPaymentMethodsPaymentMethod ~payment_method:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a Session object.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/checkout/sessions/\{session\} *)
  let getCheckoutSessionsSession ~session:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Initiates a setup intent flow on a Reader.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/process_setup_intent *)
  let postTerminalReadersReaderProcessSetupIntent ~reader:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p>
      
      @param value_list value_list
      @see "openapi/spec3.json" /v1/radar/value_lists/\{value_list\} *)
  let deleteRadarValueListsValueList ~value_list:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p>
      
      @param value_list value_list
      @see "openapi/spec3.json" /v1/radar/value_lists/\{value_list\} *)
  let postRadarValueListsValueList ~value_list:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a <code>ValueList</code> object.</p>
      
      @param value_list value_list
      @see "openapi/spec3.json" /v1/radar/value_lists/\{value_list\} *)
  let getRadarValueListsValueList ~value_list:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>
      
      <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/disputes/\{dispute\} *)
  let postDisputesDispute ~dispute:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the dispute with the given ID.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/disputes/\{dispute\} *)
  let getDisputesDispute ~dispute:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a physical bundle object.</p>
      
      @param physical_bundle physical_bundle
      @see "openapi/spec3.json" /v1/issuing/physical_bundles/\{physical_bundle\} *)
  let getIssuingPhysicalBundlesPhysicalBundle ~physical_bundle:_ ?expand:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list</p>
      
      @param credit_reversal credit_reversal
      @see "openapi/spec3.json" /v1/treasury/credit_reversals/\{credit_reversal\} *)
  let getTreasuryCreditReversalsCreditReversal ~credit_reversal:_ ?expand:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the line items of a committed standalone transaction as a collection.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/tax/transactions/\{transaction\}/line_items *)
  let getTaxTransactionsTransactionLineItems ~transaction:_ ?ending_before:_
    ?expand:_ ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>
      
      <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/send *)
  let postInvoicesInvoiceSend ~invoice:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Deactivates a billing meter</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\}/deactivate *)
  let postBillingMetersIdDeactivate ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>rejected</code>.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/test_helpers/issuing/personalization_designs/\{personalization_design\}/reject *)
  let postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject
    ~personalization_design:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Verifies microdeposits on a SetupIntent object.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\}/verify_microdeposits *)
  let postSetupIntentsIntentVerifyMicrodeposits ~intent:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Changes the settings on a customer’s cash balance.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cash_balance *)
  let postCustomersCustomerCashBalance ~customer:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a customer’s cash balance.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cash_balance *)
  let getCustomersCustomerCashBalance ~customer:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates properties on a PaymentIntent object without confirming.</p>
      
      <p>Depending on which properties you update, you might need to confirm the
      PaymentIntent again. For example, updating the <code>payment_method</code>
      always requires you to confirm the PaymentIntent again. If you prefer to
      update and confirm at the same time, we recommend updating properties through
      the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\} *)
  let postPaymentIntentsIntent ~intent:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of a PaymentIntent that has previously been created. </p>
      
      <p>You can retrieve a PaymentIntent client-side using a publishable key when the <code>client_secret</code> is in the query string. </p>
      
      <p>If you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\} *)
  let getPaymentIntentsIntent ~intent:_ ?client_secret:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a TransactionEntry object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/transaction_entries/\{id\} *)
  let getTreasuryTransactionEntriesId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p>
      
      @param invoiceitem invoiceitem
      @see "openapi/spec3.json" /v1/invoiceitems/\{invoiceitem\} *)
  let deleteInvoiceitemsInvoiceitem ~invoiceitem:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p>
      
      @param invoiceitem invoiceitem
      @see "openapi/spec3.json" /v1/invoiceitems/\{invoiceitem\} *)
  let postInvoiceitemsInvoiceitem ~invoiceitem:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the invoice item with the given ID.</p>
      
      @param invoiceitem invoiceitem
      @see "openapi/spec3.json" /v1/invoiceitems/\{invoiceitem\} *)
  let getInvoiceitemsInvoiceitem ~invoiceitem:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Create an incoming testmode bank transfer</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/test_helpers/customers/\{customer\}/fund_cash_balance *)
  let postTestHelpersCustomersCustomerFundCashBalance ~customer:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the specified order by setting the values of the parameters passed.</p>
      
      @param order Unique identifier of the order.
      @see "openapi/spec3.json" /v1/climate/orders/\{order\} *)
  let postClimateOrdersOrder ~order:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of a Climate order object with the given ID.</p>
      
      @param order Unique identifier of the order.
      @see "openapi/spec3.json" /v1/climate/orders/\{order\} *)
  let getClimateOrdersOrder ~order:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer, new
      funding instructions will be created. If funding instructions have already been created for a given customer, the same
      funding instructions will be retrieved. In other words, we will return the same funding instructions each time.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/funding_instructions *)
  let postCustomersCustomerFundingInstructions ~customer:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you don’t provide. This request only accepts the metadata as arguments.</p>
      
      @param payout payout
      @see "openapi/spec3.json" /v1/payouts/\{payout\} *)
  let postPayoutsPayout ~payout:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.</p>
      
      @param payout payout
      @see "openapi/spec3.json" /v1/payouts/\{payout\} *)
  let getPayoutsPayout ~payout:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new person.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people *)
  let postAccountsAccountPeople ~account:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people *)
  let getAccountsAccountPeople ~account:_ ?ending_before:_ ?expand:_ ?limit:_
    ?relationship:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the details of a FinancialAccount.</p>
      
      @param financial_account financial_account
      @see "openapi/spec3.json" /v1/treasury/financial_accounts/\{financial_account\} *)
  let postTreasuryFinancialAccountsFinancialAccount ~financial_account:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of a FinancialAccount.</p>
      
      @param financial_account financial_account
      @see "openapi/spec3.json" /v1/treasury/financial_accounts/\{financial_account\} *)
  let getTreasuryFinancialAccountsFinancialAccount ~financial_account:_
    ?expand:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Expire a refund with a status of <code>requires_action</code>.</p>
      
      @param refund refund
      @see "openapi/spec3.json" /v1/test_helpers/refunds/\{refund\}/expire *)
  let postTestHelpersRefundsRefundExpire ~refund:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an scheduled query run.</p>
      
      @param scheduled_query_run scheduled_query_run
      @see "openapi/spec3.json" /v1/sigma/scheduled_query_runs/\{scheduled_query_run\} *)
  let getSigmaScheduledQueryRunsScheduledQueryRun ~scheduled_query_run:_
    ?expand:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/refresh *)
  let postFinancialConnectionsAccountsAccountRefresh ~account:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Confirm that your customer intends to pay with current or provided
      payment method. Upon confirmation, the PaymentIntent will attempt to initiate
      a payment.
      If the selected payment method requires additional authentication steps, the
      PaymentIntent will transition to the <code>requires_action</code> status and
      suggest additional actions via <code>next_action</code>. If payment fails,
      the PaymentIntent transitions to the <code>requires_payment_method</code> status or the
      <code>canceled</code> status if the confirmation limit is reached. If
      payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
      status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).
      If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
      using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
      and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
      After <code>next_action</code>s are handled by the client, no additional
      confirmation is required to complete the payment.
      If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
      initiated using a secret key.
      If any actions are required for the payment, the PaymentIntent will
      return to the <code>requires_confirmation</code> state
      after those actions are completed. Your server needs to then
      explicitly re-confirm the PaymentIntent to initiate the next payment
      attempt.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/confirm *)
  let postPaymentIntentsIntentConfirm ~intent:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates a configuration that describes the functionality of the customer portal.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/billing_portal/configurations/\{configuration\} *)
  let postBillingPortalConfigurationsConfiguration ~configuration:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a configuration that describes the functionality of the customer portal.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/billing_portal/configurations/\{configuration\} *)
  let getBillingPortalConfigurationsConfiguration ~configuration:_ ?expand:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Deletes an existing account or customer <code>tax_id</code> object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax_ids/\{id\} *)
  let deleteTaxIdsId ~id:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves an account or customer <code>tax_id</code> object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax_ids/\{id\} *)
  let getTaxIdsId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>A quote models prices and services for a customer.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\} *)
  let postQuotesQuote ~quote:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the quote with the given ID.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\} *)
  let getQuotesQuote ~quote:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/credit_notes/\{id\}/void *)
  let postCreditNotesIdVoid ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>\[Deprecated\] Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow. 
      This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to approve an authorization</a>.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/issuing/authorizations/\{authorization\}/approve *)
  let postIssuingAuthorizationsAuthorizationApprove ~authorization:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a ForwardingRequest object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/forwarding/requests/\{id\} *)
  let getForwardingRequestsId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an early fraud warning that has previously been created. </p>
      
      <p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
      
      @param early_fraud_warning early_fraud_warning
      @see "openapi/spec3.json" /v1/radar/early_fraud_warnings/\{early_fraud_warning\} *)
  let getRadarEarlyFraudWarningsEarlyFraudWarning ~early_fraud_warning:_
    ?expand:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates a test mode created OutboundPayment with tracking details. The OutboundPayment must not be cancelable, and cannot be in the <code>canceled</code> or <code>failed</code> states.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_payments/\{id\} *)
  let postTestHelpersTreasuryOutboundPaymentsId ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/subscription_items/\{item\} *)
  let deleteSubscriptionItemsItem ~item:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the plan or quantity of an item on a current subscription.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/subscription_items/\{item\} *)
  let postSubscriptionItemsItem ~item:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the subscription item with the given ID.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/subscription_items/\{item\} *)
  let getSubscriptionItemsItem ~item:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>When you create a new refund, you must specify either a Charge or a PaymentIntent object.</p>
      
      <p>This action refunds a previously created charge that’s not refunded yet.
      Funds are refunded to the credit or debit card that’s originally charged.</p>
      
      <p>You can optionally refund only part of a charge.
      You can repeat this until the entire charge is refunded.</p>
      
      <p>After you entirely refund a charge, you can’t refund it again.
      This method raises an error when it’s called on an already-refunded charge,
      or when you attempt to refund more money than is left on a charge.</p>
      
      @param charge The identifier of the charge to refund.
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refund *)
  let postChargesChargeRefund ~charge:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a>.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/issuing/disputes/\{dispute\}/submit *)
  let postIssuingDisputesDisputeSubmit ~dispute:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>When you create a new reversal, you must specify a transfer to create it on.</p>
      
      <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>
      
      <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/transfers/\{id\}/reversals *)
  let postTransfersIdReversals ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/transfers/\{id\}/reversals *)
  let getTransfersIdReversals ~id:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a Country Spec for a given Country code.</p>
      
      @param country country
      @see "openapi/spec3.json" /v1/country_specs/\{country\} *)
  let getCountrySpecsCountry ~country:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/linked_accounts/\{account\}/refresh *)
  let postLinkedAccountsAccountRefresh ~account:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>returned</code>.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/test_helpers/issuing/cards/\{card\}/shipping/return *)
  let postTestHelpersIssuingCardsCardShippingReturn ~card:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>With <a href="/connect">Connect</a>, you can reject accounts that you have flagged as suspicious.</p>
      
      <p>Only accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/reject *)
  let postAccountsAccountReject ~account:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/lines *)
  let getInvoicesInvoiceLines ~invoice:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an existing Transaction.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/transactions/\{id\} *)
  let getTreasuryTransactionsId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Capture a test-mode authorization.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations/\{authorization\}/capture *)
  let postTestHelpersIssuingAuthorizationsAuthorizationCapture
    ~authorization:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Reverses a payout by debiting the destination bank account. At this time, you can only reverse payouts for connected accounts to US bank accounts. If the payout is manual and in the <code>pending</code> status, use <code>/v1/payouts/:id/cancel</code> instead.</p>
      
      <p>By requesting a reversal through <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account authorizes the debit on the bank account and that no other authorization is required.</p>
      
      @param payout payout
      @see "openapi/spec3.json" /v1/payouts/\{payout\}/reverse *)
  let postPayoutsPayoutReverse ~payout:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Removes the currently applied discount on a subscription.</p>
      
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription_exposed_id\}/discount *)
  let deleteSubscriptionsSubscriptionExposedIdDiscount
    ~subscription_exposed_id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new person.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons *)
  let postAccountsAccountPersons ~account:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons *)
  let getAccountsAccountPersons ~account:_ ?ending_before:_ ?expand:_
    ?limit:_ ?relationship:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Cancels the quote.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/cancel *)
  let postQuotesQuoteCancel ~quote:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates an existing tax rate.</p>
      
      @param tax_rate tax_rate
      @see "openapi/spec3.json" /v1/tax_rates/\{tax_rate\} *)
  let postTaxRatesTaxRate ~tax_rate:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a tax rate with the given ID</p>
      
      @param tax_rate tax_rate
      @see "openapi/spec3.json" /v1/tax_rates/\{tax_rate\} *)
  let getTaxRatesTaxRate ~tax_rate:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>
      
      @param source source
      @see "openapi/spec3.json" /v1/sources/\{source\} *)
  let postSourcesSource ~source:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>
      
      @param source source
      @see "openapi/spec3.json" /v1/sources/\{source\} *)
  let getSourcesSource ~source:_ ?client_secret:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Unsubscribes from periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/unsubscribe *)
  let postFinancialConnectionsAccountsAccountUnsubscribe ~account:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Verifies microdeposits on a PaymentIntent object.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/verify_microdeposits *)
  let postPaymentIntentsIntentVerifyMicrodeposits ~intent:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>An OutboundTransfer can be canceled if the funds have not yet been paid out.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/treasury/outbound_transfers/\{outbound_transfer\}/cancel *)
  let postTreasuryOutboundTransfersOutboundTransferCancel
    ~outbound_transfer:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Transitions a test mode created OutboundPayment to the <code>posted</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_payments/\{id\}/post *)
  let postTestHelpersTreasuryOutboundPaymentsIdPost ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>
      
      <p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>
      
      <p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>
      
      <p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
      
      @param subscription_item subscription_item
      @see "openapi/spec3.json" /v1/subscription_items/\{subscription_item\}/usage_records *)
  let postSubscriptionItemsSubscriptionItemUsageRecords ~subscription_item:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves an existing VerificationReport</p>
      
      @param report report
      @see "openapi/spec3.json" /v1/identity/verification_reports/\{report\} *)
  let getIdentityVerificationReportsReport ~report:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Some payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren’t satisfied when the domain was created, the payment method will be inactive on the domain.
      The payment method doesn’t appear in Elements for this domain until it is active.</p>
      
      <p>To activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.</p>
      
      <p>Related guides: <a href="/docs/payments/payment-methods/pmd-registration">Payment method domains</a>.</p>
      
      @param payment_method_domain payment_method_domain
      @see "openapi/spec3.json" /v1/payment_method_domains/\{payment_method_domain\}/validate *)
  let postPaymentMethodDomainsPaymentMethodDomainValidate
    ~payment_method_domain:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Cancels the current reader action.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/cancel_action *)
  let postTerminalReadersReaderCancelAction ~reader:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/radar/value_list_items/\{item\} *)
  let deleteRadarValueListItemsItem ~item:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a <code>ValueListItem</code> object.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/radar/value_list_items/\{item\} *)
  let getRadarValueListItemsItem ~item:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{id\}/refund *)
  let postApplicationFeesIdRefund ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates a card personalization object.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/issuing/personalization_designs/\{personalization_design\} *)
  let postIssuingPersonalizationDesignsPersonalizationDesign
    ~personalization_design:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a personalization design object.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/issuing/personalization_designs/\{personalization_design\} *)
  let getIssuingPersonalizationDesignsPersonalizationDesign
    ~personalization_design:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
      
      <p>If the card’s owner has no default card, then the new card will become the default.
      However, if the owner already has a default, then it will not change.
      To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards *)
  let postCustomersCustomerCards ~customer:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>You can see a list of the cards belonging to a customer.
      Note that the 10 most recent sources are always available on the <code>Customer</code> object.
      If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards *)
  let getCustomersCustomerCards ~customer:_ ?ending_before:_ ?expand:_
    ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with <code>type=good</code> is only possible if it has no SKUs associated with it.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/products/\{id\} *)
  let deleteProductsId ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/products/\{id\} *)
  let postProductsId ~id:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/products/\{id\} *)
  let getProductsId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>active</code>.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/test_helpers/issuing/personalization_designs/\{personalization_design\}/activate *)
  let postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate
    ~personalization_design:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>You can cancel a SetupIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>
      
      <p>After you cancel it, setup is abandoned and any operations on the SetupIntent fail with an error.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\}/cancel *)
  let postSetupIntentsIntentCancel ~intent:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p>
      
      @param coupon coupon
      @see "openapi/spec3.json" /v1/coupons/\{coupon\} *)
  let deleteCouponsCoupon ~coupon:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p>
      
      @param coupon coupon
      @see "openapi/spec3.json" /v1/coupons/\{coupon\} *)
  let postCouponsCoupon ~coupon:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the coupon with the given ID.</p>
      
      @param coupon coupon
      @see "openapi/spec3.json" /v1/coupons/\{coupon\} *)
  let getCouponsCoupon ~coupon:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/mark_uncollectible *)
  let postInvoicesInvoiceMarkUncollectible ~invoice:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/received_debits/\{id\} *)
  let getTreasuryReceivedDebitsId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Sets reader display to show cart details.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/set_reader_display *)
  let postTerminalReadersReaderSetReaderDisplay ~reader:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact
      the VerificationSession and all objects related to it, including VerificationReports, Events,
      request logs, etc.</p>
      
      <p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code>
      <a href="/docs/identity/how-sessions-work">status</a>. Redacting a VerificationSession in <code>requires_action</code>
      state will automatically cancel it.</p>
      
      <p>The redaction process may take up to four days. When the redaction process is in progress, the
      VerificationSession’s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is
      finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event
      will be emitted.</p>
      
      <p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the
      fields that contain personal data will be replaced by the string <code>\[redacted\]</code> or a similar
      placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or
      used for any purpose.</p>
      
      <p><a href="/docs/identity/verification-sessions#redact">Learn more</a>.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/identity/verification_sessions/\{session\}/redact *)
  let postIdentityVerificationSessionsSessionRedact ~session:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the refund that you specify by setting the values of the passed parameters. Any parameters that you don’t provide remain unchanged.</p>
      
      <p>This request only accepts <code>metadata</code> as an argument.</p>
      
      @param refund refund
      @see "openapi/spec3.json" /v1/refunds/\{refund\} *)
  let postRefundsRefund ~refund:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an existing refund.</p>
      
      @param refund refund
      @see "openapi/spec3.json" /v1/refunds/\{refund\} *)
  let getRefundsRefund ~refund:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/checkout/sessions/\{session\}/line_items *)
  let getCheckoutSessionsSessionLineItems ~session:_ ?ending_before:_
    ?expand:_ ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Transitions a test mode created OutboundTransfer to the <code>posted</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_transfers/\{outbound_transfer\}/post *)
  let postTestHelpersTreasuryOutboundTransfersOutboundTransferPost
    ~outbound_transfer:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>
      
      @param schedule schedule
      @see "openapi/spec3.json" /v1/subscription_schedules/\{schedule\}/release *)
  let postSubscriptionSchedulesScheduleRelease ~schedule:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param credit_note credit_note
      @see "openapi/spec3.json" /v1/credit_notes/\{credit_note\}/lines *)
  let getCreditNotesCreditNoteLines ~credit_note:_ ?ending_before:_ ?expand:_
    ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.</p>
      
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/payment_methods/\{payment_method\}/detach *)
  let postPaymentMethodsPaymentMethodDetach ~payment_method:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a DebitReversal object.</p>
      
      @param debit_reversal debit_reversal
      @see "openapi/spec3.json" /v1/treasury/debit_reversals/\{debit_reversal\} *)
  let getTreasuryDebitReversalsDebitReversal ~debit_reversal:_ ?expand:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax_codes/\{id\} *)
  let getTaxCodesId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/disconnect *)
  let postFinancialConnectionsAccountsAccountDisconnect ~account:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.</p>
      
      @param promotion_code promotion_code
      @see "openapi/spec3.json" /v1/promotion_codes/\{promotion_code\} *)
  let postPromotionCodesPromotionCode ~promotion_code:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing <code>code</code> use <a href="/docs/api/promotion_codes/list">list</a> with the desired <code>code</code>.</p>
      
      @param promotion_code promotion_code
      @see "openapi/spec3.json" /v1/promotion_codes/\{promotion_code\} *)
  let getPromotionCodesPromotionCode ~promotion_code:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates an existing shipping rate object.</p>
      
      @param shipping_rate_token shipping_rate_token
      @see "openapi/spec3.json" /v1/shipping_rates/\{shipping_rate_token\} *)
  let postShippingRatesShippingRateToken ~shipping_rate_token:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns the shipping rate object with the given ID.</p>
      
      @param shipping_rate_token shipping_rate_token
      @see "openapi/spec3.json" /v1/shipping_rates/\{shipping_rate_token\} *)
  let getShippingRatesShippingRateToken ~shipping_rate_token:_ ?expand:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Reactivates a billing meter</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\}/reactivate *)
  let postBillingMetersIdReactivate ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>You can cancel a PaymentIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code> or, <a href="/docs/payments/intents">in rare cases</a>, <code>processing</code>. </p>
      
      <p>After it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a <code>status</code> of <code>requires_capture</code>, the remaining <code>amount_capturable</code> is automatically refunded. </p>
      
      <p>You can’t cancel the PaymentIntent for a Checkout Session. <a href="/docs/api/checkout/sessions/expire">Expire the Checkout Session</a> instead.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/cancel *)
  let postPaymentIntentsIntentCancel ~intent:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/outbound_payments/\{id\} *)
  let getTreasuryOutboundPaymentsId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of a Financial Connections <code>Transaction</code></p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/financial_connections/transactions/\{transaction\} *)
  let getFinancialConnectionsTransactionsTransaction ~transaction:_ ?expand:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Download the PDF for a finalized quote. Explanation for special handling can be found <a href="https://docs.corp.stripe.com/quotes/overview#quote_pdf">here</a></p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/pdf *)
  let getQuotesQuotePdf ~quote:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/dispute *)
  let postChargesChargeDispute ~charge:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieve a dispute for a specified charge.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/dispute *)
  let getChargesChargeDispute ~charge:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Marks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the <code>succeeded</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/inbound_transfers/\{id\}/return *)
  let postTestHelpersTreasuryInboundTransfersIdReturn ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves an existing ConfirmationToken object</p>
      
      @param confirmation_token confirmation_token
      @see "openapi/spec3.json" /v1/confirmation_tokens/\{confirmation_token\} *)
  let getConfirmationTokensConfirmationToken ~confirmation_token:_ ?expand:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Verify a given source.</p>
      
      @param source source
      @see "openapi/spec3.json" /v1/sources/\{source\}/verify *)
  let postSourcesSourceVerify ~source:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Cancels a top-up. Only pending top-ups can be canceled.</p>
      
      @param topup topup
      @see "openapi/spec3.json" /v1/topups/\{topup\}/cancel *)
  let postTopupsTopupCancel ~topup:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new subscription on an existing customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions *)
  let postCustomersCustomerSubscriptions ~customer:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions *)
  let getCustomersCustomerSubscriptions ~customer:_ ?ending_before:_
    ?expand:_ ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/linked_accounts/\{account\}/disconnect *)
  let postLinkedAccountsAccountDisconnect ~account:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>delivered</code>.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/test_helpers/issuing/cards/\{card\}/shipping/deliver *)
  let postTestHelpersIssuingCardsCardShippingDeliver ~card:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>
      
      @param review review
      @see "openapi/spec3.json" /v1/reviews/\{review\}/approve *)
  let postReviewsReviewApprove ~review:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Delete an apple pay domain.</p>
      
      @param domain domain
      @see "openapi/spec3.json" /v1/apple_pay/domains/\{domain\} *)
  let deleteApplePayDomainsDomain ~domain:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieve an apple pay domain.</p>
      
      @param domain domain
      @see "openapi/spec3.json" /v1/apple_pay/domains/\{domain\} *)
  let getApplePayDomainsDomain ~domain:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a href="#void_invoice">voided</a>.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\} *)
  let deleteInvoicesInvoice ~invoice:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>,
      monetary values, as well as <code>collection_method</code>, become uneditable.</p>
      
      <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
      sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass
      <code>auto_advance=false</code>.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\} *)
  let postInvoicesInvoice ~invoice:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the invoice with the given ID.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\} *)
  let getInvoicesInvoice ~invoice:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Expire a test-mode Authorization.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations/\{authorization\}/expire *)
  let postTestHelpersIssuingAuthorizationsAuthorizationExpire
    ~authorization:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of a Financial Connections <code>Session</code></p>
      
      @param session session
      @see "openapi/spec3.json" /v1/link_account_sessions/\{session\} *)
  let getLinkAccountSessionsSession ~session:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of a Report Type. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
      
      @param report_type report_type
      @see "openapi/spec3.json" /v1/reporting/report_types/\{report_type\} *)
  let getReportingReportTypesReportType ~report_type:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Invalidates a short-lived API key for a given resource.</p>
      
      @param key key
      @see "openapi/spec3.json" /v1/ephemeral_keys/\{key\} *)
  let deleteEphemeralKeysKey ~key:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the token with the given ID.</p>
      
      @param token token
      @see "openapi/spec3.json" /v1/tokens/\{token\} *)
  let getTokensToken ~token:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Initiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become <code>active</code>, and if payment fails the subscription will be <code>past_due</code>. The resumption invoice will void automatically if not paid by the expiration date.</p>
      
      @param subscription subscription
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription\}/resume *)
  let postSubscriptionsSubscriptionResume ~subscription:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an existing InboundTransfer.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/inbound_transfers/\{id\} *)
  let getTreasuryInboundTransfersId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param cardholder cardholder
      @see "openapi/spec3.json" /v1/issuing/cardholders/\{cardholder\} *)
  let postIssuingCardholdersCardholder ~cardholder:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves an Issuing <code>Cardholder</code> object.</p>
      
      @param cardholder cardholder
      @see "openapi/spec3.json" /v1/issuing/cardholders/\{cardholder\} *)
  let getIssuingCardholdersCardholder ~cardholder:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>When retrieving a quote, there is an includable <a href="https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items"><strong>computed.upfront.line_items</strong></a> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/computed_upfront_line_items *)
  let getQuotesQuoteComputedUpfrontLineItems ~quote:_ ?ending_before:_
    ?expand:_ ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of a Climate product with the given ID.</p>
      
      @param product product
      @see "openapi/spec3.json" /v1/climate/products/\{product\} *)
  let getClimateProductsProduct ~product:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Deletes a test clock.</p>
      
      @param test_clock test_clock
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks/\{test_clock\} *)
  let deleteTestHelpersTestClocksTestClock ~test_clock:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a test clock.</p>
      
      @param test_clock test_clock
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks/\{test_clock\} *)
  let getTestHelpersTestClocksTestClock ~test_clock:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
      
      <p>If the card’s owner has no default card, then the new card will become the default.
      However, if the owner already has a default, then it will not change.
      To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources *)
  let postCustomersCustomerSources ~customer:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>List sources for a specified customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources *)
  let getCustomersCustomerSources ~customer:_ ?ending_before:_ ?expand:_
    ?limit:_ ?object_:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Initiates a payment flow on a Reader.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/process_payment_intent *)
  let postTerminalReadersReaderProcessPaymentIntent ~reader:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Transitions a test mode created OutboundPayment to the <code>returned</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_payments/\{id\}/return *)
  let postTestHelpersTreasuryOutboundPaymentsIdReturn ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a single-use login link for a connected account to access the Express Dashboard.</p>
      
      <p><strong>You can only create login links for accounts that use the <a href="/connect/express-dashboard">Express Dashboard</a> and are connected to your platform</strong>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/login_links *)
  let postAccountsAccountLoginLinks ~account:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a Tax <code>Transaction</code> object.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/tax/transactions/\{transaction\} *)
  let getTaxTransactionsTransaction ~transaction:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an existing file object. After you supply a unique file ID, Stripe returns the corresponding file object. Learn how to <a href="/docs/file-upload#download-file-contents">access file contents</a>.</p>
      
      @param file file
      @see "openapi/spec3.json" /v1/files/\{file\} *)
  let getFilesFile ~file:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a product_feature, which represents a feature attachment to a product</p>
      
      @param product product
      @see "openapi/spec3.json" /v1/products/\{product\}/features *)
  let postProductsProductFeatures ~product:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieve a list of features for a product</p>
      
      @param product product
      @see "openapi/spec3.json" /v1/products/\{product\}/features *)
  let getProductsProductFeatures ~product:_ ?ending_before:_ ?expand:_
    ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>inactive</code>.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/test_helpers/issuing/personalization_designs/\{personalization_design\}/deactivate *)
  let postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate
    ~personalization_design:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Confirm that your customer intends to set up the current or
      provided payment method. For example, you would confirm a SetupIntent
      when a customer hits the “Save” button on a payment method management
      page on your website.</p>
      
      <p>If the selected payment method does not require any additional
      steps from the customer, the SetupIntent will transition to the
      <code>succeeded</code> status.</p>
      
      <p>Otherwise, it will transition to the <code>requires_action</code> status and
      suggest additional actions via <code>next_action</code>. If setup fails,
      the SetupIntent will transition to the
      <code>requires_payment_method</code> status or the <code>canceled</code> status if the
      confirmation limit is reached.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\}/confirm *)
  let postSetupIntentsIntentConfirm ~intent:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates a billing meter</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\} *)
  let postBillingMetersId ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a billing meter given an ID</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\} *)
  let getBillingMetersId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/pay *)
  let postInvoicesInvoicePay ~invoice:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Attempts to update the specified Issuing <code>Token</code> object to the status specified.</p>
      
      @param token token
      @see "openapi/spec3.json" /v1/issuing/tokens/\{token\} *)
  let postIssuingTokensToken ~token:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves an Issuing <code>Token</code> object.</p>
      
      @param token token
      @see "openapi/spec3.json" /v1/issuing/tokens/\{token\} *)
  let getIssuingTokensToken ~token:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Cancels a refund with a status of <code>requires_action</code>.</p>
      
      <p>You can’t cancel refunds in other states. Only refunds for payment methods that require customer action can enter the <code>requires_action</code> state.</p>
      
      @param refund refund
      @see "openapi/spec3.json" /v1/refunds/\{refund\}/cancel *)
  let postRefundsRefundCancel ~refund:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates an existing credit note.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/credit_notes/\{id\} *)
  let postCreditNotesId ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the credit note object with the given identifier.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/credit_notes/\{id\} *)
  let getCreditNotesId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Transitions a test mode created OutboundTransfer to the <code>returned</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_transfers/\{outbound_transfer\}/return *)
  let postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn
    ~outbound_transfer:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieve an active entitlement</p>
      
      @param id The ID of the entitlement.
      @see "openapi/spec3.json" /v1/entitlements/active_entitlements/\{id\} *)
  let getEntitlementsActiveEntitlementsId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/capabilities *)
  let getAccountsAccountCapabilities ~account:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Lists all owners for a given <code>Account</code></p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/owners *)
  let getFinancialConnectionsAccountsAccountOwners ~account:_
    ?ending_before:_ ?expand:_ ?limit:_ ~ownership:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>
      
      <p>Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.</p>
      
      <p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/capture *)
  let postPaymentIntentsIntentCapture ~intent:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the balance transaction with the given ID.</p>
      
      <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/balance_transactions/\{id\} *)
  let getBalanceTransactionsId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Refund a test-mode Transaction.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/test_helpers/issuing/transactions/\{transaction\}/refund *)
  let postTestHelpersIssuingTransactionsTransactionRefund ~transaction:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Removes the currently applied discount on a customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/discount *)
  let deleteCustomersCustomerDiscount ~customer:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/discount *)
  let getCustomersCustomerDiscount ~customer:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/issuing/authorizations/\{authorization\} *)
  let postIssuingAuthorizationsAuthorization ~authorization:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves an Issuing <code>Authorization</code> object.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/issuing/authorizations/\{authorization\} *)
  let getIssuingAuthorizationsAuthorization ~authorization:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Cancel an OutboundPayment.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/outbound_payments/\{id\}/cancel *)
  let postTreasuryOutboundPaymentsIdCancel ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing in an empty string.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/issuing/disputes/\{dispute\} *)
  let postIssuingDisputesDispute ~dispute:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves an Issuing <code>Dispute</code> object.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/issuing/disputes/\{dispute\} *)
  let getIssuingDisputesDispute ~dispute:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Deletes a <code>Location</code> object.</p>
      
      @param location location
      @see "openapi/spec3.json" /v1/terminal/locations/\{location\} *)
  let deleteTerminalLocationsLocation ~location:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param location location
      @see "openapi/spec3.json" /v1/terminal/locations/\{location\} *)
  let postTerminalLocationsLocation ~location:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a <code>Location</code> object.</p>
      
      @param location location
      @see "openapi/spec3.json" /v1/terminal/locations/\{location\} *)
  let getTerminalLocationsLocation ~location:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Transitions a test mode created InboundTransfer to the <code>succeeded</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/inbound_transfers/\{id\}/succeed *)
  let postTestHelpersTreasuryInboundTransfersIdSucceed ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/dispute/close *)
  let postChargesChargeDisputeClose ~charge:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Update payment method configuration</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/payment_method_configurations/\{configuration\} *)
  let postPaymentMethodConfigurationsConfiguration ~configuration:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieve payment method configuration</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/payment_method_configurations/\{configuration\} *)
  let getPaymentMethodConfigurationsConfiguration ~configuration:_ ?expand:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates an existing Tax <code>Registration</code> object.</p>
      
      <p>A registration cannot be deleted after it has been created. If you wish to end a registration you may do so by setting <code>expires_at</code>.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax/registrations/\{id\} *)
  let postTaxRegistrationsId ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a Tax <code>Registration</code> object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax/registrations/\{id\} *)
  let getTaxRegistrationsId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the exchange rates from the given currency to every supported currency.</p>
      
      @param rate_id rate_id
      @see "openapi/spec3.json" /v1/exchange_rates/\{rate_id\} *)
  let getExchangeRatesRateId ~rate_id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Lists all owners for a given <code>Account</code></p>
      
      @param account account
      @see "openapi/spec3.json" /v1/linked_accounts/\{account\}/owners *)
  let getLinkedAccountsAccountOwners ~account:_ ?ending_before:_ ?expand:_
    ?limit:_ ~ownership:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Refunds an application fee that has previously been collected but not yet refunded.
      Funds will be refunded to the Stripe account from which the fee was originally collected.</p>
      
      <p>You can optionally refund only part of an application fee.
      You can do so multiple times, until the entire fee has been refunded.</p>
      
      <p>Once entirely refunded, an application fee can’t be refunded again.
      This method will raise an error when called on an already-refunded application fee,
      or when trying to refund more money than is left on an application fee.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{id\}/refunds *)
  let postApplicationFeesIdRefunds ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{id\}/refunds *)
  let getApplicationFeesIdRefunds ~id:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>failure</code>.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/test_helpers/issuing/cards/\{card\}/shipping/fail *)
  let postTestHelpersIssuingCardsCardShippingFail ~card:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.</p>
      
      @param price price
      @see "openapi/spec3.json" /v1/prices/\{price\} *)
  let postPricesPrice ~price:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the price with the given ID.</p>
      
      @param price price
      @see "openapi/spec3.json" /v1/prices/\{price\} *)
  let getPricesPrice ~price:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
      
      <p>If the card’s owner has no default card, then the new card will become the default.
      However, if the owner already has a default, then it will not change.
      To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts *)
  let postCustomersCustomerBankAccounts ~customer:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts *)
  let getCustomersCustomerBankAccounts ~customer:_ ?ending_before:_ ?expand:_
    ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/finalize *)
  let postInvoicesInvoiceFinalize ~invoice:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/issuing/transactions/\{transaction\} *)
  let postIssuingTransactionsTransaction ~transaction:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves an Issuing <code>Transaction</code> object.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/issuing/transactions/\{transaction\} *)
  let getIssuingTransactionsTransaction ~transaction:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an existing Report Run.</p>
      
      @param report_run report_run
      @see "openapi/spec3.json" /v1/reporting/report_runs/\{report_run\} *)
  let getReportingReportRunsReportRun ~report_run:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Update a feature’s metadata or permanently deactivate it.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/entitlements/features/\{id\} *)
  let postEntitlementsFeaturesId ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a feature</p>
      
      @param id The ID of the feature.
      @see "openapi/spec3.json" /v1/entitlements/features/\{id\} *)
  let getEntitlementsFeaturesId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>You can cancel a previously created payout if its status is <code>pending</code>. Stripe refunds the funds to your available balance. You can’t cancel automatic Stripe payouts.</p>
      
      @param payout payout
      @see "openapi/spec3.json" /v1/payouts/\{payout\}/cancel *)
  let postPayoutsPayoutCancel ~payout:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p>
      
      <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
      
      <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
      
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription_exposed_id\} *)
  let deleteSubscriptionsSubscriptionExposedId ~subscription_exposed_id:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates an existing subscription to match the specified parameters.
      When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes.
      To preview how the proration is calculated, use the <a href="/docs/api/invoices/upcoming">upcoming invoice</a> endpoint.</p>
      
      <p>By default, we prorate subscription changes. For example, if a customer signs up on May 1 for a <currency>100</currency> price, they’ll be billed <currency>100</currency> immediately. If on May 15 they switch to a <currency>200</currency> price, then on June 1 they’ll be billed <currency>250</currency> (<currency>200</currency> for a renewal of her subscription, plus a <currency>50</currency> prorating adjustment for half of the previous month’s <currency>100</currency> difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.</p>
      
      <p>Switching prices does not normally change the billing date or generate an immediate charge unless:</p>
      
      <ul>
      <li>The billing interval is changed (for example, from monthly to yearly).</li>
      <li>The subscription moves from free to paid, or paid to free.</li>
      <li>A trial starts or ends.</li>
      </ul>
      
      <p>In these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date.</p>
      
      <p>If you want to charge for an upgrade immediately, pass <code>proration_behavior</code> as <code>always_invoice</code> to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass <code>create_prorations</code>, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually <a href="/docs/api/invoices/create">invoice the customer</a>.</p>
      
      <p>If you don’t want to prorate, set the <code>proration_behavior</code> option to <code>none</code>. With this option, the customer is billed <currency>100</currency> on May 1 and <currency>200</currency> on June 1. Similarly, if you set <code>proration_behavior</code> to <code>none</code> when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.</p>
      
      <p>Updating the quantity on a subscription many times in an hour may result in <a href="/docs/rate-limits">rate limiting</a>. If you need to bill for a frequently changing quantity, consider integrating <a href="/docs/billing/subscriptions/usage-based">usage-based billing</a> instead.</p>
      
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription_exposed_id\} *)
  let postSubscriptionsSubscriptionExposedId ~subscription_exposed_id:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the subscription with the given ID.</p>
      
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription_exposed_id\} *)
  let getSubscriptionsSubscriptionExposedId ~subscription_exposed_id:_
    ?expand:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Create an external account for a given account.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts *)
  let postAccountsAccountExternalAccounts ~account:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>List external accounts for an account.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts *)
  let getAccountsAccountExternalAccounts ~account:_ ?ending_before:_
    ?expand:_ ?limit:_ ?object_:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the Features associated with a FinancialAccount.</p>
      
      @param financial_account financial_account
      @see "openapi/spec3.json" /v1/treasury/financial_accounts/\{financial_account\}/features *)
  let postTreasuryFinancialAccountsFinancialAccountFeatures
    ~financial_account:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves Features information associated with the FinancialAccount.</p>
      
      @param financial_account financial_account
      @see "openapi/spec3.json" /v1/treasury/financial_accounts/\{financial_account\}/features *)
  let getTreasuryFinancialAccountsFinancialAccountFeatures
    ~financial_account:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Subscribes to periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/subscribe *)
  let postFinancialConnectionsAccountsAccountSubscribe ~account:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Perform an incremental authorization on an eligible
      <a href="/docs/api/payment_intents/object">PaymentIntent</a>. To be eligible, the
      PaymentIntent’s status must be <code>requires_capture</code> and
      <a href="/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported">incremental_authorization_supported</a>
      must be <code>true</code>.</p>
      
      <p>Incremental authorizations attempt to increase the authorized amount on
      your customer’s card to the new, higher <code>amount</code> provided. Similar to the
      initial authorization, incremental authorizations can be declined. A
      single PaymentIntent can call this endpoint multiple times to further
      increase the authorized amount.</p>
      
      <p>If the incremental authorization succeeds, the PaymentIntent object
      returns with the updated
      <a href="/docs/api/payment_intents/object#payment_intent_object-amount">amount</a>.
      If the incremental authorization fails, a
      <a href="/docs/error-codes#card-declined">card_declined</a> error returns, and no other
      fields on the PaymentIntent or Charge update. The PaymentIntent
      object remains capturable for the previously authorized amount.</p>
      
      <p>Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines.
      After it’s captured, a PaymentIntent can no longer be incremented.</p>
      
      <p>Learn more about <a href="/docs/terminal/features/incremental-authorizations">incremental authorizations</a>.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/increment_authorization *)
  let postPaymentIntentsIntentIncrementAuthorization ~intent:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Cancels a Climate order. You can cancel an order within 30 days of creation. Stripe refunds the
      reservation <code>amount_subtotal</code>, but not the <code>amount_fees</code> for user-triggered cancellations. Frontier
      might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe
      provides 90 days advance notice and refunds the <code>amount_total</code>.</p>
      
      @param order Unique identifier of the order.
      @see "openapi/spec3.json" /v1/climate/orders/\{order\}/cancel *)
  let postClimateOrdersOrderCancel ~order:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/test_helpers/terminal/readers/\{reader\}/present_payment_method *)
  let postTestHelpersTerminalReadersReaderPresentPaymentMethod ~reader:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Accepts the specified quote.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/accept *)
  let postQuotesQuoteAccept ~quote:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of PaymentMethods for a given Customer</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/payment_methods *)
  let getCustomersCustomerPaymentMethods ~customer:_ ?allow_redisplay:_
    ?ending_before:_ ?expand:_ ?limit:_ ?starting_after:_ ?type_:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>\[Deprecated\] Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.
      This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to decline an authorization</a>.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/issuing/authorizations/\{authorization\}/decline *)
  let postIssuingAuthorizationsAuthorizationDecline ~authorization:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/treasury/outbound_transfers/\{outbound_transfer\} *)
  let getTreasuryOutboundTransfersOutboundTransfer ~outbound_transfer:_
    ?expand:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Deletes a <code>Reader</code> object.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\} *)
  let deleteTerminalReadersReader ~reader:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\} *)
  let postTerminalReadersReader ~reader:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a <code>Reader</code> object.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\} *)
  let getTerminalReadersReader ~reader:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates a new <code>tax_id</code> object for a customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/tax_ids *)
  let postCustomersCustomerTaxIds ~customer:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of tax IDs for a customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/tax_ids *)
  let getCustomersCustomerTaxIds ~customer:_ ?ending_before:_ ?expand:_
    ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Transitions a test mode created OutboundPayment to the <code>failed</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_payments/\{id\}/fail *)
  let postTestHelpersTreasuryOutboundPaymentsIdFail ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates an existing payment method domain.</p>
      
      @param payment_method_domain payment_method_domain
      @see "openapi/spec3.json" /v1/payment_method_domains/\{payment_method_domain\} *)
  let postPaymentMethodDomainsPaymentMethodDomain ~payment_method_domain:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an existing payment method domain.</p>
      
      @param payment_method_domain payment_method_domain
      @see "openapi/spec3.json" /v1/payment_method_domains/\{payment_method_domain\} *)
  let getPaymentMethodDomainsPaymentMethodDomain ~payment_method_domain:_
    ?expand:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).</p>
      
      <p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
      
      @param subscription_item subscription_item
      @see "openapi/spec3.json" /v1/subscription_items/\{subscription_item\}/usage_record_summaries *)
  let getSubscriptionItemsSubscriptionItemUsageRecordSummaries
    ~subscription_item:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Create an external account for a given account.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/bank_accounts *)
  let postAccountsAccountBankAccounts ~account:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      <p>This request accepts only metadata as an argument.</p>
      
      @param transfer transfer
      @see "openapi/spec3.json" /v1/transfers/\{transfer\} *)
  let postTransfersTransfer ~transfer:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p>
      
      @param transfer transfer
      @see "openapi/spec3.json" /v1/transfers/\{transfer\} *)
  let getTransfersTransfer ~transfer:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a Mandate object.</p>
      
      @param mandate mandate
      @see "openapi/spec3.json" /v1/mandates/\{mandate\} *)
  let getMandatesMandate ~mandate:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>shipped</code>.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/test_helpers/issuing/cards/\{card\}/shipping/ship *)
  let postTestHelpersIssuingCardsCardShippingShip ~card:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates a SetupIntent object.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\} *)
  let postSetupIntentsIntent ~intent:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of a SetupIntent that has previously been created. </p>
      
      <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
      
      <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\} *)
  let getSetupIntentsIntent ~intent:_ ?client_secret:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
      
      <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
      Funds will be refunded to the credit or debit card that was originally charged.</p>
      
      <p>You can optionally refund only part of a charge.
      You can do so multiple times, until the entire charge has been refunded.</p>
      
      <p>Once entirely refunded, a charge can’t be refunded again.
      This method will raise an error when called on an already-refunded charge,
      or when trying to refund more money than is left on a charge.</p>
      
      @param charge The identifier of the charge to refund.
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refunds *)
  let postChargesChargeRefunds ~charge:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refunds *)
  let getChargesChargeRefunds ~charge:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates an existing file link object. Expired links can no longer be updated.</p>
      
      @param link link
      @see "openapi/spec3.json" /v1/file_links/\{link\} *)
  let postFileLinksLink ~link:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the file link with the given ID.</p>
      
      @param link link
      @see "openapi/spec3.json" /v1/file_links/\{link\} *)
  let getFileLinksLink ~link:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Initiates a refund on a Reader</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/refund_payment *)
  let postTerminalReadersReaderRefundPayment ~reader:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\} *)
  let getFinancialConnectionsAccountsAccount ~account:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Manually reconcile the remaining amount for a <code>customer_balance</code> PaymentIntent.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/apply_customer_balance *)
  let postPaymentIntentsIntentApplyCustomerBalance ~intent:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Capture the payment of an existing, uncaptured charge that was created with the <code>capture</code> option set to false.</p>
      
      <p>Uncaptured payments expire a set number of days after they are created (<a href="/docs/charges/placing-a-hold">7 by default</a>), after which they are marked as refunded and capture attempts will fail.</p>
      
      <p>Don’t use this method to capture a PaymentIntent-initiated charge. Use <a href="/docs/api/payment_intents/capture">Capture a PaymentIntent</a>.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/capture *)
  let postChargesChargeCapture ~charge:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Transitions a test mode created OutboundTransfer to the <code>failed</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_transfers/\{outbound_transfer\}/fail *)
  let postTestHelpersTreasuryOutboundTransfersOutboundTransferFail
    ~outbound_transfer:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>
      
      @param schedule schedule
      @see "openapi/spec3.json" /v1/subscription_schedules/\{schedule\}/cancel *)
  let postSubscriptionSchedulesScheduleCancel ~schedule:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of transactions that modified the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cash_balance_transactions *)
  let getCustomersCustomerCashBalanceTransactions ~customer:_
    ?ending_before:_ ?expand:_ ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>
      
      <p>Consult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to <a href="#create_invoice">issue another invoice</a> or <a href="#create_credit_note">credit note</a> instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/void *)
  let postInvoicesInvoiceVoid ~invoice:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>
      
      <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/disputes/\{dispute\}/close *)
  let postDisputesDisputeClose ~dispute:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param settlement settlement
      @see "openapi/spec3.json" /v1/issuing/settlements/\{settlement\} *)
  let postIssuingSettlementsSettlement ~settlement:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves an Issuing <code>Settlement</code> object.</p>
      
      @param settlement settlement
      @see "openapi/spec3.json" /v1/issuing/settlements/\{settlement\} *)
  let getIssuingSettlementsSettlement ~settlement:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the balance transaction with the given ID.</p>
      
      <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/balance/history/\{id\} *)
  let getBalanceHistoryId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Attaches a PaymentMethod object to a Customer.</p>
      
      <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
      or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
      These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the <code>/v1/payment_methods/:id/attach</code>
      endpoint without first using a SetupIntent or PaymentIntent with <code>setup_future_usage</code> does not optimize the PaymentMethod for
      future use, which makes later declines and payment friction more likely.
      See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up
      future payments.</p>
      
      <p>To use this PaymentMethod as the default for invoice or subscription payments,
      set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
      on the Customer to the PaymentMethod’s ID.</p>
      
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/payment_methods/\{payment_method\}/attach *)
  let postPaymentMethodsPaymentMethodAttach ~payment_method:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a Climate supplier object.</p>
      
      @param supplier supplier
      @see "openapi/spec3.json" /v1/climate/suppliers/\{supplier\} *)
  let getClimateSuppliersSupplier ~supplier:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a href="/docs/identity/how-sessions-work">status</a>.</p>
      
      <p>Once canceled, future submission attempts are disabled. This cannot be undone. <a href="/docs/identity/verification-sessions#cancel">Learn more</a>.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/identity/verification_sessions/\{session\}/cancel *)
  let postIdentityVerificationSessionsSessionCancel ~session:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/line_items *)
  let getQuotesQuoteLineItems ~quote:_ ?ending_before:_ ?expand:_ ?limit:_
    ?starting_after:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/events/\{id\} *)
  let getEventsId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>When retrieving a payment link, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param payment_link payment_link
      @see "openapi/spec3.json" /v1/payment_links/\{payment_link\}/line_items *)
  let getPaymentLinksPaymentLinkLineItems ~payment_link:_ ?ending_before:_
    ?expand:_ ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Transitions a test mode created InboundTransfer to the <code>failed</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/inbound_transfers/\{id\}/fail *)
  let postTestHelpersTreasuryInboundTransfersIdFail ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/issuing/cards/\{card\} *)
  let postIssuingCardsCard ~card:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves an Issuing <code>Card</code> object.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/issuing/cards/\{card\} *)
  let getIssuingCardsCard ~card:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieve a list of billing meter event summaries.</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\}/event_summaries *)
  let getBillingMetersIdEventSummaries ~id:_ ~customer:_ ~end_time:_
    ?ending_before:_ ?expand:_ ?limit:_ ~start_time:_ ?starting_after:_
    ?value_grouping_window:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p>
      
      @param topup topup
      @see "openapi/spec3.json" /v1/topups/\{topup\} *)
  let postTopupsTopup ~topup:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p>
      
      @param topup topup
      @see "openapi/spec3.json" /v1/topups/\{topup\} *)
  let getTopupsTopup ~topup:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Creates an immutable transaction that updates the customer’s credit <a href="/docs/billing/customer/balance">balance</a>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/balance_transactions *)
  let postCustomersCustomerBalanceTransactions ~customer:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Returns a list of transactions that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/balance_transactions *)
  let getCustomersCustomerBalanceTransactions ~customer:_ ?ending_before:_
    ?expand:_ ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the line items of a persisted tax calculation as a collection.</p>
      
      @param calculation calculation
      @see "openapi/spec3.json" /v1/tax/calculations/\{calculation\}/line_items *)
  let getTaxCalculationsCalculationLineItems ~calculation:_ ?ending_before:_
    ?expand:_ ?limit:_ ?starting_after:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{id\} *)
  let getApplicationFeesId ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Reverse a test-mode Authorization.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations/\{authorization\}/reverse *)
  let postTestHelpersIssuingAuthorizationsAuthorizationReverse
    ~authorization:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a <code>Review</code> object.</p>
      
      @param review review
      @see "openapi/spec3.json" /v1/reviews/\{review\} *)
  let getReviewsReview ~review:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>A Session can be expired when it is in one of these statuses: <code>open</code> </p>
      
      <p>After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/checkout/sessions/\{session\}/expire *)
  let postCheckoutSessionsSessionExpire ~session:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/linked_accounts/\{account\} *)
  let getLinkedAccountsAccount ~account:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Delete a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources/\{id\} *)
  let deleteCustomersCustomerSourcesId ~customer:_ ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Update a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources/\{id\} *)
  let postCustomersCustomerSourcesId ~customer:_ ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieve a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources/\{id\} *)
  let getCustomersCustomerSourcesId ~customer:_ ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      <p>This request only accepts metadata as an argument.</p>
      
      @param fee fee
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{fee\}/refunds/\{id\} *)
  let postApplicationFeesFeeRefundsId ~fee:_ ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p>
      
      @param fee fee
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{fee\}/refunds/\{id\} *)
  let getApplicationFeesFeeRefundsId ~fee:_ ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Deletes the feature attachment to a product</p>
      
      @param product product
      @param id id
      @see "openapi/spec3.json" /v1/products/\{product\}/features/\{id\} *)
  let deleteProductsProductFeaturesId ~id:_ ~product:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a product_feature, which represents a feature attachment to a product</p>
      
      @param product The ID of the product.
      @param id The ID of the product_feature.
      @see "openapi/spec3.json" /v1/products/\{product\}/features/\{id\} *)
  let getProductsProductFeaturesId ~id:_ ~product:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Removes the currently applied discount on a customer.</p>
      
      @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\}/discount *)
  let deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount
    ~customer:_ ~subscription_exposed_id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\}/discount *)
  let getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount
    ~customer:_ ~subscription_exposed_id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates an existing Account Capability. Request or remove a capability by updating its <code>requested</code> parameter.</p>
      
      @param account account
      @param capability capability
      @see "openapi/spec3.json" /v1/accounts/\{account\}/capabilities/\{capability\} *)
  let postAccountsAccountCapabilitiesCapability ~account:_ ~capability:_
    _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves information about the specified Account Capability.</p>
      
      @param account account
      @param capability capability
      @see "openapi/spec3.json" /v1/accounts/\{account\}/capabilities/\{capability\} *)
  let getAccountsAccountCapabilitiesCapability ~account:_ ~capability:_
    ?expand:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Delete a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts/\{id\} *)
  let deleteCustomersCustomerBankAccountsId ~customer:_ ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Update a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts/\{id\} *)
  let postCustomersCustomerBankAccountsId ~customer:_ ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts/\{id\} *)
  let getCustomersCustomerBankAccountsId ~customer:_ ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a PaymentMethod object for a given Customer.</p>
      
      @param customer customer
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/customers/\{customer\}/payment_methods/\{payment_method\} *)
  let getCustomersCustomerPaymentMethodsPaymentMethod ~customer:_
    ~payment_method:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Deletes an existing <code>tax_id</code> object.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/tax_ids/\{id\} *)
  let deleteCustomersCustomerTaxIdsId ~customer:_ ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the <code>tax_id</code> object with the given identifier.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/tax_ids/\{id\} *)
  let getCustomersCustomerTaxIdsId ~customer:_ ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Delete a specified external account for a given account.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/bank_accounts/\{id\} *)
  let deleteAccountsAccountBankAccountsId ~account:_ ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the metadata, account holder name, account holder type of a bank account belonging to
      a connected account and optionally sets it as the default for its currency. Other bank account
      details are not editable by design.</p>
      
      <p>You can only update bank accounts when <a href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a> is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>
      
      <p>You can re-enable a disabled bank account by performing an update call without providing any
      arguments or changes.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/bank_accounts/\{id\} *)
  let postAccountsAccountBankAccountsId ~account:_ ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieve a specified external account for a given account.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/bank_accounts/\{id\} *)
  let getAccountsAccountBankAccountsId ~account:_ ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      <p>This request only accepts metadata and description as arguments.</p>
      
      @param transfer transfer
      @param id id
      @see "openapi/spec3.json" /v1/transfers/\{transfer\}/reversals/\{id\} *)
  let postTransfersTransferReversalsId ~id:_ ~transfer:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p>
      
      @param transfer transfer
      @param id id
      @see "openapi/spec3.json" /v1/transfers/\{transfer\}/reversals/\{id\} *)
  let getTransfersTransferReversalsId ~id:_ ~transfer:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Update a specified refund.</p>
      
      @param charge charge
      @param refund refund
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refunds/\{refund\} *)
  let postChargesChargeRefundsRefund ~charge:_ ~refund:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the details of an existing refund.</p>
      
      @param charge charge
      @param refund refund
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refunds/\{refund\} *)
  let getChargesChargeRefundsRefund ~charge:_ ~refund:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Delete a specified external account for a given account.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts/\{id\} *)
  let deleteAccountsAccountExternalAccountsId ~account:_ ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates the metadata, account holder name, account holder type of a bank account belonging to
      a connected account and optionally sets it as the default for its currency. Other bank account
      details are not editable by design.</p>
      
      <p>You can only update bank accounts when <a href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a> is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>
      
      <p>You can re-enable a disabled bank account by performing an update call without providing any
      arguments or changes.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts/\{id\} *)
  let postAccountsAccountExternalAccountsId ~account:_ ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieve a specified external account for a given account.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts/\{id\} *)
  let getAccountsAccountExternalAccountsId ~account:_ ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a specific cash balance transaction, which updated the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>
      
      @param customer customer
      @param transaction transaction
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cash_balance_transactions/\{transaction\} *)
  let getCustomersCustomerCashBalanceTransactionsTransaction ~customer:_
    ~transaction:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Most credit balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p>
      
      @param customer customer
      @param transaction transaction
      @see "openapi/spec3.json" /v1/customers/\{customer\}/balance_transactions/\{transaction\} *)
  let postCustomersCustomerBalanceTransactionsTransaction ~customer:_
    ~transaction:_ _req = Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a specific customer balance transaction that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
      
      @param customer customer
      @param transaction transaction
      @see "openapi/spec3.json" /v1/customers/\{customer\}/balance_transactions/\{transaction\} *)
  let getCustomersCustomerBalanceTransactionsTransaction ~customer:_
    ~transaction:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves a new Source MandateNotification.</p>
      
      @param source source
      @param mandate_notification mandate_notification
      @see "openapi/spec3.json" /v1/sources/\{source\}/mandate_notifications/\{mandate_notification\} *)
  let getSourcesSourceMandateNotificationsMandateNotification
    ~mandate_notification:_ ~source:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Delete a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards/\{id\} *)
  let deleteCustomersCustomerCardsId ~customer:_ ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Update a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards/\{id\} *)
  let postCustomersCustomerCardsId ~customer:_ ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards/\{id\} *)
  let getCustomersCustomerCardsId ~customer:_ ~id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>
      
      <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
      
      <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
      
      @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\} *)
  let deleteCustomersCustomerSubscriptionsSubscriptionExposedId ~customer:_
    ~subscription_exposed_id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>
      
      @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\} *)
  let postCustomersCustomerSubscriptionsSubscriptionExposedId ~customer:_
    ~subscription_exposed_id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves the subscription with the given ID.</p>
      
      @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\} *)
  let getCustomersCustomerSubscriptionsSubscriptionExposedId ~customer:_
    ~subscription_exposed_id:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons/\{person\} *)
  let deleteAccountsAccountPersonsPerson ~account:_ ~person:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates an existing person.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons/\{person\} *)
  let postAccountsAccountPersonsPerson ~account:_ ~person:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves an existing person.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons/\{person\} *)
  let getAccountsAccountPersonsPerson ~account:_ ~person:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates an invoice’s line item. Some fields, such as <code>tax_amounts</code>, only live on the invoice line item,
      so they can only be updated through this endpoint. Other fields, such as <code>amount</code>, live on both the invoice
      item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well.
      Updating an invoice’s line item is only possible before the invoice is finalized.</p>
      
      @param invoice Invoice ID of line item
      @param line_item_id Invoice line item ID
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/lines/\{line_item_id\} *)
  let postInvoicesInvoiceLinesLineItemId ~invoice:_ ~line_item_id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Verify a specified bank account for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts/\{id\}/verify *)
  let postCustomersCustomerBankAccountsIdVerify ~customer:_ ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people/\{person\} *)
  let deleteAccountsAccountPeoplePerson ~account:_ ~person:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Updates an existing person.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people/\{person\} *)
  let postAccountsAccountPeoplePerson ~account:_ ~person:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieves an existing person.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people/\{person\} *)
  let getAccountsAccountPeoplePerson ~account:_ ~person:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Verify a specified bank account for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources/\{id\}/verify *)
  let postCustomersCustomerSourcesIdVerify ~customer:_ ~id:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
  
  (** <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p>
      
      @param source source
      @param source_transaction source_transaction
      @see "openapi/spec3.json" /v1/sources/\{source\}/source_transactions/\{source_transaction\} *)
  let getSourcesSourceSourceTransactionsSourceTransaction ~source:_
    ~source_transaction:_ ?expand:_ _req =
    Ok (`CH_Default (501, Defaults.error, []))
end

module Routes' (H : HANDLERS) = struct
  type _resp = code:int -> headers:(string * string) list -> string -> unit
  open StripePaths
  open StripeBodies
  open StripeEncdrs
  open StripeParams
  
  (** <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p>
      
      @see "openapi/spec3.json" /v1/webhook_endpoints *)
  let postWebhookEndpoints = let _op = "PostWebhookEndpoints" in
    Routes.route (Paths'.postWebhookEndpoints ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_ef97b53327 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostWebhookEndpoints'")
           | _, None -> None in
         match H.postWebhookEndpoints _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_webhook_endpoint ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of your webhook endpoints.</p>
      
      @see "openapi/spec3.json" /v1/webhook_endpoints *)
  let getWebhookEndpoints = let _op = "GetWebhookEndpoints" in
    Routes.route (Paths'.getWebhookEndpoints ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetWebhookEndpoints'")
           | _, None -> None in 
         match H.getWebhookEndpoints ?ending_before ?expand ?limit
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_009f7b6355 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a list of Transaction objects.</p>
      
      @see "openapi/spec3.json" /v1/treasury/transactions *)
  let getTreasuryTransactions = let _op = "GetTreasuryTransactions" in
    Routes.route (Paths'.getTreasuryTransactions ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_2bb01eccbd ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let financial_account = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"financial_account"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let order_by = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_65e58eb6da ~p:"order_by" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_6f04380d09 ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status_transitions = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_b458f1b6fb ~p:"status_transitions"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryTransactions'")
           | _, None -> None in 
         let financial_account = match financial_account with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'financial_account' is required by operation 'GetTreasuryTransactions'")
         in 
         match H.getTreasuryTransactions ?created ?ending_before ?expand
           ~financial_account ?limit ?order_by ?starting_after ?status
           ?status_transitions _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_7daf65bc51 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates an InboundTransfer.</p>
      
      @see "openapi/spec3.json" /v1/treasury/inbound_transfers *)
  let postTreasuryInboundTransfers = let _op = "PostTreasuryInboundTransfers"
    in
    Routes.route (Paths'.postTreasuryInboundTransfers ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_d051225f0e ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTreasuryInboundTransfers'")
           | _, None -> None in
         match H.postTreasuryInboundTransfers _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_inbound_transfer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of InboundTransfers sent from the specified FinancialAccount.</p>
      
      @see "openapi/spec3.json" /v1/treasury/inbound_transfers *)
  let getTreasuryInboundTransfers = let _op = "GetTreasuryInboundTransfers"
    in
    Routes.route (Paths'.getTreasuryInboundTransfers ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let financial_account = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"financial_account"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_bda61eb198 ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryInboundTransfers'")
           | _, None -> None in 
         let financial_account = match financial_account with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'financial_account' is required by operation 'GetTreasuryInboundTransfers'")
         in 
         match H.getTreasuryInboundTransfers ?ending_before ?expand
           ~financial_account ?limit ?starting_after ?status _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_4c6dd8f0e1 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Reverses a ReceivedDebit and creates a DebitReversal object.</p>
      
      @see "openapi/spec3.json" /v1/treasury/debit_reversals *)
  let postTreasuryDebitReversals = let _op = "PostTreasuryDebitReversals" in
    Routes.route (Paths'.postTreasuryDebitReversals ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_82a5266788 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTreasuryDebitReversals'")
           | _, None -> None in
         match H.postTreasuryDebitReversals _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_debit_reversal ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of DebitReversals.</p>
      
      @see "openapi/spec3.json" /v1/treasury/debit_reversals *)
  let getTreasuryDebitReversals = let _op = "GetTreasuryDebitReversals" in
    Routes.route (Paths'.getTreasuryDebitReversals ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let financial_account = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"financial_account"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let received_debit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"received_debit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let resolution = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_ed1d428d1e ~p:"resolution" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_e27a5a13e2 ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryDebitReversals'")
           | _, None -> None in 
         let financial_account = match financial_account with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'financial_account' is required by operation 'GetTreasuryDebitReversals'")
         in 
         match H.getTreasuryDebitReversals ?ending_before ?expand
           ~financial_account ?limit ?received_debit ?resolution
           ?starting_after ?status _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_85b19d50f4 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Allows the user to capture an arbitrary amount, also known as a forced capture.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/issuing/transactions/create_force_capture *)
  let postTestHelpersIssuingTransactionsCreateForceCapture = let _op = "PostTestHelpersIssuingTransactionsCreateForceCapture"
    in
    Routes.route
      (Paths'.postTestHelpersIssuingTransactionsCreateForceCapture ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_4088bc30cc ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersIssuingTransactionsCreateForceCapture'")
           | _, None -> None in
         match H.postTestHelpersIssuingTransactionsCreateForceCapture _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_transaction ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/reviews *)
  let getReviews = let _op = "GetReviews" in
    Routes.route (Paths'.getReviews ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_91991d11ce ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetReviews'")
           | _, None -> None in 
         match H.getReviews ?created ?ending_before ?expand ?limit
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_4b4add6b74 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new price for an existing product. The price can be recurring or one-time.</p>
      
      @see "openapi/spec3.json" /v1/prices *)
  let postPrices = let _op = "PostPrices" in
    Routes.route (Paths'.postPrices ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_7db5a18132 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPrices'")
           | _, None -> None in
         match H.postPrices _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_price ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of your active prices, excluding <a href="/docs/products-prices/pricing-models#inline-pricing">inline prices</a>. For the list of inactive prices, set <code>active</code> to false.</p>
      
      @see "openapi/spec3.json" /v1/prices *)
  let getPrices = let _op = "GetPrices" in
    Routes.route (Paths'.getPrices ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let active = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"active" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_5c423aae2d ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let currency = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"currency" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let lookup_keys = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"lookup_keys" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let product = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"product" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let recurring = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_54d3503cdb ~p:"recurring" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let type_ = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_806c738ca8 ~p:"type" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPrices'")
           | _, None -> None in 
         match H.getPrices ?active ?created ?currency ?ending_before ?expand
           ?limit ?lookup_keys ?product ?recurring ?starting_after ?type_
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_74158d6312 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p>
      
      @see "openapi/spec3.json" /v1/exchange_rates *)
  let getExchangeRates = let _op = "GetExchangeRates" in
    Routes.route (Paths'.getExchangeRates ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetExchangeRates'")
           | _, None -> None in 
         match H.getExchangeRates ?ending_before ?expand ?limit
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_7fe89e0e5d ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a Session object.</p>
      
      @see "openapi/spec3.json" /v1/checkout/sessions *)
  let postCheckoutSessions = let _op = "PostCheckoutSessions" in
    Routes.route (Paths'.postCheckoutSessions ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_5a1ce40dda ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCheckoutSessions'")
           | _, None -> None in
         match H.postCheckoutSessions _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_checkout_session ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of Checkout Sessions.</p>
      
      @see "openapi/spec3.json" /v1/checkout/sessions *)
  let getCheckoutSessions = let _op = "GetCheckoutSessions" in
    Routes.route (Paths'.getCheckoutSessions ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_0b0b7bdb7e ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let customer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"customer" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let customer_details = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_12bf81c281 ~p:"customer_details"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let payment_intent = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"payment_intent" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let payment_link = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"payment_link" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_976c399de7 ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let subscription = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"subscription" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCheckoutSessions'")
           | _, None -> None in 
         match H.getCheckoutSessions ?created ?customer ?customer_details
           ?ending_before ?expand ?limit ?payment_intent ?payment_link
           ?starting_after ?status ?subscription _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_be210268f2 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a personalization design object.</p>
      
      @see "openapi/spec3.json" /v1/issuing/personalization_designs *)
  let postIssuingPersonalizationDesigns = let _op = "PostIssuingPersonalizationDesigns"
    in
    Routes.route (Paths'.postIssuingPersonalizationDesigns ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_2a790f7673 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIssuingPersonalizationDesigns'")
           | _, None -> None in
         match H.postIssuingPersonalizationDesigns _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_personalization_design ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of personalization design objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/personalization_designs *)
  let getIssuingPersonalizationDesigns = let _op = "GetIssuingPersonalizationDesigns"
    in
    Routes.route (Paths'.getIssuingPersonalizationDesigns ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let lookup_keys = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"lookup_keys" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let preferences = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_6565ec2878 ~p:"preferences" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_386a8a09fc ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIssuingPersonalizationDesigns'")
           | _, None -> None in 
         match H.getIssuingPersonalizationDesigns ?ending_before ?expand
           ?limit ?lookup_keys ?preferences ?starting_after ?status _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_a6474a2d5e ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.</p>
      
      @see "openapi/spec3.json" /v1/invoiceitems *)
  let postInvoiceitems = let _op = "PostInvoiceitems" in
    Routes.route (Paths'.postInvoiceitems ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_8fdaacf028 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostInvoiceitems'")
           | _, None -> None in
         match H.postInvoiceitems _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_invoiceitem ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p>
      
      @see "openapi/spec3.json" /v1/invoiceitems *)
  let getInvoiceitems = let _op = "GetInvoiceitems" in
    Routes.route (Paths'.getInvoiceitems ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_7181394bbb ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let customer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"customer" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let invoice = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"invoice" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let pending = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"pending" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetInvoiceitems'")
           | _, None -> None in 
         match H.getInvoiceitems ?created ?customer ?ending_before ?expand
           ?invoice ?limit ?pending ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_fc9322fc50 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an account.</p>
      
      @see "openapi/spec3.json" /v1/account *)
  let getAccount = let _op = "GetAccount" in
    Routes.route (Paths'.getAccount ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetAccount'")
           | _, None -> None in
         match H.getAccount ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a short-lived API key for a given resource.</p>
      
      @see "openapi/spec3.json" /v1/ephemeral_keys *)
  let postEphemeralKeys = let _op = "PostEphemeralKeys" in
    Routes.route (Paths'.postEphemeralKeys ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_6c44d9c7d2 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostEphemeralKeys'")
           | _, None -> None in
         match H.postEphemeralKeys _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_ephemeral_key ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Search for customers you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/customers/search *)
  let getCustomersSearch = let _op = "GetCustomersSearch" in
    Routes.route (Paths'.getCustomersSearch ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let page = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"page" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let query = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"query" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersSearch'")
           | _, None -> None in 
         let query = match query with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'query' is required by operation 'GetCustomersSearch'")
         in
         match H.getCustomersSearch ?expand ?limit ?page ~query _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_ada489b57e ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the current account balance, based on the authentication that was used to make the request.
       For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
      
      @see "openapi/spec3.json" /v1/balance *)
  let getBalance = let _op = "GetBalance" in
    Routes.route (Paths'.getBalance ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetBalance'")
           | _, None -> None in
         match H.getBalance ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_balance ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly create ReceivedCredits initiated by third parties.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/treasury/received_credits *)
  let postTestHelpersTreasuryReceivedCredits = let _op = "PostTestHelpersTreasuryReceivedCredits"
    in
    Routes.route (Paths'.postTestHelpersTreasuryReceivedCredits ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_0f1eb7e9e5 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersTreasuryReceivedCredits'")
           | _, None -> None in
         match H.postTestHelpersTreasuryReceivedCredits _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_received_credit ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Search for subscriptions you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/subscriptions/search *)
  let getSubscriptionsSearch = let _op = "GetSubscriptionsSearch" in
    Routes.route (Paths'.getSubscriptionsSearch ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let page = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"page" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let query = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"query" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetSubscriptionsSearch'")
           | _, None -> None in 
         let query = match query with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'query' is required by operation 'GetSubscriptionsSearch'")
         in
         match H.getSubscriptionsSearch ?expand ?limit ?page ~query _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_511c6be270 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
      
      <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
      Funds will be refunded to the credit or debit card that was originally charged.</p>
      
      <p>You can optionally refund only part of a charge.
      You can do so multiple times, until the entire charge has been refunded.</p>
      
      <p>Once entirely refunded, a charge can’t be refunded again.
      This method will raise an error when called on an already-refunded charge,
      or when trying to refund more money than is left on a charge.</p>
      
      @see "openapi/spec3.json" /v1/refunds *)
  let postRefunds = let _op = "PostRefunds" in
    Routes.route (Paths'.postRefunds ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_3131e049b3 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostRefunds'")
           | _, None -> None in
         match H.postRefunds _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_refund ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds appearing first The 10 most recent refunds are always available by default on the Charge object.</p>
      
      @see "openapi/spec3.json" /v1/refunds *)
  let getRefunds = let _op = "GetRefunds" in
    Routes.route (Paths'.getRefunds ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let charge = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"charge" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_c862988285 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let payment_intent = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"payment_intent" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetRefunds'")
           | _, None -> None in 
         match H.getRefunds ?charge ?created ?ending_before ?expand ?limit
           ?payment_intent ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_84023f4c8c ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Create or replace a secret in the secret store.</p>
      
      @see "openapi/spec3.json" /v1/apps/secrets *)
  let postAppsSecrets = let _op = "PostAppsSecrets" in
    Routes.route (Paths'.postAppsSecrets ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_63665b08a9 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostAppsSecrets'")
           | _, None -> None in
         match H.postAppsSecrets _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_apps_secret ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>List all secrets stored on the given scope.</p>
      
      @see "openapi/spec3.json" /v1/apps/secrets *)
  let getAppsSecrets = let _op = "GetAppsSecrets" in
    Routes.route (Paths'.getAppsSecrets ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let scope = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_4ce91395e3 ~p:"scope" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetAppsSecrets'")
           | _, None -> None in 
         let scope = match scope with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'scope' is required by operation 'GetAppsSecrets'")
         in 
         match H.getAppsSecrets ?ending_before ?expand ?limit ~scope
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_a753848072 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Search for PaymentIntents you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/payment_intents/search *)
  let getPaymentIntentsSearch = let _op = "GetPaymentIntentsSearch" in
    Routes.route (Paths'.getPaymentIntentsSearch ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let page = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"page" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let query = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"query" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPaymentIntentsSearch'")
           | _, None -> None in 
         let query = match query with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'query' is required by operation 'GetPaymentIntentsSearch'")
         in
         match H.getPaymentIntentsSearch ?expand ?limit ?page ~query _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_2b5089e91b ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieve a list of active entitlements for a customer</p>
      
      @see "openapi/spec3.json" /v1/entitlements/active_entitlements *)
  let getEntitlementsActiveEntitlements = let _op = "GetEntitlementsActiveEntitlements"
    in
    Routes.route (Paths'.getEntitlementsActiveEntitlements ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let customer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"customer" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetEntitlementsActiveEntitlements'")
           | _, None -> None in
         let customer = match customer with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'customer' is required by operation 'GetEntitlementsActiveEntitlements'")
         in 
         match H.getEntitlementsActiveEntitlements ~customer ?ending_before
           ?expand ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_a59bf7d41a ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new <code>Configuration</code> object.</p>
      
      @see "openapi/spec3.json" /v1/terminal/configurations *)
  let postTerminalConfigurations = let _op = "PostTerminalConfigurations" in
    Routes.route (Paths'.postTerminalConfigurations ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_be0ad9b5f5 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTerminalConfigurations'")
           | _, None -> None in
         match H.postTerminalConfigurations _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_terminal_configuration ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of <code>Configuration</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/terminal/configurations *)
  let getTerminalConfigurations = let _op = "GetTerminalConfigurations" in
    Routes.route (Paths'.getTerminalConfigurations ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let is_account_default = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"is_account_default" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTerminalConfigurations'")
           | _, None -> None in 
         match H.getTerminalConfigurations ?ending_before ?expand
           ?is_account_default ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_a974b789de ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.</p>
      
      @see "openapi/spec3.json" /v1/subscription_schedules *)
  let postSubscriptionSchedules = let _op = "PostSubscriptionSchedules" in
    Routes.route (Paths'.postSubscriptionSchedules ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_7e9ce92a64 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostSubscriptionSchedules'")
           | _, None -> None in
         match H.postSubscriptionSchedules _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_subscription_schedule ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the list of your subscription schedules.</p>
      
      @see "openapi/spec3.json" /v1/subscription_schedules *)
  let getSubscriptionSchedules = let _op = "GetSubscriptionSchedules" in
    Routes.route (Paths'.getSubscriptionSchedules ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let canceled_at = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_edb9c04aba ~p:"canceled_at" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let completed_at = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_b053f4a10e ~p:"completed_at" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_8dd946adeb ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let customer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"customer" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let released_at = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_e65a202262 ~p:"released_at" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let scheduled = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"scheduled" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetSubscriptionSchedules'")
           | _, None -> None in 
         match H.getSubscriptionSchedules ?canceled_at ?completed_at ?created
           ?customer ?ending_before ?expand ?limit ?released_at ?scheduled
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_131d8d58f6 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new object and begin running the report. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
      
      @see "openapi/spec3.json" /v1/reporting/report_runs *)
  let postReportingReportRuns = let _op = "PostReportingReportRuns" in
    Routes.route (Paths'.postReportingReportRuns ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_45244250b0 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostReportingReportRuns'")
           | _, None -> None in
         match H.postReportingReportRuns _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_reporting_report_run ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of Report Runs, with the most recent appearing first.</p>
      
      @see "openapi/spec3.json" /v1/reporting/report_runs *)
  let getReportingReportRuns = let _op = "GetReportingReportRuns" in
    Routes.route (Paths'.getReportingReportRuns ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_95b7b73ff8 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetReportingReportRuns'")
           | _, None -> None in 
         match H.getReportingReportRuns ?created ?ending_before ?expand
           ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_c990e5bff8 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a Climate order object for a given Climate product. The order will be processed immediately
      after creation and payment will be deducted your Stripe balance.</p>
      
      @see "openapi/spec3.json" /v1/climate/orders *)
  let postClimateOrders = let _op = "PostClimateOrders" in
    Routes.route (Paths'.postClimateOrders ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_e0d65e6591 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostClimateOrders'")
           | _, None -> None in
         match H.postClimateOrders _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_climate_order ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Lists all Climate order objects. The orders are returned sorted by creation date, with the
      most recently created orders appearing first.</p>
      
      @see "openapi/spec3.json" /v1/climate/orders *)
  let getClimateOrders = let _op = "GetClimateOrders" in
    Routes.route (Paths'.getClimateOrders ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetClimateOrders'")
           | _, None -> None in 
         match H.getClimateOrders ?ending_before ?expand ?limit
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_9c934593c9 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>You can now model subscriptions more flexibly using the <a href="#prices">Prices API</a>. It replaces the Plans API and is backwards compatible to simplify your migration.</p>
      
      @see "openapi/spec3.json" /v1/plans *)
  let postPlans = let _op = "PostPlans" in
    Routes.route (Paths'.postPlans ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_2757ce4894 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPlans'")
           | _, None -> None in
         match H.postPlans _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_plan ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of your plans.</p>
      
      @see "openapi/spec3.json" /v1/plans *)
  let getPlans = let _op = "GetPlans" in
    Routes.route (Paths'.getPlans ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let active = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"active" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_c85fb118c6 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let product = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"product" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPlans'")
           | _, None -> None in 
         match H.getPlans ?active ?created ?ending_before ?expand ?limit
           ?product ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_dd09d84db3 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Lists all Issuing <code>Token</code> objects for a given card.</p>
      
      @see "openapi/spec3.json" /v1/issuing/tokens *)
  let getIssuingTokens = let _op = "GetIssuingTokens" in
    Routes.route (Paths'.getIssuingTokens ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let card = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"card" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_a985a64df2 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_9463e4703f ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIssuingTokens'")
           | _, None -> None in
         let card = match card with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'card' is required by operation 'GetIssuingTokens'")
         in 
         match H.getIssuingTokens ~card ?created ?ending_before ?expand
           ?limit ?starting_after ?status _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_d442622ac0 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @see "openapi/spec3.json" /v1/invoices/upcoming/lines *)
  let getInvoicesUpcomingLines = let _op = "GetInvoicesUpcomingLines" in
    Routes.route (Paths'.getInvoicesUpcomingLines ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let automatic_tax = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_25cc6e6754 ~p:"automatic_tax"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let coupon = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"coupon" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let currency = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"currency" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let customer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"customer" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let customer_details = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_428991b112 ~p:"customer_details"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let discounts = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_ec12d0adc5 ~p:"discounts" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let invoice_items = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_6de1e50279 ~p:"invoice_items"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let issuer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_f2803c8215 ~p:"issuer" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let on_behalf_of = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_d3294049d8 ~p:"on_behalf_of" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let preview_mode = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_f90350482b ~p:"preview_mode" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let schedule = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"schedule" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let schedule_details = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_4592f6749b ~p:"schedule_details"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let subscription = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"subscription" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let subscription_billing_cycle_anchor = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_ed69666899
           ~p:"subscription_billing_cycle_anchor" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let subscription_cancel_at = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_1d44572454 ~p:"subscription_cancel_at"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let subscription_cancel_at_period_end = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool
           ~p:"subscription_cancel_at_period_end" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let subscription_cancel_now = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"subscription_cancel_now"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let subscription_default_tax_rates = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_8f5fa696e4
           ~p:"subscription_default_tax_rates" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let subscription_details = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_7cca4f7dbf ~p:"subscription_details"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let subscription_items = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_1d8dcb799a ~p:"subscription_items"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let subscription_proration_behavior = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_b3cdff625a
           ~p:"subscription_proration_behavior" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let subscription_proration_date = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Ptime_t ~p:"subscription_proration_date"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let subscription_resume_at = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_f0d6f3faa7 ~p:"subscription_resume_at"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let subscription_start_date = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Ptime_t ~p:"subscription_start_date"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let subscription_trial_end = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_8a9e68982d ~p:"subscription_trial_end"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetInvoicesUpcomingLines'")
           | _, None -> None in 
         match H.getInvoicesUpcomingLines ?automatic_tax ?coupon ?currency
           ?customer ?customer_details ?discounts ?ending_before ?expand
           ?invoice_items ?issuer ?limit ?on_behalf_of ?preview_mode
           ?schedule ?schedule_details ?starting_after ?subscription
           ?subscription_billing_cycle_anchor ?subscription_cancel_at
           ?subscription_cancel_at_period_end ?subscription_cancel_now
           ?subscription_default_tax_rates ?subscription_details
           ?subscription_items ?subscription_proration_behavior
           ?subscription_proration_date ?subscription_resume_at
           ?subscription_start_date ?subscription_trial_end _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_298a5f6377 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly create ReceivedDebits initiated by third parties.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/treasury/received_debits *)
  let postTestHelpersTreasuryReceivedDebits = let _op = "PostTestHelpersTreasuryReceivedDebits"
    in
    Routes.route (Paths'.postTestHelpersTreasuryReceivedDebits ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_5682e7ca57 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersTreasuryReceivedDebits'")
           | _, None -> None in
         match H.postTestHelpersTreasuryReceivedDebits _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_received_debit ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Allows the user to refund an arbitrary amount, also known as a unlinked refund.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/issuing/transactions/create_unlinked_refund *)
  let postTestHelpersIssuingTransactionsCreateUnlinkedRefund = let _op = "PostTestHelpersIssuingTransactionsCreateUnlinkedRefund"
    in
    Routes.route
      (Paths'.postTestHelpersIssuingTransactionsCreateUnlinkedRefund ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_5d025dbec5 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersIssuingTransactionsCreateUnlinkedRefund'")
           | _, None -> None in
         match H.postTestHelpersIssuingTransactionsCreateUnlinkedRefund _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_transaction ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Create a test-mode authorization.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations *)
  let postTestHelpersIssuingAuthorizations = let _op = "PostTestHelpersIssuingAuthorizations"
    in
    Routes.route (Paths'.postTestHelpersIssuingAuthorizations ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_0372bf8c09 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersIssuingAuthorizations'")
           | _, None -> None in
         match H.postTestHelpersIssuingAuthorizations _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_authorization ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.</p>
      
      <p>When you create a subscription with <code>collection_method=charge_automatically</code>, the first invoice is finalized as part of the request.
      The <code>payment_behavior</code> parameter determines the exact behavior of the initial payment.</p>
      
      <p>To start subscriptions where the first invoice always begins in a <code>draft</code> status, use <a href="/docs/billing/subscriptions/subscription-schedules#managing">subscription schedules</a> instead.
      Schedules provide the flexibility to model more complex billing configurations that change over time.</p>
      
      @see "openapi/spec3.json" /v1/subscriptions *)
  let postSubscriptions = let _op = "PostSubscriptions" in
    Routes.route (Paths'.postSubscriptions ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_43ba264db4 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostSubscriptions'")
           | _, None -> None in
         match H.postSubscriptions _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_subscription ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p>
      
      @see "openapi/spec3.json" /v1/subscriptions *)
  let getSubscriptions = let _op = "GetSubscriptions" in
    Routes.route (Paths'.getSubscriptions ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let automatic_tax = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_b1188f80a4 ~p:"automatic_tax"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let collection_method = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_d2098cac25 ~p:"collection_method"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_900f55e0e4 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let current_period_end = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_dad4a4ac5b ~p:"current_period_end"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let current_period_start = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_dce85b0bb2 ~p:"current_period_start"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let customer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"customer" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let price = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"price" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_a6b80cd539 ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let test_clock = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"test_clock" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetSubscriptions'")
           | _, None -> None in 
         match H.getSubscriptions ?automatic_tax ?collection_method ?created
           ?current_period_end ?current_period_start ?customer ?ending_before
           ?expand ?limit ?price ?starting_after ?status ?test_clock _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_2f50dabf8e ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="https://docs.stripe.com/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p>
      
      @see "openapi/spec3.json" /v1/events *)
  let getEvents = let _op = "GetEvents" in
    Routes.route (Paths'.getEvents ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_194d7f2624 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let delivery_success = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"delivery_success" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let type_ = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"type" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let types = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"types" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetEvents'")
           | _, None -> None in 
         match H.getEvents ?created ?delivery_success ?ending_before ?expand
           ?limit ?starting_after ?type_ ?types _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_a9fe829193 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a configuration that describes the functionality and behavior of a PortalSession</p>
      
      @see "openapi/spec3.json" /v1/billing_portal/configurations *)
  let postBillingPortalConfigurations = let _op = "PostBillingPortalConfigurations"
    in
    Routes.route (Paths'.postBillingPortalConfigurations ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_a30c2d9c78 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostBillingPortalConfigurations'")
           | _, None -> None in
         match H.postBillingPortalConfigurations _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_billing_portal_configuration ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of configurations that describe the functionality of the customer portal.</p>
      
      @see "openapi/spec3.json" /v1/billing_portal/configurations *)
  let getBillingPortalConfigurations = let _op = "GetBillingPortalConfigurations"
    in
    Routes.route (Paths'.getBillingPortalConfigurations ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let active = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"active" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let is_default = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"is_default" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetBillingPortalConfigurations'")
           | _, None -> None in 
         match H.getBillingPortalConfigurations ?active ?ending_before
           ?expand ?is_default ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_f3884ce0bf ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
      
      <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
      
      @see "openapi/spec3.json" /v1/balance/history *)
  let getBalanceHistory = let _op = "GetBalanceHistory" in
    Routes.route (Paths'.getBalanceHistory ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_01b97bcd1e ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let currency = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"currency" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let payout = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"payout" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let source = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"source" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let type_ = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"type" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetBalanceHistory'")
           | _, None -> None in 
         match H.getBalanceHistory ?created ?currency ?ending_before ?expand
           ?limit ?payout ?source ?starting_after ?type_ _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_2202d52174 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>
      
      <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
      
      <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period\[start\]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request. </p>
      
      <p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>
      
      @see "openapi/spec3.json" /v1/invoices/create_preview *)
  let postInvoicesCreatePreview = let _op = "PostInvoicesCreatePreview" in
    Routes.route (Paths'.postInvoicesCreatePreview ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_794a4d2df8 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostInvoicesCreatePreview'")
           | _, None -> None in
         match H.postInvoicesCreatePreview _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_invoice ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a billing meter event adjustment</p>
      
      @see "openapi/spec3.json" /v1/billing/meter_event_adjustments *)
  let postBillingMeterEventAdjustments = let _op = "PostBillingMeterEventAdjustments"
    in
    Routes.route (Paths'.postBillingMeterEventAdjustments ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_a6ac4c70d5 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostBillingMeterEventAdjustments'")
           | _, None -> None in
         match H.postBillingMeterEventAdjustments _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_billing_meter_event_adjustment ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>
      
      @see "openapi/spec3.json" /v1/terminal/connection_tokens *)
  let postTerminalConnectionTokens = let _op = "PostTerminalConnectionTokens"
    in
    Routes.route (Paths'.postTerminalConnectionTokens ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_2752bc4d8e ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTerminalConnectionTokens'")
           | _, None -> None in
         match H.postTerminalConnectionTokens _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_terminal_connection_token ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/physical_bundles *)
  let getIssuingPhysicalBundles = let _op = "GetIssuingPhysicalBundles" in
    Routes.route (Paths'.getIssuingPhysicalBundles ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_3d82a38285 ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let type_ = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_00d4956c80 ~p:"type" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIssuingPhysicalBundles'")
           | _, None -> None in 
         match H.getIssuingPhysicalBundles ?ending_before ?expand ?limit
           ?starting_after ?status ?type_ _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_93afe9bb1d ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Finds a secret in the secret store by name and scope.</p>
      
      @see "openapi/spec3.json" /v1/apps/secrets/find *)
  let getAppsSecretsFind = let _op = "GetAppsSecretsFind" in
    Routes.route (Paths'.getAppsSecretsFind ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let name = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"name" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let scope = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_4a4b8daa1f ~p:"scope" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetAppsSecretsFind'")
           | _, None -> None in 
         let name = match name with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'name' is required by operation 'GetAppsSecretsFind'")
         in 
         let scope = match scope with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'scope' is required by operation 'GetAppsSecretsFind'")
         in
         match H.getAppsSecretsFind ?expand ~name ~scope _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_apps_secret ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a feature</p>
      
      @see "openapi/spec3.json" /v1/entitlements/features *)
  let postEntitlementsFeatures = let _op = "PostEntitlementsFeatures" in
    Routes.route (Paths'.postEntitlementsFeatures ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_899a7d7058 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostEntitlementsFeatures'")
           | _, None -> None in
         match H.postEntitlementsFeatures _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_entitlements_feature ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieve a list of features</p>
      
      @see "openapi/spec3.json" /v1/entitlements/features *)
  let getEntitlementsFeatures = let _op = "GetEntitlementsFeatures" in
    Routes.route (Paths'.getEntitlementsFeatures ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let archived = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"archived" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let lookup_key = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"lookup_key" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetEntitlementsFeatures'")
           | _, None -> None in 
         match H.getEntitlementsFeatures ?archived ?ending_before ?expand
           ?limit ?lookup_key ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_5c8bbeb9fe ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a payment link.</p>
      
      @see "openapi/spec3.json" /v1/payment_links *)
  let postPaymentLinks = let _op = "PostPaymentLinks" in
    Routes.route (Paths'.postPaymentLinks ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_3f26729ec9 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentLinks'")
           | _, None -> None in
         match H.postPaymentLinks _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_link ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of your payment links.</p>
      
      @see "openapi/spec3.json" /v1/payment_links *)
  let getPaymentLinks = let _op = "GetPaymentLinks" in
    Routes.route (Paths'.getPaymentLinks ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let active = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"active" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPaymentLinks'")
           | _, None -> None in 
         match H.getPaymentLinks ?active ?ending_before ?expand ?limit
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_909266bbb4 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>
      
      @see "openapi/spec3.json" /v1/issuing/cardholders *)
  let postIssuingCardholders = let _op = "PostIssuingCardholders" in
    Routes.route (Paths'.postIssuingCardholders ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_7e0601cf2e ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIssuingCardholders'")
           | _, None -> None in
         match H.postIssuingCardholders _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_cardholder ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/cardholders *)
  let getIssuingCardholders = let _op = "GetIssuingCardholders" in
    Routes.route (Paths'.getIssuingCardholders ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_5e23dd8315 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let email = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"email" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let phone_number = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"phone_number" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_d05018810d ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let type_ = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_9b139b4e87 ~p:"type" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIssuingCardholders'")
           | _, None -> None in 
         match H.getIssuingCardholders ?created ?email ?ending_before ?expand
           ?limit ?phone_number ?starting_after ?status ?type_ _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_159106836c ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p>
      
      @see "openapi/spec3.json" /v1/credit_notes/preview/lines *)
  let getCreditNotesPreviewLines = let _op = "GetCreditNotesPreviewLines" in
    Routes.route (Paths'.getCreditNotesPreviewLines ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let amount = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"amount" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let credit_amount = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"credit_amount" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let effective_at = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Ptime_t ~p:"effective_at" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let invoice = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"invoice" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let lines = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_3acf43dc3b ~p:"lines" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let memo = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"memo" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let metadata = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_2551b208c1 ~p:"metadata" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let out_of_band_amount = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"out_of_band_amount" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let reason = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_5780adc875 ~p:"reason" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let refund = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"refund" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let refund_amount = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"refund_amount" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let shipping_cost = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_7d4b84944c ~p:"shipping_cost"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCreditNotesPreviewLines'")
           | _, None -> None in 
         let invoice = match invoice with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'invoice' is required by operation 'GetCreditNotesPreviewLines'")
         in 
         match H.getCreditNotesPreviewLines ?amount ?credit_amount
           ?effective_at ?ending_before ?expand ~invoice ?limit ?lines ?memo
           ?metadata ?out_of_band_amount ?reason ?refund ?refund_amount
           ?shipping_cost ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_78e52fa8e7 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates Tax <code>Settings</code> parameters used in tax calculations. All parameters are editable but none can be removed once set.</p>
      
      @see "openapi/spec3.json" /v1/tax/settings *)
  let postTaxSettings = let _op = "PostTaxSettings" in
    Routes.route (Paths'.postTaxSettings ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_1ce9291b18 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTaxSettings'")
           | _, None -> None in
         match H.postTaxSettings _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_tax_settings ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves Tax <code>Settings</code> for a merchant.</p>
      
      @see "openapi/spec3.json" /v1/tax/settings *)
  let getTaxSettings = let _op = "GetTaxSettings" in
    Routes.route (Paths'.getTaxSettings ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTaxSettings'")
           | _, None -> None in
         match H.getTaxSettings ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_tax_settings ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Calculates tax based on input and returns a Tax <code>Calculation</code> object.</p>
      
      @see "openapi/spec3.json" /v1/tax/calculations *)
  let postTaxCalculations = let _op = "PostTaxCalculations" in
    Routes.route (Paths'.postTaxCalculations ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_28f1ad2c87 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTaxCalculations'")
           | _, None -> None in
         match H.postTaxCalculations _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_tax_calculation ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of your disputes.</p>
      
      @see "openapi/spec3.json" /v1/disputes *)
  let getDisputes = let _op = "GetDisputes" in
    Routes.route (Paths'.getDisputes ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let charge = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"charge" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_d8f80ab533 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let payment_intent = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"payment_intent" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetDisputes'")
           | _, None -> None in 
         match H.getDisputes ?charge ?created ?ending_before ?expand ?limit
           ?payment_intent ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_922afa3fe7 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>
      
      <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
      
      <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass the <code>subscription_details.proration_date</code> parameter when doing the actual subscription update. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period\[start\]</code> is equal to the <code>subscription_details.proration_date</code> value passed in the request.</p>
      
      <p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may vary between the time of the preview and the time of the actual invoice creation. <a href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>
      
      @see "openapi/spec3.json" /v1/invoices/upcoming *)
  let getInvoicesUpcoming = let _op = "GetInvoicesUpcoming" in
    Routes.route (Paths'.getInvoicesUpcoming ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let automatic_tax = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_a51466ec35 ~p:"automatic_tax"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let coupon = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"coupon" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let currency = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"currency" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let customer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"customer" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let customer_details = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_c87881fc5c ~p:"customer_details"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let discounts = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_873409613d ~p:"discounts" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let invoice_items = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_96382fbbc2 ~p:"invoice_items"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let issuer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_266682ce3a ~p:"issuer" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let on_behalf_of = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_9aa5bd9e73 ~p:"on_behalf_of" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let preview_mode = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_50aa3198c9 ~p:"preview_mode" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let schedule = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"schedule" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let schedule_details = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_c4767cb749 ~p:"schedule_details"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let subscription = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"subscription" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let subscription_billing_cycle_anchor = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_312ad6306f
           ~p:"subscription_billing_cycle_anchor" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let subscription_cancel_at = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_b9ba448b2f ~p:"subscription_cancel_at"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let subscription_cancel_at_period_end = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool
           ~p:"subscription_cancel_at_period_end" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let subscription_cancel_now = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"subscription_cancel_now"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let subscription_default_tax_rates = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_0178e1face
           ~p:"subscription_default_tax_rates" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let subscription_details = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_baccbfb036 ~p:"subscription_details"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let subscription_items = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_671de99c34 ~p:"subscription_items"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let subscription_proration_behavior = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_6dff880c24
           ~p:"subscription_proration_behavior" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let subscription_proration_date = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Ptime_t ~p:"subscription_proration_date"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let subscription_resume_at = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_50e9f09abe ~p:"subscription_resume_at"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let subscription_start_date = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Ptime_t ~p:"subscription_start_date"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let subscription_trial_end = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_30748e2d12 ~p:"subscription_trial_end"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetInvoicesUpcoming'")
           | _, None -> None in 
         match H.getInvoicesUpcoming ?automatic_tax ?coupon ?currency
           ?customer ?customer_details ?discounts ?expand ?invoice_items
           ?issuer ?on_behalf_of ?preview_mode ?schedule ?schedule_details
           ?subscription ?subscription_billing_cycle_anchor
           ?subscription_cancel_at ?subscription_cancel_at_period_end
           ?subscription_cancel_now ?subscription_default_tax_rates
           ?subscription_details ?subscription_items
           ?subscription_proration_behavior ?subscription_proration_date
           ?subscription_resume_at ?subscription_start_date
           ?subscription_trial_end _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_invoice ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Create an apple pay domain.</p>
      
      @see "openapi/spec3.json" /v1/apple_pay/domains *)
  let postApplePayDomains = let _op = "PostApplePayDomains" in
    Routes.route (Paths'.postApplePayDomains ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_578ee3d1db ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostApplePayDomains'")
           | _, None -> None in
         match H.postApplePayDomains _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_apple_pay_domain ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>List apple pay domains.</p>
      
      @see "openapi/spec3.json" /v1/apple_pay/domains *)
  let getApplePayDomains = let _op = "GetApplePayDomains" in
    Routes.route (Paths'.getApplePayDomains ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let domain_name = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"domain_name" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetApplePayDomains'")
           | _, None -> None in 
         match H.getApplePayDomains ?domain_name ?ending_before ?expand
           ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_2c4769bee6 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p>
      
      @see "openapi/spec3.json" /v1/radar/value_lists *)
  let postRadarValueLists = let _op = "PostRadarValueLists" in
    Routes.route (Paths'.postRadarValueLists ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_95acbcd7ae ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostRadarValueLists'")
           | _, None -> None in
         match H.postRadarValueLists _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_radar_value_list ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/radar/value_lists *)
  let getRadarValueLists = let _op = "GetRadarValueLists" in
    Routes.route (Paths'.getRadarValueLists ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let alias = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"alias" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let contains = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"contains" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_b205fb898b ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetRadarValueLists'")
           | _, None -> None in 
         match H.getRadarValueLists ?alias ?contains ?created ?ending_before
           ?expand ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_46113411f3 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
      
      @see "openapi/spec3.json" /v1/link_account_sessions *)
  let postLinkAccountSessions = let _op = "PostLinkAccountSessions" in
    Routes.route (Paths'.postLinkAccountSessions ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_5ccaf92d75 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostLinkAccountSessions'")
           | _, None -> None in
         match H.postLinkAccountSessions _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_financial_connections_session ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new file link object.</p>
      
      @see "openapi/spec3.json" /v1/file_links *)
  let postFileLinks = let _op = "PostFileLinks" in
    Routes.route (Paths'.postFileLinks ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_89239a72fa ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostFileLinks'")
           | _, None -> None in
         match H.postFileLinks _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_file_link ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of file links.</p>
      
      @see "openapi/spec3.json" /v1/file_links *)
  let getFileLinks = let _op = "GetFileLinks" in
    Routes.route (Paths'.getFileLinks ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_76bf2704bf ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let expired = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"expired" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let file = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"file" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetFileLinks'")
           | _, None -> None in 
         match H.getFileLinks ?created ?ending_before ?expand ?expired ?file
           ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_725237f1c4 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>
      
      <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
      
      @see "openapi/spec3.json" /v1/coupons *)
  let postCoupons = let _op = "PostCoupons" in
    Routes.route (Paths'.postCoupons ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_fd91397b06 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCoupons'")
           | _, None -> None in
         match H.postCoupons _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_coupon ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of your coupons.</p>
      
      @see "openapi/spec3.json" /v1/coupons *)
  let getCoupons = let _op = "GetCoupons" in
    Routes.route (Paths'.getCoupons ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_8efa015a15 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCoupons'")
           | _, None -> None in 
         match H.getCoupons ?created ?ending_before ?expand ?limit
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_06d31e05e4 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/transactions *)
  let getIssuingTransactions = let _op = "GetIssuingTransactions" in
    Routes.route (Paths'.getIssuingTransactions ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let card = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"card" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let cardholder = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"cardholder" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_a6ed41322f ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let type_ = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_a13fab6ce7 ~p:"type" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIssuingTransactions'")
           | _, None -> None in 
         match H.getIssuingTransactions ?card ?cardholder ?created
           ?ending_before ?expand ?limit ?starting_after ?type_ _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_b1e8ec8e7f ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/authorizations *)
  let getIssuingAuthorizations = let _op = "GetIssuingAuthorizations" in
    Routes.route (Paths'.getIssuingAuthorizations ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let card = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"card" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let cardholder = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"cardholder" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_28b874eafa ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_e7c047a717 ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIssuingAuthorizations'")
           | _, None -> None in 
         match H.getIssuingAuthorizations ?card ?cardholder ?created
           ?ending_before ?expand ?limit ?starting_after ?status _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_426671dc03 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a list of TransactionEntry objects.</p>
      
      @see "openapi/spec3.json" /v1/treasury/transaction_entries *)
  let getTreasuryTransactionEntries = let _op = "GetTreasuryTransactionEntries"
    in
    Routes.route (Paths'.getTreasuryTransactionEntries ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_01243047ea ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let effective_at = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_fa33b5a2bd ~p:"effective_at" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let financial_account = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"financial_account"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let order_by = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_1f08681071 ~p:"order_by" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let transaction = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"transaction" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryTransactionEntries'")
           | _, None -> None in 
         let financial_account = match financial_account with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'financial_account' is required by operation 'GetTreasuryTransactionEntries'")
         in 
         match H.getTreasuryTransactionEntries ?created ?effective_at
           ?ending_before ?expand ~financial_account ?limit ?order_by
           ?starting_after ?transaction _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_6433a1491c ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of ReceivedDebits.</p>
      
      @see "openapi/spec3.json" /v1/treasury/received_debits *)
  let getTreasuryReceivedDebits = let _op = "GetTreasuryReceivedDebits" in
    Routes.route (Paths'.getTreasuryReceivedDebits ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let financial_account = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"financial_account"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_fe86a832fb ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryReceivedDebits'")
           | _, None -> None in 
         let financial_account = match financial_account with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'financial_account' is required by operation 'GetTreasuryReceivedDebits'")
         in 
         match H.getTreasuryReceivedDebits ?ending_before ?expand
           ~financial_account ?limit ?starting_after ?status _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_15e9354091 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates an OutboundTransfer.</p>
      
      @see "openapi/spec3.json" /v1/treasury/outbound_transfers *)
  let postTreasuryOutboundTransfers = let _op = "PostTreasuryOutboundTransfers"
    in
    Routes.route (Paths'.postTreasuryOutboundTransfers ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_d78871063c ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTreasuryOutboundTransfers'")
           | _, None -> None in
         match H.postTreasuryOutboundTransfers _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_outbound_transfer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of OutboundTransfers sent from the specified FinancialAccount.</p>
      
      @see "openapi/spec3.json" /v1/treasury/outbound_transfers *)
  let getTreasuryOutboundTransfers = let _op = "GetTreasuryOutboundTransfers"
    in
    Routes.route (Paths'.getTreasuryOutboundTransfers ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let financial_account = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"financial_account"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_7e023d3347 ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryOutboundTransfers'")
           | _, None -> None in 
         let financial_account = match financial_account with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'financial_account' is required by operation 'GetTreasuryOutboundTransfers'")
         in 
         match H.getTreasuryOutboundTransfers ?ending_before ?expand
           ~financial_account ?limit ?starting_after ?status _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_7f08263a31 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p>
      
      @see "openapi/spec3.json" /v1/transfers *)
  let postTransfers = let _op = "PostTransfers" in
    Routes.route (Paths'.postTransfers ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_304ca2adbe ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTransfers'")
           | _, None -> None in
         match H.postTransfers _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_transfer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p>
      
      @see "openapi/spec3.json" /v1/transfers *)
  let getTransfers = let _op = "GetTransfers" in
    Routes.route (Paths'.getTransfers ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_c5c22bba1c ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let destination = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"destination" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let transfer_group = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"transfer_group" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTransfers'")
           | _, None -> None in 
         match H.getTransfers ?created ?destination ?ending_before ?expand
           ?limit ?starting_after ?transfer_group _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_33072f36c2 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new shipping rate object.</p>
      
      @see "openapi/spec3.json" /v1/shipping_rates *)
  let postShippingRates = let _op = "PostShippingRates" in
    Routes.route (Paths'.postShippingRates ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_1a73a34312 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostShippingRates'")
           | _, None -> None in
         match H.postShippingRates _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_shipping_rate ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of your shipping rates.</p>
      
      @see "openapi/spec3.json" /v1/shipping_rates *)
  let getShippingRates = let _op = "GetShippingRates" in
    Routes.route (Paths'.getShippingRates ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let active = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"active" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_3115fde6ed ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let currency = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"currency" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetShippingRates'")
           | _, None -> None in 
         match H.getShippingRates ?active ?created ?currency ?ending_before
           ?expand ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_455e067f38 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates an Issuing <code>Card</code> object.</p>
      
      @see "openapi/spec3.json" /v1/issuing/cards *)
  let postIssuingCards = let _op = "PostIssuingCards" in
    Routes.route (Paths'.postIssuingCards ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_7ea94600eb ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIssuingCards'")
           | _, None -> None in
         match H.postIssuingCards _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_card ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/cards *)
  let getIssuingCards = let _op = "GetIssuingCards" in
    Routes.route (Paths'.getIssuingCards ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let cardholder = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"cardholder" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_fd32e6450f ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let exp_month = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"exp_month" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let exp_year = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"exp_year" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let last4 = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"last4" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let personalization_design = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"personalization_design"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_e2b1b56eac ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let type_ = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_e42a3414c1 ~p:"type" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIssuingCards'")
           | _, None -> None in 
         match H.getIssuingCards ?cardholder ?created ?ending_before
           ?exp_month ?exp_year ?expand ?last4 ?limit ?personalization_design
           ?starting_after ?status ?type_ _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_c504de1304 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Get a preview of a credit note without creating it.</p>
      
      @see "openapi/spec3.json" /v1/credit_notes/preview *)
  let getCreditNotesPreview = let _op = "GetCreditNotesPreview" in
    Routes.route (Paths'.getCreditNotesPreview ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let amount = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"amount" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let credit_amount = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"credit_amount" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let effective_at = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Ptime_t ~p:"effective_at" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let invoice = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"invoice" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let lines = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_c086813c51 ~p:"lines" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let memo = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"memo" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let metadata = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_fa0c590277 ~p:"metadata" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let out_of_band_amount = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"out_of_band_amount" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let reason = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_935a453a3f ~p:"reason" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let refund = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"refund" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let refund_amount = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"refund_amount" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let shipping_cost = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_c4284eadfd ~p:"shipping_cost"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCreditNotesPreview'")
           | _, None -> None in 
         let invoice = match invoice with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'invoice' is required by operation 'GetCreditNotesPreview'")
         in 
         match H.getCreditNotesPreview ?amount ?credit_amount ?effective_at
           ?expand ~invoice ?lines ?memo ?metadata ?out_of_band_amount
           ?reason ?refund ?refund_amount ?shipping_cost _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_credit_note ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.</p>
      
      @see "openapi/spec3.json" /v1/account_sessions *)
  let postAccountSessions = let _op = "PostAccountSessions" in
    Routes.route (Paths'.postAccountSessions ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_67905fe2c6 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostAccountSessions'")
           | _, None -> None in
         match H.postAccountSessions _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_account_session ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/linked_accounts *)
  let getLinkedAccounts = let _op = "GetLinkedAccounts" in
    Routes.route (Paths'.getLinkedAccounts ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let account_holder = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_89676accde ~p:"account_holder"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let session = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"session" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetLinkedAccounts'")
           | _, None -> None in 
         match H.getLinkedAccounts ?account_holder ?ending_before ?expand
           ?limit ?session ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_6583320a34 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/financial_connections/accounts *)
  let getFinancialConnectionsAccounts = let _op = "GetFinancialConnectionsAccounts"
    in
    Routes.route (Paths'.getFinancialConnectionsAccounts ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let account_holder = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_32de9e954f ~p:"account_holder"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let session = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"session" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetFinancialConnectionsAccounts'")
           | _, None -> None in 
         match H.getFinancialConnectionsAccounts ?account_holder
           ?ending_before ?expand ?limit ?session ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_f2a503228b ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Search for charges you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/charges/search *)
  let getChargesSearch = let _op = "GetChargesSearch" in
    Routes.route (Paths'.getChargesSearch ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let page = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"page" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let query = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"query" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetChargesSearch'")
           | _, None -> None in 
         let query = match query with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'query' is required by operation 'GetChargesSearch'")
         in
         match H.getChargesSearch ?expand ?limit ?page ~query _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_54d21de021 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new test clock that can be attached to new customers and quotes.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks *)
  let postTestHelpersTestClocks = let _op = "PostTestHelpersTestClocks" in
    Routes.route (Paths'.postTestHelpersTestClocks ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_b8bc4c75fe ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersTestClocks'")
           | _, None -> None in
         match H.postTestHelpersTestClocks _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_test_helpers_test_clock ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of your test clocks.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks *)
  let getTestHelpersTestClocks = let _op = "GetTestHelpersTestClocks" in
    Routes.route (Paths'.getTestHelpersTestClocks ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTestHelpersTestClocks'")
           | _, None -> None in 
         match H.getTestHelpersTestClocks ?ending_before ?expand ?limit
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_56aeea4dc2 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a Tax <code>Transaction</code> from a calculation.</p>
      
      @see "openapi/spec3.json" /v1/tax/transactions/create_from_calculation *)
  let postTaxTransactionsCreateFromCalculation = let _op = "PostTaxTransactionsCreateFromCalculation"
    in
    Routes.route (Paths'.postTaxTransactionsCreateFromCalculation ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_ff9dfe3c27 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTaxTransactionsCreateFromCalculation'")
           | _, None -> None in
         match H.postTaxTransactionsCreateFromCalculation _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_tax_transaction ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a payment method configuration</p>
      
      @see "openapi/spec3.json" /v1/payment_method_configurations *)
  let postPaymentMethodConfigurations = let _op = "PostPaymentMethodConfigurations"
    in
    Routes.route (Paths'.postPaymentMethodConfigurations ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_ee2c09384f ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentMethodConfigurations'")
           | _, None -> None in
         match H.postPaymentMethodConfigurations _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_method_configuration ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>List payment method configurations</p>
      
      @see "openapi/spec3.json" /v1/payment_method_configurations *)
  let getPaymentMethodConfigurations = let _op = "GetPaymentMethodConfigurations"
    in
    Routes.route (Paths'.getPaymentMethodConfigurations ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let application = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_41b2207b76 ~p:"application" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPaymentMethodConfigurations'")
           | _, None -> None in 
         match H.getPaymentMethodConfigurations ?application ?ending_before
           ?expand ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_4aa3de8048 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a VerificationSession object.</p>
      
      <p>After the VerificationSession is created, display a verification modal using the session <code>client_secret</code> or send your users to the session’s <code>url</code>.</p>
      
      <p>If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.</p>
      
      <p>Related guide: <a href="/docs/identity/verify-identity-documents">Verify your users’ identity documents</a></p>
      
      @see "openapi/spec3.json" /v1/identity/verification_sessions *)
  let postIdentityVerificationSessions = let _op = "PostIdentityVerificationSessions"
    in
    Routes.route (Paths'.postIdentityVerificationSessions ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_c3c4ee4be6 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIdentityVerificationSessions'")
           | _, None -> None in
         match H.postIdentityVerificationSessions _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_identity_verification_session ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of VerificationSessions</p>
      
      @see "openapi/spec3.json" /v1/identity/verification_sessions *)
  let getIdentityVerificationSessions = let _op = "GetIdentityVerificationSessions"
    in
    Routes.route (Paths'.getIdentityVerificationSessions ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let client_reference_id = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"client_reference_id"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_8333ac0d50 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_060ea1562f ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIdentityVerificationSessions'")
           | _, None -> None in 
         match H.getIdentityVerificationSessions ?client_reference_id
           ?created ?ending_before ?expand ?limit ?starting_after ?status
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_611fc95c22 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Lists all available Climate supplier objects.</p>
      
      @see "openapi/spec3.json" /v1/climate/suppliers *)
  let getClimateSuppliers = let _op = "GetClimateSuppliers" in
    Routes.route (Paths'.getClimateSuppliers ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetClimateSuppliers'")
           | _, None -> None in 
         match H.getClimateSuppliers ?ending_before ?expand ?limit
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_9108407aa1 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
      
      <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
      
      @see "openapi/spec3.json" /v1/balance_transactions *)
  let getBalanceTransactions = let _op = "GetBalanceTransactions" in
    Routes.route (Paths'.getBalanceTransactions ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_e84cc44f8f ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let currency = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"currency" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let payout = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"payout" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let source = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"source" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let type_ = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"type" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetBalanceTransactions'")
           | _, None -> None in 
         match H.getBalanceTransactions ?created ?currency ?ending_before
           ?expand ?limit ?payout ?source ?starting_after ?type_ _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_8c2090b0f2 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates an Issuing <code>Dispute</code> object. Individual pieces of evidence within the <code>evidence</code> object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a> for more details about evidence requirements.</p>
      
      @see "openapi/spec3.json" /v1/issuing/disputes *)
  let postIssuingDisputes = let _op = "PostIssuingDisputes" in
    Routes.route (Paths'.postIssuingDisputes ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_e3c236c6f0 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIssuingDisputes'")
           | _, None -> None in
         match H.postIssuingDisputes _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_dispute ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/issuing/disputes *)
  let getIssuingDisputes = let _op = "GetIssuingDisputes" in
    Routes.route (Paths'.getIssuingDisputes ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_be86c12b19 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_4b1fd7d313 ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let transaction = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"transaction" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIssuingDisputes'")
           | _, None -> None in 
         match H.getIssuingDisputes ?created ?ending_before ?expand ?limit
           ?starting_after ?status ?transaction _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_bd998bd157 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a billing meter</p>
      
      @see "openapi/spec3.json" /v1/billing/meters *)
  let postBillingMeters = let _op = "PostBillingMeters" in
    Routes.route (Paths'.postBillingMeters ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_8abffeff82 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostBillingMeters'")
           | _, None -> None in
         match H.postBillingMeters _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_billing_meter ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieve a list of billing meters.</p>
      
      @see "openapi/spec3.json" /v1/billing/meters *)
  let getBillingMeters = let _op = "GetBillingMeters" in
    Routes.route (Paths'.getBillingMeters ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_b478178155 ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetBillingMeters'")
           | _, None -> None in 
         match H.getBillingMeters ?ending_before ?expand ?limit
           ?starting_after ?status _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_7cdca19673 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a customer session object that includes a single-use client secret that you can use on your front-end to grant client-side API access for certain customer resources.</p>
      
      @see "openapi/spec3.json" /v1/customer_sessions *)
  let postCustomerSessions = let _op = "PostCustomerSessions" in
    Routes.route (Paths'.postCustomerSessions ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_13373ed36b ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCustomerSessions'")
           | _, None -> None in
         match H.postCustomerSessions _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_customer_session ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Search for products you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/products/search *)
  let getProductsSearch = let _op = "GetProductsSearch" in
    Routes.route (Paths'.getProductsSearch ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let page = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"page" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let query = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"query" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetProductsSearch'")
           | _, None -> None in 
         let query = match query with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'query' is required by operation 'GetProductsSearch'")
         in
         match H.getProductsSearch ?expand ?limit ?page ~query _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_be54f3678d ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a ForwardingRequest object.</p>
      
      @see "openapi/spec3.json" /v1/forwarding/requests *)
  let postForwardingRequests = let _op = "PostForwardingRequests" in
    Routes.route (Paths'.postForwardingRequests ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_4793eca8c7 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostForwardingRequests'")
           | _, None -> None in
         match H.postForwardingRequests _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_forwarding_request ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Lists all ForwardingRequest objects.</p>
      
      @see "openapi/spec3.json" /v1/forwarding/requests *)
  let getForwardingRequests = let _op = "GetForwardingRequests" in
    Routes.route (Paths'.getForwardingRequests ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_a63e6bd7de ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetForwardingRequests'")
           | _, None -> None in 
         match H.getForwardingRequests ?created ?ending_before ?expand ?limit
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_893b63e1ac ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new FinancialAccount. For now, each connected account can only have one FinancialAccount.</p>
      
      @see "openapi/spec3.json" /v1/treasury/financial_accounts *)
  let postTreasuryFinancialAccounts = let _op = "PostTreasuryFinancialAccounts"
    in
    Routes.route (Paths'.postTreasuryFinancialAccounts ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_7853ce0404 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTreasuryFinancialAccounts'")
           | _, None -> None in
         match H.postTreasuryFinancialAccounts _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_financial_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of FinancialAccounts.</p>
      
      @see "openapi/spec3.json" /v1/treasury/financial_accounts *)
  let getTreasuryFinancialAccounts = let _op = "GetTreasuryFinancialAccounts"
    in
    Routes.route (Paths'.getTreasuryFinancialAccounts ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_9096085c5b ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryFinancialAccounts'")
           | _, None -> None in 
         match H.getTreasuryFinancialAccounts ?created ?ending_before ?expand
           ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_03e433631d ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a single-use token that represents a bank account’s details.
      You can use this token with any API method in place of a bank account dictionary. You can only use this token once. To do so, attach it to a <a href="#accounts">connected account</a> where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a> is <code>application</code>, which includes Custom accounts.</p>
      
      @see "openapi/spec3.json" /v1/tokens *)
  let postTokens = let _op = "PostTokens" in
    Routes.route (Paths'.postTokens ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_a20dfc8c22 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTokens'")
           | _, None -> None in
         match H.postTokens _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_token ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new tax rate.</p>
      
      @see "openapi/spec3.json" /v1/tax_rates *)
  let postTaxRates = let _op = "PostTaxRates" in
    Routes.route (Paths'.postTaxRates ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_0b4946f6fc ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTaxRates'")
           | _, None -> None in
         match H.postTaxRates _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_tax_rate ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p>
      
      @see "openapi/spec3.json" /v1/tax_rates *)
  let getTaxRates = let _op = "GetTaxRates" in
    Routes.route (Paths'.getTaxRates ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let active = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"active" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_ef1df523db ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let inclusive = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"inclusive" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTaxRates'")
           | _, None -> None in 
         match H.getTaxRates ?active ?created ?ending_before ?expand
           ?inclusive ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_6d5428228f ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of scheduled query runs.</p>
      
      @see "openapi/spec3.json" /v1/sigma/scheduled_query_runs *)
  let getSigmaScheduledQueryRuns = let _op = "GetSigmaScheduledQueryRuns" in
    Routes.route (Paths'.getSigmaScheduledQueryRuns ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetSigmaScheduledQueryRuns'")
           | _, None -> None in 
         match H.getSigmaScheduledQueryRuns ?ending_before ?expand ?limit
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_eca50da3b0 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>A quote models prices and services for a customer. Default options for <code>header</code>, <code>description</code>, <code>footer</code>, and <code>expires_at</code> can be set in the dashboard via the <a href="https://dashboard.stripe.com/settings/billing/quote">quote template</a>.</p>
      
      @see "openapi/spec3.json" /v1/quotes *)
  let postQuotes = let _op = "PostQuotes" in
    Routes.route (Paths'.postQuotes ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_59e65fb449 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostQuotes'")
           | _, None -> None in
         match H.postQuotes _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_quote ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of your quotes.</p>
      
      @see "openapi/spec3.json" /v1/quotes *)
  let getQuotes = let _op = "GetQuotes" in
    Routes.route (Paths'.getQuotes ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let customer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"customer" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_b2c88d22a6 ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let test_clock = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"test_clock" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetQuotes'")
           | _, None -> None in 
         match H.getQuotes ?customer ?ending_before ?expand ?limit
           ?starting_after ?status ?test_clock _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_6abafa8ff5 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new customer object.</p>
      
      @see "openapi/spec3.json" /v1/customers *)
  let postCustomers = let _op = "PostCustomers" in
    Routes.route (Paths'.postCustomers ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_e376b878c0 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCustomers'")
           | _, None -> None in
         match H.postCustomers _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_customer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p>
      
      @see "openapi/spec3.json" /v1/customers *)
  let getCustomers = let _op = "GetCustomers" in
    Routes.route (Paths'.getCustomers ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_8cd3871a8a ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let email = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"email" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let test_clock = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"test_clock" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomers'")
           | _, None -> None in 
         match H.getCustomers ?created ?email ?ending_before ?expand ?limit
           ?starting_after ?test_clock _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_37ec4334cc ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p>
      
      @see "openapi/spec3.json" /v1/application_fees *)
  let getApplicationFees = let _op = "GetApplicationFees" in
    Routes.route (Paths'.getApplicationFees ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let charge = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"charge" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_9d68bdd713 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetApplicationFees'")
           | _, None -> None in 
         match H.getApplicationFees ?charge ?created ?ending_before ?expand
           ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_0a9659a95b ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new source object.</p>
      
      @see "openapi/spec3.json" /v1/sources *)
  let postSources = let _op = "PostSources" in
    Routes.route (Paths'.postSources ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_ceefb946bc ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostSources'")
           | _, None -> None in
         match H.postSources _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_source ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of SetupAttempts that associate with a provided SetupIntent.</p>
      
      @see "openapi/spec3.json" /v1/setup_attempts *)
  let getSetupAttempts = let _op = "GetSetupAttempts" in
    Routes.route (Paths'.getSetupAttempts ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_62ebe57aa0 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let setup_intent = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"setup_intent" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetSetupAttempts'")
           | _, None -> None in 
         let setup_intent = match setup_intent with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'setup_intent' is required by operation 'GetSetupAttempts'")
         in 
         match H.getSetupAttempts ?created ?ending_before ?expand ?limit
           ~setup_intent ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_7e943f39e7 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a PaymentIntent object.</p>
      
      <p>After the PaymentIntent is created, attach a payment method and <a href="/docs/api/payment_intents/confirm">confirm</a>
      to continue the payment. Learn more about <a href="/docs/payments/payment-intents">the available payment flows
      with the Payment Intents API</a>.</p>
      
      <p>When you use <code>confirm=true</code> during creation, it’s equivalent to creating
      and confirming the PaymentIntent in the same call. You can use any parameters
      available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when you supply
      <code>confirm=true</code>.</p>
      
      @see "openapi/spec3.json" /v1/payment_intents *)
  let postPaymentIntents = let _op = "PostPaymentIntents" in
    Routes.route (Paths'.postPaymentIntents ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_52bf04ba74 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentIntents'")
           | _, None -> None in
         match H.postPaymentIntents _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_intent ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of PaymentIntents.</p>
      
      @see "openapi/spec3.json" /v1/payment_intents *)
  let getPaymentIntents = let _op = "GetPaymentIntents" in
    Routes.route (Paths'.getPaymentIntents ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_94e066c621 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let customer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"customer" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPaymentIntents'")
           | _, None -> None in 
         match H.getPaymentIntents ?created ?customer ?ending_before ?expand
           ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_35ca92ace5 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of Financial Connections <code>Transaction</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/financial_connections/transactions *)
  let getFinancialConnectionsTransactions = let _op = "GetFinancialConnectionsTransactions"
    in
    Routes.route (Paths'.getFinancialConnectionsTransactions ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let account = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"account" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let transacted_at = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_656d49aac0 ~p:"transacted_at"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in 
       let transaction_refresh = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_83d5590180 ~p:"transaction_refresh"
           ~loc:`Query ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetFinancialConnectionsTransactions'")
           | _, None -> None in
         let account = match account with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'account' is required by operation 'GetFinancialConnectionsTransactions'")
         in 
         match H.getFinancialConnectionsTransactions ~account ?ending_before
           ?expand ?limit ?starting_after ?transacted_at ?transaction_refresh
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_3224eff6ab ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>A list of <a href="https://stripe.com/docs/tax/tax-categories">all tax codes available</a> to add to Products in order to allow specific tax calculations.</p>
      
      @see "openapi/spec3.json" /v1/tax_codes *)
  let getTaxCodes = let _op = "GetTaxCodes" in
    Routes.route (Paths'.getTaxCodes ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTaxCodes'")
           | _, None -> None in 
         match H.getTaxCodes ?ending_before ?expand ?limit ?starting_after
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_766d30cb77 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new product object.</p>
      
      @see "openapi/spec3.json" /v1/products *)
  let postProducts = let _op = "PostProducts" in
    Routes.route (Paths'.postProducts ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_b53a42e3b7 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostProducts'")
           | _, None -> None in
         match H.postProducts _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_product ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
      
      @see "openapi/spec3.json" /v1/products *)
  let getProducts = let _op = "GetProducts" in
    Routes.route (Paths'.getProducts ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let active = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"active" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_c04b129744 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ids = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"ids" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let shippable = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"shippable" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let url = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"url" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetProducts'")
           | _, None -> None in 
         match H.getProducts ?active ?created ?ending_before ?expand ?ids
           ?limit ?shippable ?starting_after ?url _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_23767204da ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a session of the customer portal.</p>
      
      @see "openapi/spec3.json" /v1/billing_portal/sessions *)
  let postBillingPortalSessions = let _op = "PostBillingPortalSessions" in
    Routes.route (Paths'.postBillingPortalSessions ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_7157acb4f8 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostBillingPortalSessions'")
           | _, None -> None in
         match H.postBillingPortalSessions _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_billing_portal_session ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>This method is no longer recommended—use the <a href="/docs/api/payment_intents">Payment Intents API</a>
      to initiate a new payment instead. Confirmation of the PaymentIntent creates the <code>Charge</code>
      object used to request payment.</p>
      
      @see "openapi/spec3.json" /v1/charges *)
  let postCharges = let _op = "PostCharges" in
    Routes.route (Paths'.postCharges ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_110aeba15a ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCharges'")
           | _, None -> None in
         match H.postCharges _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_charge ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>
      
      @see "openapi/spec3.json" /v1/charges *)
  let getCharges = let _op = "GetCharges" in
    Routes.route (Paths'.getCharges ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_9b9d8d63ef ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let customer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"customer" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let payment_intent = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"payment_intent" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let transfer_group = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"transfer_group" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCharges'")
           | _, None -> None in 
         match H.getCharges ?created ?customer ?ending_before ?expand ?limit
           ?payment_intent ?starting_after ?transfer_group _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_e9250fb72c ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p>
      
      @see "openapi/spec3.json" /v1/radar/value_list_items *)
  let postRadarValueListItems = let _op = "PostRadarValueListItems" in
    Routes.route (Paths'.postRadarValueListItems ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_a1c266101e ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostRadarValueListItems'")
           | _, None -> None in
         match H.postRadarValueListItems _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_radar_value_list_item ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
      
      @see "openapi/spec3.json" /v1/radar/value_list_items *)
  let getRadarValueListItems = let _op = "GetRadarValueListItems" in
    Routes.route (Paths'.getRadarValueListItems ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_438f8e3e47 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let value = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"value" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let value_list = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"value_list" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetRadarValueListItems'")
           | _, None -> None in 
         let value_list = match value_list with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'value_list' is required by operation 'GetRadarValueListItems'")
         in
         match H.getRadarValueListItems ?created ?ending_before ?expand
           ?limit ?starting_after ?value ~value_list _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_8856fbd6de ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a payment method domain.</p>
      
      @see "openapi/spec3.json" /v1/payment_method_domains *)
  let postPaymentMethodDomains = let _op = "PostPaymentMethodDomains" in
    Routes.route (Paths'.postPaymentMethodDomains ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_ed10fbf1d5 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentMethodDomains'")
           | _, None -> None in
         match H.postPaymentMethodDomains _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_method_domain ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Lists the details of existing payment method domains.</p>
      
      @see "openapi/spec3.json" /v1/payment_method_domains *)
  let getPaymentMethodDomains = let _op = "GetPaymentMethodDomains" in
    Routes.route (Paths'.getPaymentMethodDomains ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let domain_name = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"domain_name" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let enabled = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"enabled" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPaymentMethodDomains'")
           | _, None -> None in 
         match H.getPaymentMethodDomains ?domain_name ?enabled ?ending_before
           ?expand ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_ae8386a4f0 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of ReceivedCredits.</p>
      
      @see "openapi/spec3.json" /v1/treasury/received_credits *)
  let getTreasuryReceivedCredits = let _op = "GetTreasuryReceivedCredits" in
    Routes.route (Paths'.getTreasuryReceivedCredits ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let financial_account = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"financial_account"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let linked_flows = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_99ae8c4576 ~p:"linked_flows" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_ae96c50be4 ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryReceivedCredits'")
           | _, None -> None in 
         let financial_account = match financial_account with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'financial_account' is required by operation 'GetTreasuryReceivedCredits'")
         in 
         match H.getTreasuryReceivedCredits ?ending_before ?expand
           ~financial_account ?limit ?linked_flows ?starting_after ?status
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_f5d8852fd7 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates an OutboundPayment.</p>
      
      @see "openapi/spec3.json" /v1/treasury/outbound_payments *)
  let postTreasuryOutboundPayments = let _op = "PostTreasuryOutboundPayments"
    in
    Routes.route (Paths'.postTreasuryOutboundPayments ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_d8144f8c6c ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTreasuryOutboundPayments'")
           | _, None -> None in
         match H.postTreasuryOutboundPayments _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_outbound_payment ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of OutboundPayments sent from the specified FinancialAccount.</p>
      
      @see "openapi/spec3.json" /v1/treasury/outbound_payments *)
  let getTreasuryOutboundPayments = let _op = "GetTreasuryOutboundPayments"
    in
    Routes.route (Paths'.getTreasuryOutboundPayments ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_fd0b444db8 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let customer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"customer" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let financial_account = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"financial_account"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_e134f021a2 ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryOutboundPayments'")
           | _, None -> None in 
         let financial_account = match financial_account with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'financial_account' is required by operation 'GetTreasuryOutboundPayments'")
         in 
         match H.getTreasuryOutboundPayments ?created ?customer
           ?ending_before ?expand ~financial_account ?limit ?starting_after
           ?status _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_b6ddc430a3 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new <code>Reader</code> object.</p>
      
      @see "openapi/spec3.json" /v1/terminal/readers *)
  let postTerminalReaders = let _op = "PostTerminalReaders" in
    Routes.route (Paths'.postTerminalReaders ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_51e4bf726b ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTerminalReaders'")
           | _, None -> None in
         match H.postTerminalReaders _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_terminal_reader ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of <code>Reader</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/terminal/readers *)
  let getTerminalReaders = let _op = "GetTerminalReaders" in
    Routes.route (Paths'.getTerminalReaders ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let device_type = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_477c159e47 ~p:"device_type" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let location = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"location" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let serial_number = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"serial_number" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_76a6cf8994 ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTerminalReaders'")
           | _, None -> None in 
         match H.getTerminalReaders ?device_type ?ending_before ?expand
           ?limit ?location ?serial_number ?starting_after ?status _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_a08011fc7e ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new account or customer <code>tax_id</code> object.</p>
      
      @see "openapi/spec3.json" /v1/tax_ids *)
  let postTaxIds = let _op = "PostTaxIds" in
    Routes.route (Paths'.postTaxIds ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_6b2866cf6b ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTaxIds'")
           | _, None -> None in
         match H.postTaxIds _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_tax_id ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of tax IDs.</p>
      
      @see "openapi/spec3.json" /v1/tax_ids *)
  let getTaxIds = let _op = "GetTaxIds" in
    Routes.route (Paths'.getTaxIds ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let owner = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_17690afaaf ~p:"owner" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTaxIds'")
           | _, None -> None in 
         match H.getTaxIds ?ending_before ?expand ?limit ?owner
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_dd3507c4bc ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new Tax <code>Registration</code> object.</p>
      
      @see "openapi/spec3.json" /v1/tax/registrations *)
  let postTaxRegistrations = let _op = "PostTaxRegistrations" in
    Routes.route (Paths'.postTaxRegistrations ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_d4cfd141aa ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTaxRegistrations'")
           | _, None -> None in
         match H.postTaxRegistrations _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_tax_registration ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of Tax <code>Registration</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/tax/registrations *)
  let getTaxRegistrations = let _op = "GetTaxRegistrations" in
    Routes.route (Paths'.getTaxRegistrations ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_66eb6371e3 ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTaxRegistrations'")
           | _, None -> None in 
         match H.getTaxRegistrations ?ending_before ?expand ?limit
           ?starting_after ?status _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_d15b8e2101 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a billing meter event</p>
      
      @see "openapi/spec3.json" /v1/billing/meter_events *)
  let postBillingMeterEvents = let _op = "PostBillingMeterEvents" in
    Routes.route (Paths'.postBillingMeterEvents ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_be3cd11bea ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostBillingMeterEvents'")
           | _, None -> None in
         match H.postBillingMeterEvents _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_billing_meter_event ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a SetupIntent object.</p>
      
      <p>After you create the SetupIntent, attach a payment method and <a href="/docs/api/setup_intents/confirm">confirm</a>
      it to collect any required permissions to charge the payment method later.</p>
      
      @see "openapi/spec3.json" /v1/setup_intents *)
  let postSetupIntents = let _op = "PostSetupIntents" in
    Routes.route (Paths'.postSetupIntents ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_0ec470b3d8 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostSetupIntents'")
           | _, None -> None in
         match H.postSetupIntents _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_setup_intent ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of SetupIntents.</p>
      
      @see "openapi/spec3.json" /v1/setup_intents *)
  let getSetupIntents = let _op = "GetSetupIntents" in
    Routes.route (Paths'.getSetupIntents ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let attach_to_self = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"attach_to_self" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_47dcc46a23 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let customer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"customer" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let payment_method = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"payment_method" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetSetupIntents'")
           | _, None -> None in 
         match H.getSetupIntents ?attach_to_self ?created ?customer
           ?ending_before ?expand ?limit ?payment_method ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_239fb21d51 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users.
      To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>
      
      <p>If you’ve already collected information for your connected accounts, you <a href="/docs/connect/best-practices#onboarding">can prefill that information</a> when
      creating the account. Connect Onboarding won’t ask for the prefilled information during account onboarding.
      You can prefill any information on the account.</p>
      
      @see "openapi/spec3.json" /v1/accounts *)
  let postAccounts = let _op = "PostAccounts" in
    Routes.route (Paths'.postAccounts ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_ccb3a5d119 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostAccounts'")
           | _, None -> None in
         match H.postAccounts _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p>
      
      @see "openapi/spec3.json" /v1/accounts *)
  let getAccounts = let _op = "GetAccounts" in
    Routes.route (Paths'.getAccounts ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_ab8d71cc96 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetAccounts'")
           | _, None -> None in 
         match H.getAccounts ?created ?ending_before ?expand ?limit
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_e9e70482f6 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Search for prices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/prices/search *)
  let getPricesSearch = let _op = "GetPricesSearch" in
    Routes.route (Paths'.getPricesSearch ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let page = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"page" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let query = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"query" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPricesSearch'")
           | _, None -> None in 
         let query = match query with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'query' is required by operation 'GetPricesSearch'")
         in
         match H.getPricesSearch ?expand ?limit ?page ~query _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_b12b4b0777 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>To upload a file to Stripe, you need to send a request of type <code>multipart/form-data</code>. Include the file you want to upload in the request, and the parameters for creating a file.</p>
      
      <p>All of Stripe’s officially supported Client libraries support sending <code>multipart/form-data</code>.</p>
      
      @see "openapi/spec3.json" /v1/files *)
  let postFiles = let _op = "PostFiles" in
    Routes.route (Paths'.postFiles ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       try let _req = _body in
         match H.postFiles _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_file ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of the files that your account has access to. Stripe sorts and returns the files by their creation dates, placing the most recently created files at the top.</p>
      
      @see "openapi/spec3.json" /v1/files *)
  let getFiles = let _op = "GetFiles" in
    Routes.route (Paths'.getFiles ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_2657bcad54 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let purpose = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_512e4129fd ~p:"purpose" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetFiles'")
           | _, None -> None in 
         match H.getFiles ?created ?ending_before ?expand ?limit ?purpose
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_2a634191d6 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a full list of Report Types.</p>
      
      @see "openapi/spec3.json" /v1/reporting/report_types *)
  let getReportingReportTypes = let _op = "GetReportingReportTypes" in
    Routes.route (Paths'.getReportingReportTypes ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetReportingReportTypes'")
           | _, None -> None in
         match H.getReportingReportTypes ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_e7f85dc1b8 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you <a href="#finalize_invoice">finalize</a> the invoice, which allows you to <a href="#pay_invoice">pay</a> or <a href="#send_invoice">send</a> the invoice to your customers.</p>
      
      @see "openapi/spec3.json" /v1/invoices *)
  let postInvoices = let _op = "PostInvoices" in
    Routes.route (Paths'.postInvoices ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_f4dd4bd97f ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostInvoices'")
           | _, None -> None in
         match H.postInvoices _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_invoice ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>
      
      @see "openapi/spec3.json" /v1/invoices *)
  let getInvoices = let _op = "GetInvoices" in
    Routes.route (Paths'.getInvoices ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let collection_method = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_3d308e0087 ~p:"collection_method"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_5fae893ff7 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let customer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"customer" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let due_date = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_e8ff8d2aa0 ~p:"due_date" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_2e0259263b ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let subscription = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"subscription" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetInvoices'")
           | _, None -> None in 
         match H.getInvoices ?collection_method ?created ?customer ?due_date
           ?ending_before ?expand ?limit ?starting_after ?status
           ?subscription _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_3fdedd95af ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Lists all Country Spec objects available in the API.</p>
      
      @see "openapi/spec3.json" /v1/country_specs *)
  let getCountrySpecs = let _op = "GetCountrySpecs" in
    Routes.route (Paths'.getCountrySpecs ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCountrySpecs'")
           | _, None -> None in 
         match H.getCountrySpecs ?ending_before ?expand ?limit
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_dae1032511 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Deletes a secret from the secret store by name and scope.</p>
      
      @see "openapi/spec3.json" /v1/apps/secrets/delete *)
  let postAppsSecretsDelete = let _op = "PostAppsSecretsDelete" in
    Routes.route (Paths'.postAppsSecretsDelete ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_612edc5ff6 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostAppsSecretsDelete'")
           | _, None -> None in
         match H.postAppsSecretsDelete _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_apps_secret ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p>
      
      @see "openapi/spec3.json" /v1/account_links *)
  let postAccountLinks = let _op = "PostAccountLinks" in
    Routes.route (Paths'.postAccountLinks ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_af021e5cb9 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostAccountLinks'")
           | _, None -> None in
         match H.postAccountLinks _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_account_link ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p>
      
      <p>Instead of creating a PaymentMethod directly, we recommend using the <a href="/docs/payments/accept-a-payment">PaymentIntents</a> API to accept a payment immediately or the <a href="/docs/payments/save-and-reuse">SetupIntent</a> API to collect payment method details ahead of a future payment.</p>
      
      @see "openapi/spec3.json" /v1/payment_methods *)
  let postPaymentMethods = let _op = "PostPaymentMethods" in
    Routes.route (Paths'.postPaymentMethods ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_e421cf319c ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentMethods'")
           | _, None -> None in
         match H.postPaymentMethods _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_method ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer for payments, you should use the <a href="/docs/api/payment_methods/customer_list">List a Customer’s PaymentMethods</a> API instead.</p>
      
      @see "openapi/spec3.json" /v1/payment_methods *)
  let getPaymentMethods = let _op = "GetPaymentMethods" in
    Routes.route (Paths'.getPaymentMethods ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let customer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"customer" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let type_ = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_735ee27343 ~p:"type" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPaymentMethods'")
           | _, None -> None in 
         match H.getPaymentMethods ?customer ?ending_before ?expand ?limit
           ?starting_after ?type_ _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_74744e00a9 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
      
      @see "openapi/spec3.json" /v1/financial_connections/sessions *)
  let postFinancialConnectionsSessions = let _op = "PostFinancialConnectionsSessions"
    in
    Routes.route (Paths'.postFinancialConnectionsSessions ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_cde4466fd6 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostFinancialConnectionsSessions'")
           | _, None -> None in
         match H.postFinancialConnectionsSessions _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_financial_connections_session ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Reverses a ReceivedCredit and creates a CreditReversal object.</p>
      
      @see "openapi/spec3.json" /v1/treasury/credit_reversals *)
  let postTreasuryCreditReversals = let _op = "PostTreasuryCreditReversals"
    in
    Routes.route (Paths'.postTreasuryCreditReversals ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_a5c801e05a ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTreasuryCreditReversals'")
           | _, None -> None in
         match H.postTreasuryCreditReversals _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_credit_reversal ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of CreditReversals.</p>
      
      @see "openapi/spec3.json" /v1/treasury/credit_reversals *)
  let getTreasuryCreditReversals = let _op = "GetTreasuryCreditReversals" in
    Routes.route (Paths'.getTreasuryCreditReversals ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let financial_account = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"financial_account"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let received_credit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"received_credit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_de06274f51 ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryCreditReversals'")
           | _, None -> None in 
         let financial_account = match financial_account with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'financial_account' is required by operation 'GetTreasuryCreditReversals'")
         in 
         match H.getTreasuryCreditReversals ?ending_before ?expand
           ~financial_account ?limit ?received_credit ?starting_after ?status
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_cd83af3254 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Top up the balance of an account</p>
      
      @see "openapi/spec3.json" /v1/topups *)
  let postTopups = let _op = "PostTopups" in
    Routes.route (Paths'.postTopups ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_022e0bcd29 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTopups'")
           | _, None -> None in
         match H.postTopups _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_topup ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of top-ups.</p>
      
      @see "openapi/spec3.json" /v1/topups *)
  let getTopups = let _op = "GetTopups" in
    Routes.route (Paths'.getTopups ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let amount = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_6684cf5aa7 ~p:"amount" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_ca787dca43 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_ce1d711154 ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTopups'")
           | _, None -> None in 
         match H.getTopups ?amount ?created ?ending_before ?expand ?limit
           ?starting_after ?status _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_b3bb6e49c1 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new <code>Location</code> object.
      For further details, including which address fields are required in each country, see the <a href="/docs/terminal/fleet/locations">Manage locations</a> guide.</p>
      
      @see "openapi/spec3.json" /v1/terminal/locations *)
  let postTerminalLocations = let _op = "PostTerminalLocations" in
    Routes.route (Paths'.postTerminalLocations ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_37595dc516 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTerminalLocations'")
           | _, None -> None in
         match H.postTerminalLocations _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_terminal_location ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of <code>Location</code> objects.</p>
      
      @see "openapi/spec3.json" /v1/terminal/locations *)
  let getTerminalLocations = let _op = "GetTerminalLocations" in
    Routes.route (Paths'.getTerminalLocations ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTerminalLocations'")
           | _, None -> None in 
         match H.getTerminalLocations ?ending_before ?expand ?limit
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_18896ee670 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Search for invoices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query Language</a>.
      Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
      conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
      to an hour behind during outages. Search functionality is not available to merchants in India.</p>
      
      @see "openapi/spec3.json" /v1/invoices/search *)
  let getInvoicesSearch = let _op = "GetInvoicesSearch" in
    Routes.route (Paths'.getInvoicesSearch ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let page = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"page" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let query = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"query" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetInvoicesSearch'")
           | _, None -> None in 
         let query = match query with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'query' is required by operation 'GetInvoicesSearch'")
         in
         match H.getInvoicesSearch ?expand ?limit ?page ~query _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_0dd02c6566 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Partially or fully reverses a previously created <code>Transaction</code>.</p>
      
      @see "openapi/spec3.json" /v1/tax/transactions/create_reversal *)
  let postTaxTransactionsCreateReversal = let _op = "PostTaxTransactionsCreateReversal"
    in
    Routes.route (Paths'.postTaxTransactionsCreateReversal ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_dffa1193e7 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTaxTransactionsCreateReversal'")
           | _, None -> None in
         match H.postTaxTransactionsCreateReversal _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_tax_transaction ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of early fraud warnings.</p>
      
      @see "openapi/spec3.json" /v1/radar/early_fraud_warnings *)
  let getRadarEarlyFraudWarnings = let _op = "GetRadarEarlyFraudWarnings" in
    Routes.route (Paths'.getRadarEarlyFraudWarnings ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let charge = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"charge" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_902cd52d55 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let payment_intent = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"payment_intent" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetRadarEarlyFraudWarnings'")
           | _, None -> None in 
         match H.getRadarEarlyFraudWarnings ?charge ?created ?ending_before
           ?expand ?limit ?payment_intent ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_c75c63afbf ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>To send funds to your own bank account, create a new payout object. Your <a href="#balance">Stripe balance</a> must cover the payout amount. If it doesn’t, you receive an “Insufficient Funds” error.</p>
      
      <p>If your API key is in test mode, money won’t actually be sent, though every other action occurs as if you’re in live mode.</p>
      
      <p>If you create a manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance that the payout draws from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>
      
      @see "openapi/spec3.json" /v1/payouts *)
  let postPayouts = let _op = "PostPayouts" in
    Routes.route (Paths'.postPayouts ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_14881ac1de ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPayouts'")
           | _, None -> None in
         match H.postPayouts _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payout ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts return in sorted order, with the most recently created payouts appearing first.</p>
      
      @see "openapi/spec3.json" /v1/payouts *)
  let getPayouts = let _op = "GetPayouts" in
    Routes.route (Paths'.getPayouts ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let arrival_date = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_dfda23638e ~p:"arrival_date" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_78f6837d46 ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let destination = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"destination" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let status = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"status" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPayouts'")
           | _, None -> None in 
         match H.getPayouts ?arrival_date ?created ?destination
           ?ending_before ?expand ?limit ?starting_after ?status _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_1db4f9e6c3 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.</p>
      
      @see "openapi/spec3.json" /v1/promotion_codes *)
  let postPromotionCodes = let _op = "PostPromotionCodes" in
    Routes.route (Paths'.postPromotionCodes ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_cd74e8c628 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPromotionCodes'")
           | _, None -> None in
         match H.postPromotionCodes _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_promotion_code ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of your promotion codes.</p>
      
      @see "openapi/spec3.json" /v1/promotion_codes *)
  let getPromotionCodes = let _op = "GetPromotionCodes" in
    Routes.route (Paths'.getPromotionCodes ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let active = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Bool ~p:"active" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let code = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"code" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let coupon = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"coupon" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_1d3358b59f ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let customer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"customer" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPromotionCodes'")
           | _, None -> None in 
         match H.getPromotionCodes ?active ?code ?coupon ?created ?customer
           ?ending_before ?expand ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_2bf486f9cb ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a test mode Confirmation Token server side for your integration tests.</p>
      
      @see "openapi/spec3.json" /v1/test_helpers/confirmation_tokens *)
  let postTestHelpersConfirmationTokens = let _op = "PostTestHelpersConfirmationTokens"
    in
    Routes.route (Paths'.postTestHelpersConfirmationTokens ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_c84b074f55 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersConfirmationTokens'")
           | _, None -> None in
         match H.postTestHelpersConfirmationTokens _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_confirmation_token ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p>
      
      @see "openapi/spec3.json" /v1/subscription_items *)
  let postSubscriptionItems = let _op = "PostSubscriptionItems" in
    Routes.route (Paths'.postSubscriptionItems ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_bfa35cdc31 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostSubscriptionItems'")
           | _, None -> None in
         match H.postSubscriptionItems _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_subscription_item ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of your subscription items for a given subscription.</p>
      
      @see "openapi/spec3.json" /v1/subscription_items *)
  let getSubscriptionItems = let _op = "GetSubscriptionItems" in
    Routes.route (Paths'.getSubscriptionItems ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let subscription = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"subscription" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetSubscriptionItems'")
           | _, None -> None in 
         let subscription = match subscription with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'subscription' is required by operation 'GetSubscriptionItems'")
         in
         match H.getSubscriptionItems ?ending_before ?expand ?limit
           ?starting_after ~subscription _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_d9f7fccdc8 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>List all verification reports.</p>
      
      @see "openapi/spec3.json" /v1/identity/verification_reports *)
  let getIdentityVerificationReports = let _op = "GetIdentityVerificationReports"
    in
    Routes.route (Paths'.getIdentityVerificationReports ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let client_reference_id = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"client_reference_id"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_b566f1b6bc ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let type_ = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_53be0c51ff ~p:"type" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let verification_session = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"verification_session"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIdentityVerificationReports'")
           | _, None -> None in 
         match H.getIdentityVerificationReports ?client_reference_id ?created
           ?ending_before ?expand ?limit ?starting_after ?type_
           ?verification_session _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_29f9765270 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces
      its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result
      in any combination of the following:</p>
      
      <ul>
      <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li>
      <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li>
      <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li>
      </ul>
      
      <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>
      
      <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code>
      or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
      
      @see "openapi/spec3.json" /v1/credit_notes *)
  let postCreditNotes = let _op = "PostCreditNotes" in
    Routes.route (Paths'.postCreditNotes ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_e1077cf4c3 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCreditNotes'")
           | _, None -> None in
         match H.postCreditNotes _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_credit_note ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of credit notes.</p>
      
      @see "openapi/spec3.json" /v1/credit_notes *)
  let getCreditNotes = let _op = "GetCreditNotes" in
    Routes.route (Paths'.getCreditNotes ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let created = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_d1452a2e6d ~p:"created" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let customer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"customer" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let invoice = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"invoice" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCreditNotes'")
           | _, None -> None in 
         match H.getCreditNotes ?created ?customer ?ending_before ?expand
           ?invoice ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_4187904f5b ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Lists all available Climate product objects.</p>
      
      @see "openapi/spec3.json" /v1/climate/products *)
  let getClimateProducts = let _op = "GetClimateProducts" in
    Routes.route (Paths'.getClimateProducts ())
      (fun (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetClimateProducts'")
           | _, None -> None in 
         match H.getClimateProducts ?ending_before ?expand ?limit
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_b683fe32c7 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p>
      
      @param webhook_endpoint webhook_endpoint
      @see "openapi/spec3.json" /v1/webhook_endpoints/\{webhook_endpoint\} *)
  let deleteWebhookEndpointsWebhookEndpoint = let _op = "DeleteWebhookEndpointsWebhookEndpoint"
    in
    Routes.route (Paths'.deleteWebhookEndpointsWebhookEndpoint ())
      (fun webhook_endpoint (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteWebhookEndpointsWebhookEndpoint'")
           | _, None -> None in
         match H.deleteWebhookEndpointsWebhookEndpoint ~webhook_endpoint _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_webhook_endpoint ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p>
      
      @param webhook_endpoint webhook_endpoint
      @see "openapi/spec3.json" /v1/webhook_endpoints/\{webhook_endpoint\} *)
  let postWebhookEndpointsWebhookEndpoint = let _op = "PostWebhookEndpointsWebhookEndpoint"
    in
    Routes.route (Paths'.postWebhookEndpointsWebhookEndpoint ())
      (fun webhook_endpoint (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_9298cf8106 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostWebhookEndpointsWebhookEndpoint'")
           | _, None -> None in
         match H.postWebhookEndpointsWebhookEndpoint ~webhook_endpoint _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_webhook_endpoint ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the webhook endpoint with the given ID.</p>
      
      @param webhook_endpoint webhook_endpoint
      @see "openapi/spec3.json" /v1/webhook_endpoints/\{webhook_endpoint\} *)
  let getWebhookEndpointsWebhookEndpoint = let _op = "GetWebhookEndpointsWebhookEndpoint"
    in
    Routes.route (Paths'.getWebhookEndpointsWebhookEndpoint ())
      (fun webhook_endpoint (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetWebhookEndpointsWebhookEndpoint'")
           | _, None -> None in
         match H.getWebhookEndpointsWebhookEndpoint ~webhook_endpoint ?expand
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_webhook_endpoint ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Increment a test-mode Authorization.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations/\{authorization\}/increment *)
  let postTestHelpersIssuingAuthorizationsAuthorizationIncrement = let _op = "PostTestHelpersIssuingAuthorizationsAuthorizationIncrement"
    in
    Routes.route
      (Paths'.postTestHelpersIssuingAuthorizationsAuthorizationIncrement ())
      (fun authorization (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_080ebc81a7 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersIssuingAuthorizationsAuthorizationIncrement'")
           | _, None -> None in
         match H.postTestHelpersIssuingAuthorizationsAuthorizationIncrement
           ~authorization _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_authorization ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\} *)
  let deleteCustomersCustomer = let _op = "DeleteCustomersCustomer" in
    Routes.route (Paths'.deleteCustomersCustomer ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteCustomersCustomer'")
           | _, None -> None in
         match H.deleteCustomersCustomer ~customer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_customer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>
      
      <p>This request accepts mostly the same arguments as the customer creation call.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\} *)
  let postCustomersCustomer = let _op = "PostCustomersCustomer" in
    Routes.route (Paths'.postCustomersCustomer ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_ccfda63fd5 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCustomersCustomer'")
           | _, None -> None in
         match H.postCustomersCustomer ~customer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_customer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a Customer object.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\} *)
  let getCustomersCustomer = let _op = "GetCustomersCustomer" in
    Routes.route (Paths'.getCustomersCustomer ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomer'")
           | _, None -> None in
         match H.getCustomersCustomer ~customer ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_a33375052d ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p>
      
      @param plan plan
      @see "openapi/spec3.json" /v1/plans/\{plan\} *)
  let deletePlansPlan = let _op = "DeletePlansPlan" in
    Routes.route (Paths'.deletePlansPlan ())
      (fun plan (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeletePlansPlan'")
           | _, None -> None in
         match H.deletePlansPlan ~plan _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_plan ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p>
      
      @param plan plan
      @see "openapi/spec3.json" /v1/plans/\{plan\} *)
  let postPlansPlan = let _op = "PostPlansPlan" in
    Routes.route (Paths'.postPlansPlan ())
      (fun plan (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_1f7b8fed6b ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPlansPlan'")
           | _, None -> None in
         match H.postPlansPlan ~plan _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_plan ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the plan with the given ID.</p>
      
      @param plan plan
      @see "openapi/spec3.json" /v1/plans/\{plan\} *)
  let getPlansPlan = let _op = "GetPlansPlan" in
    Routes.route (Paths'.getPlansPlan ())
      (fun plan (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPlansPlan'")
           | _, None -> None in
         match H.getPlansPlan ~plan ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_plan ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>With <a href="/connect">Connect</a>, you can delete accounts you manage.</p>
      
      <p>Test-mode accounts can be deleted at any time.</p>
      
      <p>Live-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be deleted when all <a href="/api/balance/balanace_object">balances</a> are zero.</p>
      
      <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/settings/account">account information tab in your account settings</a> instead.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\} *)
  let deleteAccountsAccount = let _op = "DeleteAccountsAccount" in
    Routes.route (Paths'.deleteAccountsAccount ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteAccountsAccount'")
           | _, None -> None in
         match H.deleteAccountsAccount ~account _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates a <a href="/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are
      left unchanged.</p>
      
      <p>For accounts where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a>
      is <code>application</code>, which includes Custom accounts, you can update any information on the account.</p>
      
      <p>For accounts where <a href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a>
      is <code>stripe</code>, which includes Standard and Express accounts, you can update all information until you create
      an <a href="/api/account_links">Account Link</a> or <a href="/api/account_sessions">Account Session</a> to start Connect onboarding,
      after which some properties can no longer be updated.</p>
      
      <p>To update your own account, use the <a href="https://dashboard.stripe.com/settings/account">Dashboard</a>. Refer to our
      <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\} *)
  let postAccountsAccount = let _op = "PostAccountsAccount" in
    Routes.route (Paths'.postAccountsAccount ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_89178ede20 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostAccountsAccount'")
           | _, None -> None in
         match H.postAccountsAccount ~account _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an account.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\} *)
  let getAccountsAccount = let _op = "GetAccountsAccount" in
    Routes.route (Paths'.getAccountsAccount ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetAccountsAccount'")
           | _, None -> None in
         match H.getAccountsAccount ~account ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Cancels an InboundTransfer.</p>
      
      @param inbound_transfer inbound_transfer
      @see "openapi/spec3.json" /v1/treasury/inbound_transfers/\{inbound_transfer\}/cancel *)
  let postTreasuryInboundTransfersInboundTransferCancel = let _op = "PostTreasuryInboundTransfersInboundTransferCancel"
    in
    Routes.route
      (Paths'.postTreasuryInboundTransfersInboundTransferCancel ())
      (fun inbound_transfer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_6f63e55d30 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTreasuryInboundTransfersInboundTransferCancel'")
           | _, None -> None in
         match H.postTreasuryInboundTransfersInboundTransferCancel
           ~inbound_transfer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_inbound_transfer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Deletes a <code>Configuration</code> object.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/terminal/configurations/\{configuration\} *)
  let deleteTerminalConfigurationsConfiguration = let _op = "DeleteTerminalConfigurationsConfiguration"
    in
    Routes.route (Paths'.deleteTerminalConfigurationsConfiguration ())
      (fun configuration (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteTerminalConfigurationsConfiguration'")
           | _, None -> None in
         match H.deleteTerminalConfigurationsConfiguration ~configuration
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_terminal_configuration ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates a new <code>Configuration</code> object.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/terminal/configurations/\{configuration\} *)
  let postTerminalConfigurationsConfiguration = let _op = "PostTerminalConfigurationsConfiguration"
    in
    Routes.route (Paths'.postTerminalConfigurationsConfiguration ())
      (fun configuration (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_171e2b03d7 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTerminalConfigurationsConfiguration'")
           | _, None -> None in
         match H.postTerminalConfigurationsConfiguration ~configuration _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_d5eeab4c25 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a <code>Configuration</code> object.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/terminal/configurations/\{configuration\} *)
  let getTerminalConfigurationsConfiguration = let _op = "GetTerminalConfigurationsConfiguration"
    in
    Routes.route (Paths'.getTerminalConfigurationsConfiguration ())
      (fun configuration (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTerminalConfigurationsConfiguration'")
           | _, None -> None in
         match H.getTerminalConfigurationsConfiguration ~configuration
           ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_95f3d529c1 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of a Financial Connections <code>Session</code></p>
      
      @param session session
      @see "openapi/spec3.json" /v1/financial_connections/sessions/\{session\} *)
  let getFinancialConnectionsSessionsSession = let _op = "GetFinancialConnectionsSessionsSession"
    in
    Routes.route (Paths'.getFinancialConnectionsSessionsSession ())
      (fun session (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetFinancialConnectionsSessionsSession'")
           | _, None -> None in
         match H.getFinancialConnectionsSessionsSession ~session ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_financial_connections_session ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Finalizes the quote.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/finalize *)
  let postQuotesQuoteFinalize = let _op = "PostQuotesQuoteFinalize" in
    Routes.route (Paths'.postQuotesQuoteFinalize ())
      (fun quote (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_5702cbe755 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostQuotesQuoteFinalize'")
           | _, None -> None in
         match H.postQuotesQuoteFinalize ~quote _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_quote ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to <code>Ready</code>.</p>
      
      @param test_clock test_clock
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks/\{test_clock\}/advance *)
  let postTestHelpersTestClocksTestClockAdvance = let _op = "PostTestHelpersTestClocksTestClockAdvance"
    in
    Routes.route (Paths'.postTestHelpersTestClocksTestClockAdvance ())
      (fun test_clock (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_791a007bd3 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersTestClocksTestClockAdvance'")
           | _, None -> None in
         match H.postTestHelpersTestClocksTestClockAdvance ~test_clock _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_test_helpers_test_clock ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>List source transactions for a given source.</p>
      
      @param source source
      @see "openapi/spec3.json" /v1/sources/\{source\}/source_transactions *)
  let getSourcesSourceSourceTransactions = let _op = "GetSourcesSourceSourceTransactions"
    in
    Routes.route (Paths'.getSourcesSourceSourceTransactions ())
      (fun source (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetSourcesSourceSourceTransactions'")
           | _, None -> None in 
         match H.getSourcesSourceSourceTransactions ~source ?ending_before
           ?expand ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_f3516c2ed7 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\} *)
  let postChargesCharge = let _op = "PostChargesCharge" in
    Routes.route (Paths'.postChargesCharge ())
      (fun charge (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_0e88b91b2f ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostChargesCharge'")
           | _, None -> None in
         match H.postChargesCharge ~charge _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_charge ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\} *)
  let getChargesCharge = let _op = "GetChargesCharge" in
    Routes.route (Paths'.getChargesCharge ())
      (fun charge (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetChargesCharge'")
           | _, None -> None in
         match H.getChargesCharge ~charge ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_charge ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates a payment link.</p>
      
      @param payment_link payment_link
      @see "openapi/spec3.json" /v1/payment_links/\{payment_link\} *)
  let postPaymentLinksPaymentLink = let _op = "PostPaymentLinksPaymentLink"
    in
    Routes.route (Paths'.postPaymentLinksPaymentLink ())
      (fun payment_link (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_9b926cecf2 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentLinksPaymentLink'")
           | _, None -> None in
         match H.postPaymentLinksPaymentLink ~payment_link _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_link ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieve a payment link.</p>
      
      @param payment_link payment_link
      @see "openapi/spec3.json" /v1/payment_links/\{payment_link\} *)
  let getPaymentLinksPaymentLink = let _op = "GetPaymentLinksPaymentLink" in
    Routes.route (Paths'.getPaymentLinksPaymentLink ())
      (fun payment_link (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPaymentLinksPaymentLink'")
           | _, None -> None in
         match H.getPaymentLinksPaymentLink ~payment_link ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_link ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit list.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/received_credits/\{id\} *)
  let getTreasuryReceivedCreditsId = let _op = "GetTreasuryReceivedCreditsId"
    in
    Routes.route (Paths'.getTreasuryReceivedCreditsId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryReceivedCreditsId'")
           | _, None -> None in
         match H.getTreasuryReceivedCreditsId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_received_credit ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates a test mode created OutboundTransfer with tracking details. The OutboundTransfer must not be cancelable, and cannot be in the <code>canceled</code> or <code>failed</code> states.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_transfers/\{outbound_transfer\} *)
  let postTestHelpersTreasuryOutboundTransfersOutboundTransfer = let _op = "PostTestHelpersTreasuryOutboundTransfersOutboundTransfer"
    in
    Routes.route
      (Paths'.postTestHelpersTreasuryOutboundTransfersOutboundTransfer ())
      (fun outbound_transfer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_a55a65347d ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersTreasuryOutboundTransfersOutboundTransfer'")
           | _, None -> None in
         match H.postTestHelpersTreasuryOutboundTransfersOutboundTransfer
           ~outbound_transfer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_outbound_transfer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates an existing subscription schedule.</p>
      
      @param schedule schedule
      @see "openapi/spec3.json" /v1/subscription_schedules/\{schedule\} *)
  let postSubscriptionSchedulesSchedule = let _op = "PostSubscriptionSchedulesSchedule"
    in
    Routes.route (Paths'.postSubscriptionSchedulesSchedule ())
      (fun schedule (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_75107ffbeb ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostSubscriptionSchedulesSchedule'")
           | _, None -> None in
         match H.postSubscriptionSchedulesSchedule ~schedule _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_subscription_schedule ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p>
      
      @param schedule schedule
      @see "openapi/spec3.json" /v1/subscription_schedules/\{schedule\} *)
  let getSubscriptionSchedulesSchedule = let _op = "GetSubscriptionSchedulesSchedule"
    in
    Routes.route (Paths'.getSubscriptionSchedulesSchedule ())
      (fun schedule (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetSubscriptionSchedulesSchedule'")
           | _, None -> None in
         match H.getSubscriptionSchedulesSchedule ~schedule ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_subscription_schedule ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates a VerificationSession object.</p>
      
      <p>When the session status is <code>requires_input</code>, you can use this method to update the
      verification check and options.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/identity/verification_sessions/\{session\} *)
  let postIdentityVerificationSessionsSession = let _op = "PostIdentityVerificationSessionsSession"
    in
    Routes.route (Paths'.postIdentityVerificationSessionsSession ())
      (fun session (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_194f6521ef ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIdentityVerificationSessionsSession'")
           | _, None -> None in
         match H.postIdentityVerificationSessionsSession ~session _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_identity_verification_session ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of a VerificationSession that was previously created.</p>
      
      <p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid
      <code>client_secret</code> or <code>url</code> to allow re-submission.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/identity/verification_sessions/\{session\} *)
  let getIdentityVerificationSessionsSession = let _op = "GetIdentityVerificationSessionsSession"
    in
    Routes.route (Paths'.getIdentityVerificationSessionsSession ())
      (fun session (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIdentityVerificationSessionsSession'")
           | _, None -> None in
         match H.getIdentityVerificationSessionsSession ~session ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_identity_verification_session ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p>
      
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/payment_methods/\{payment_method\} *)
  let postPaymentMethodsPaymentMethod = let _op = "PostPaymentMethodsPaymentMethod"
    in
    Routes.route (Paths'.postPaymentMethodsPaymentMethod ())
      (fun payment_method (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_60145a641e ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentMethodsPaymentMethod'")
           | _, None -> None in
         match H.postPaymentMethodsPaymentMethod ~payment_method _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_method ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer, you should use <a href="/docs/api/payment_methods/customer">Retrieve a Customer’s PaymentMethods</a></p>
      
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/payment_methods/\{payment_method\} *)
  let getPaymentMethodsPaymentMethod = let _op = "GetPaymentMethodsPaymentMethod"
    in
    Routes.route (Paths'.getPaymentMethodsPaymentMethod ())
      (fun payment_method (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPaymentMethodsPaymentMethod'")
           | _, None -> None in
         match H.getPaymentMethodsPaymentMethod ~payment_method ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_method ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a Session object.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/checkout/sessions/\{session\} *)
  let getCheckoutSessionsSession = let _op = "GetCheckoutSessionsSession" in
    Routes.route (Paths'.getCheckoutSessionsSession ())
      (fun session (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCheckoutSessionsSession'")
           | _, None -> None in
         match H.getCheckoutSessionsSession ~session ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_checkout_session ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Initiates a setup intent flow on a Reader.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/process_setup_intent *)
  let postTerminalReadersReaderProcessSetupIntent = let _op = "PostTerminalReadersReaderProcessSetupIntent"
    in
    Routes.route (Paths'.postTerminalReadersReaderProcessSetupIntent ())
      (fun reader (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_eafcec1a11 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTerminalReadersReaderProcessSetupIntent'")
           | _, None -> None in
         match H.postTerminalReadersReaderProcessSetupIntent ~reader _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_terminal_reader ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p>
      
      @param value_list value_list
      @see "openapi/spec3.json" /v1/radar/value_lists/\{value_list\} *)
  let deleteRadarValueListsValueList = let _op = "DeleteRadarValueListsValueList"
    in
    Routes.route (Paths'.deleteRadarValueListsValueList ())
      (fun value_list (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteRadarValueListsValueList'")
           | _, None -> None in
         match H.deleteRadarValueListsValueList ~value_list _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_radar_value_list ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p>
      
      @param value_list value_list
      @see "openapi/spec3.json" /v1/radar/value_lists/\{value_list\} *)
  let postRadarValueListsValueList = let _op = "PostRadarValueListsValueList"
    in
    Routes.route (Paths'.postRadarValueListsValueList ())
      (fun value_list (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_878209b421 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostRadarValueListsValueList'")
           | _, None -> None in
         match H.postRadarValueListsValueList ~value_list _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_radar_value_list ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a <code>ValueList</code> object.</p>
      
      @param value_list value_list
      @see "openapi/spec3.json" /v1/radar/value_lists/\{value_list\} *)
  let getRadarValueListsValueList = let _op = "GetRadarValueListsValueList"
    in
    Routes.route (Paths'.getRadarValueListsValueList ())
      (fun value_list (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetRadarValueListsValueList'")
           | _, None -> None in
         match H.getRadarValueListsValueList ~value_list ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_radar_value_list ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>
      
      <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/disputes/\{dispute\} *)
  let postDisputesDispute = let _op = "PostDisputesDispute" in
    Routes.route (Paths'.postDisputesDispute ())
      (fun dispute (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_aa5914890d ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostDisputesDispute'")
           | _, None -> None in
         match H.postDisputesDispute ~dispute _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_dispute ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the dispute with the given ID.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/disputes/\{dispute\} *)
  let getDisputesDispute = let _op = "GetDisputesDispute" in
    Routes.route (Paths'.getDisputesDispute ())
      (fun dispute (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetDisputesDispute'")
           | _, None -> None in
         match H.getDisputesDispute ~dispute ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_dispute ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a physical bundle object.</p>
      
      @param physical_bundle physical_bundle
      @see "openapi/spec3.json" /v1/issuing/physical_bundles/\{physical_bundle\} *)
  let getIssuingPhysicalBundlesPhysicalBundle = let _op = "GetIssuingPhysicalBundlesPhysicalBundle"
    in
    Routes.route (Paths'.getIssuingPhysicalBundlesPhysicalBundle ())
      (fun physical_bundle (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIssuingPhysicalBundlesPhysicalBundle'")
           | _, None -> None in
         match H.getIssuingPhysicalBundlesPhysicalBundle ~physical_bundle
           ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_physical_bundle ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the CreditReversal creation request or CreditReversal list</p>
      
      @param credit_reversal credit_reversal
      @see "openapi/spec3.json" /v1/treasury/credit_reversals/\{credit_reversal\} *)
  let getTreasuryCreditReversalsCreditReversal = let _op = "GetTreasuryCreditReversalsCreditReversal"
    in
    Routes.route (Paths'.getTreasuryCreditReversalsCreditReversal ())
      (fun credit_reversal (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryCreditReversalsCreditReversal'")
           | _, None -> None in
         match H.getTreasuryCreditReversalsCreditReversal ~credit_reversal
           ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_credit_reversal ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the line items of a committed standalone transaction as a collection.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/tax/transactions/\{transaction\}/line_items *)
  let getTaxTransactionsTransactionLineItems = let _op = "GetTaxTransactionsTransactionLineItems"
    in
    Routes.route (Paths'.getTaxTransactionsTransactionLineItems ())
      (fun transaction (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTaxTransactionsTransactionLineItems'")
           | _, None -> None in 
         match H.getTaxTransactionsTransactionLineItems ~transaction
           ?ending_before ?expand ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_ff63b43cc3 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>
      
      <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/send *)
  let postInvoicesInvoiceSend = let _op = "PostInvoicesInvoiceSend" in
    Routes.route (Paths'.postInvoicesInvoiceSend ())
      (fun invoice (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_20e4e9cd0c ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostInvoicesInvoiceSend'")
           | _, None -> None in
         match H.postInvoicesInvoiceSend ~invoice _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_invoice ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Deactivates a billing meter</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\}/deactivate *)
  let postBillingMetersIdDeactivate = let _op = "PostBillingMetersIdDeactivate"
    in
    Routes.route (Paths'.postBillingMetersIdDeactivate ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_55d5f288f2 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostBillingMetersIdDeactivate'")
           | _, None -> None in
         match H.postBillingMetersIdDeactivate ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_billing_meter ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>rejected</code>.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/test_helpers/issuing/personalization_designs/\{personalization_design\}/reject *)
  let postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject = 
    let _op = "PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject"
    in
    Routes.route
      (Paths'.postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject ())
      (fun personalization_design (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_dd895638f0 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject'")
           | _, None -> None in
         match H.postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject
           ~personalization_design _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_personalization_design ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Verifies microdeposits on a SetupIntent object.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\}/verify_microdeposits *)
  let postSetupIntentsIntentVerifyMicrodeposits = let _op = "PostSetupIntentsIntentVerifyMicrodeposits"
    in
    Routes.route (Paths'.postSetupIntentsIntentVerifyMicrodeposits ())
      (fun intent (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_c64a825721 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostSetupIntentsIntentVerifyMicrodeposits'")
           | _, None -> None in
         match H.postSetupIntentsIntentVerifyMicrodeposits ~intent _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_setup_intent ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Changes the settings on a customer’s cash balance.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cash_balance *)
  let postCustomersCustomerCashBalance = let _op = "PostCustomersCustomerCashBalance"
    in
    Routes.route (Paths'.postCustomersCustomerCashBalance ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_0700419bcc ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCustomersCustomerCashBalance'")
           | _, None -> None in
         match H.postCustomersCustomerCashBalance ~customer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_cash_balance ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a customer’s cash balance.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cash_balance *)
  let getCustomersCustomerCashBalance = let _op = "GetCustomersCustomerCashBalance"
    in
    Routes.route (Paths'.getCustomersCustomerCashBalance ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerCashBalance'")
           | _, None -> None in
         match H.getCustomersCustomerCashBalance ~customer ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_cash_balance ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates properties on a PaymentIntent object without confirming.</p>
      
      <p>Depending on which properties you update, you might need to confirm the
      PaymentIntent again. For example, updating the <code>payment_method</code>
      always requires you to confirm the PaymentIntent again. If you prefer to
      update and confirm at the same time, we recommend updating properties through
      the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\} *)
  let postPaymentIntentsIntent = let _op = "PostPaymentIntentsIntent" in
    Routes.route (Paths'.postPaymentIntentsIntent ())
      (fun intent (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_4a360b8862 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentIntentsIntent'")
           | _, None -> None in
         match H.postPaymentIntentsIntent ~intent _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_intent ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of a PaymentIntent that has previously been created. </p>
      
      <p>You can retrieve a PaymentIntent client-side using a publishable key when the <code>client_secret</code> is in the query string. </p>
      
      <p>If you retrieve a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\} *)
  let getPaymentIntentsIntent = let _op = "GetPaymentIntentsIntent" in
    Routes.route (Paths'.getPaymentIntentsIntent ())
      (fun intent (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let client_secret = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"client_secret" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPaymentIntentsIntent'")
           | _, None -> None in 
         match H.getPaymentIntentsIntent ~intent ?client_secret ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_intent ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a TransactionEntry object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/transaction_entries/\{id\} *)
  let getTreasuryTransactionEntriesId = let _op = "GetTreasuryTransactionEntriesId"
    in
    Routes.route (Paths'.getTreasuryTransactionEntriesId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryTransactionEntriesId'")
           | _, None -> None in
         match H.getTreasuryTransactionEntriesId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_transaction_entry ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p>
      
      @param invoiceitem invoiceitem
      @see "openapi/spec3.json" /v1/invoiceitems/\{invoiceitem\} *)
  let deleteInvoiceitemsInvoiceitem = let _op = "DeleteInvoiceitemsInvoiceitem"
    in
    Routes.route (Paths'.deleteInvoiceitemsInvoiceitem ())
      (fun invoiceitem (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteInvoiceitemsInvoiceitem'")
           | _, None -> None in
         match H.deleteInvoiceitemsInvoiceitem ~invoiceitem _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_invoiceitem ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p>
      
      @param invoiceitem invoiceitem
      @see "openapi/spec3.json" /v1/invoiceitems/\{invoiceitem\} *)
  let postInvoiceitemsInvoiceitem = let _op = "PostInvoiceitemsInvoiceitem"
    in
    Routes.route (Paths'.postInvoiceitemsInvoiceitem ())
      (fun invoiceitem (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_d10dfee0d1 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostInvoiceitemsInvoiceitem'")
           | _, None -> None in
         match H.postInvoiceitemsInvoiceitem ~invoiceitem _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_invoiceitem ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the invoice item with the given ID.</p>
      
      @param invoiceitem invoiceitem
      @see "openapi/spec3.json" /v1/invoiceitems/\{invoiceitem\} *)
  let getInvoiceitemsInvoiceitem = let _op = "GetInvoiceitemsInvoiceitem" in
    Routes.route (Paths'.getInvoiceitemsInvoiceitem ())
      (fun invoiceitem (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetInvoiceitemsInvoiceitem'")
           | _, None -> None in
         match H.getInvoiceitemsInvoiceitem ~invoiceitem ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_invoiceitem ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Create an incoming testmode bank transfer</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/test_helpers/customers/\{customer\}/fund_cash_balance *)
  let postTestHelpersCustomersCustomerFundCashBalance = let _op = "PostTestHelpersCustomersCustomerFundCashBalance"
    in
    Routes.route (Paths'.postTestHelpersCustomersCustomerFundCashBalance ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_b230fe05a9 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersCustomersCustomerFundCashBalance'")
           | _, None -> None in
         match H.postTestHelpersCustomersCustomerFundCashBalance ~customer
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_customer_cash_balance_transaction ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the specified order by setting the values of the parameters passed.</p>
      
      @param order Unique identifier of the order.
      @see "openapi/spec3.json" /v1/climate/orders/\{order\} *)
  let postClimateOrdersOrder = let _op = "PostClimateOrdersOrder" in
    Routes.route (Paths'.postClimateOrdersOrder ())
      (fun order (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_3d31dce950 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostClimateOrdersOrder'")
           | _, None -> None in
         match H.postClimateOrdersOrder ~order _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_climate_order ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of a Climate order object with the given ID.</p>
      
      @param order Unique identifier of the order.
      @see "openapi/spec3.json" /v1/climate/orders/\{order\} *)
  let getClimateOrdersOrder = let _op = "GetClimateOrdersOrder" in
    Routes.route (Paths'.getClimateOrdersOrder ())
      (fun order (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetClimateOrdersOrder'")
           | _, None -> None in
         match H.getClimateOrdersOrder ~order ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_climate_order ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer, new
      funding instructions will be created. If funding instructions have already been created for a given customer, the same
      funding instructions will be retrieved. In other words, we will return the same funding instructions each time.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/funding_instructions *)
  let postCustomersCustomerFundingInstructions = let _op = "PostCustomersCustomerFundingInstructions"
    in
    Routes.route (Paths'.postCustomersCustomerFundingInstructions ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_b31edc1c47 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCustomersCustomerFundingInstructions'")
           | _, None -> None in
         match H.postCustomersCustomerFundingInstructions ~customer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_funding_instructions ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you don’t provide. This request only accepts the metadata as arguments.</p>
      
      @param payout payout
      @see "openapi/spec3.json" /v1/payouts/\{payout\} *)
  let postPayoutsPayout = let _op = "PostPayoutsPayout" in
    Routes.route (Paths'.postPayoutsPayout ())
      (fun payout (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_758f437535 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPayoutsPayout'")
           | _, None -> None in
         match H.postPayoutsPayout ~payout _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payout ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list. Stripe returns the corresponding payout information.</p>
      
      @param payout payout
      @see "openapi/spec3.json" /v1/payouts/\{payout\} *)
  let getPayoutsPayout = let _op = "GetPayoutsPayout" in
    Routes.route (Paths'.getPayoutsPayout ())
      (fun payout (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPayoutsPayout'")
           | _, None -> None in
         match H.getPayoutsPayout ~payout ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payout ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new person.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people *)
  let postAccountsAccountPeople = let _op = "PostAccountsAccountPeople" in
    Routes.route (Paths'.postAccountsAccountPeople ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_bcec995787 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostAccountsAccountPeople'")
           | _, None -> None in
         match H.postAccountsAccountPeople ~account _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_person ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people *)
  let getAccountsAccountPeople = let _op = "GetAccountsAccountPeople" in
    Routes.route (Paths'.getAccountsAccountPeople ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let relationship = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_8dfdeac1ad ~p:"relationship" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetAccountsAccountPeople'")
           | _, None -> None in 
         match H.getAccountsAccountPeople ~account ?ending_before ?expand
           ?limit ?relationship ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_fde3b546b3 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the details of a FinancialAccount.</p>
      
      @param financial_account financial_account
      @see "openapi/spec3.json" /v1/treasury/financial_accounts/\{financial_account\} *)
  let postTreasuryFinancialAccountsFinancialAccount = let _op = "PostTreasuryFinancialAccountsFinancialAccount"
    in
    Routes.route (Paths'.postTreasuryFinancialAccountsFinancialAccount ())
      (fun financial_account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_0ff6a5a72c ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTreasuryFinancialAccountsFinancialAccount'")
           | _, None -> None in
         match H.postTreasuryFinancialAccountsFinancialAccount
           ~financial_account _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_financial_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of a FinancialAccount.</p>
      
      @param financial_account financial_account
      @see "openapi/spec3.json" /v1/treasury/financial_accounts/\{financial_account\} *)
  let getTreasuryFinancialAccountsFinancialAccount = let _op = "GetTreasuryFinancialAccountsFinancialAccount"
    in
    Routes.route (Paths'.getTreasuryFinancialAccountsFinancialAccount ())
      (fun financial_account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryFinancialAccountsFinancialAccount'")
           | _, None -> None in
         match H.getTreasuryFinancialAccountsFinancialAccount
           ~financial_account ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_financial_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Expire a refund with a status of <code>requires_action</code>.</p>
      
      @param refund refund
      @see "openapi/spec3.json" /v1/test_helpers/refunds/\{refund\}/expire *)
  let postTestHelpersRefundsRefundExpire = let _op = "PostTestHelpersRefundsRefundExpire"
    in
    Routes.route (Paths'.postTestHelpersRefundsRefundExpire ())
      (fun refund (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_6672714713 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersRefundsRefundExpire'")
           | _, None -> None in
         match H.postTestHelpersRefundsRefundExpire ~refund _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_refund ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an scheduled query run.</p>
      
      @param scheduled_query_run scheduled_query_run
      @see "openapi/spec3.json" /v1/sigma/scheduled_query_runs/\{scheduled_query_run\} *)
  let getSigmaScheduledQueryRunsScheduledQueryRun = let _op = "GetSigmaScheduledQueryRunsScheduledQueryRun"
    in
    Routes.route (Paths'.getSigmaScheduledQueryRunsScheduledQueryRun ())
      (fun scheduled_query_run (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetSigmaScheduledQueryRunsScheduledQueryRun'")
           | _, None -> None in
         match H.getSigmaScheduledQueryRunsScheduledQueryRun
           ~scheduled_query_run ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_scheduled_query_run ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/refresh *)
  let postFinancialConnectionsAccountsAccountRefresh = let _op = "PostFinancialConnectionsAccountsAccountRefresh"
    in
    Routes.route (Paths'.postFinancialConnectionsAccountsAccountRefresh ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_9c2b26fa6b ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostFinancialConnectionsAccountsAccountRefresh'")
           | _, None -> None in
         match H.postFinancialConnectionsAccountsAccountRefresh ~account _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_financial_connections_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Confirm that your customer intends to pay with current or provided
      payment method. Upon confirmation, the PaymentIntent will attempt to initiate
      a payment.
      If the selected payment method requires additional authentication steps, the
      PaymentIntent will transition to the <code>requires_action</code> status and
      suggest additional actions via <code>next_action</code>. If payment fails,
      the PaymentIntent transitions to the <code>requires_payment_method</code> status or the
      <code>canceled</code> status if the confirmation limit is reached. If
      payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
      status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).
      If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
      using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
      and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
      After <code>next_action</code>s are handled by the client, no additional
      confirmation is required to complete the payment.
      If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
      initiated using a secret key.
      If any actions are required for the payment, the PaymentIntent will
      return to the <code>requires_confirmation</code> state
      after those actions are completed. Your server needs to then
      explicitly re-confirm the PaymentIntent to initiate the next payment
      attempt.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/confirm *)
  let postPaymentIntentsIntentConfirm = let _op = "PostPaymentIntentsIntentConfirm"
    in
    Routes.route (Paths'.postPaymentIntentsIntentConfirm ())
      (fun intent (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_d3f7d69ce7 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentIntentsIntentConfirm'")
           | _, None -> None in
         match H.postPaymentIntentsIntentConfirm ~intent _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_intent ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates a configuration that describes the functionality of the customer portal.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/billing_portal/configurations/\{configuration\} *)
  let postBillingPortalConfigurationsConfiguration = let _op = "PostBillingPortalConfigurationsConfiguration"
    in
    Routes.route (Paths'.postBillingPortalConfigurationsConfiguration ())
      (fun configuration (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_9eb8fe0469 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostBillingPortalConfigurationsConfiguration'")
           | _, None -> None in
         match H.postBillingPortalConfigurationsConfiguration ~configuration
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_billing_portal_configuration ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a configuration that describes the functionality of the customer portal.</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/billing_portal/configurations/\{configuration\} *)
  let getBillingPortalConfigurationsConfiguration = let _op = "GetBillingPortalConfigurationsConfiguration"
    in
    Routes.route (Paths'.getBillingPortalConfigurationsConfiguration ())
      (fun configuration (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetBillingPortalConfigurationsConfiguration'")
           | _, None -> None in
         match H.getBillingPortalConfigurationsConfiguration ~configuration
           ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_billing_portal_configuration ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Deletes an existing account or customer <code>tax_id</code> object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax_ids/\{id\} *)
  let deleteTaxIdsId = let _op = "DeleteTaxIdsId" in
    Routes.route (Paths'.deleteTaxIdsId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteTaxIdsId'")
           | _, None -> None in
         match H.deleteTaxIdsId ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_tax_id ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves an account or customer <code>tax_id</code> object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax_ids/\{id\} *)
  let getTaxIdsId = let _op = "GetTaxIdsId" in
    Routes.route (Paths'.getTaxIdsId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTaxIdsId'")
           | _, None -> None in
         match H.getTaxIdsId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_tax_id ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>A quote models prices and services for a customer.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\} *)
  let postQuotesQuote = let _op = "PostQuotesQuote" in
    Routes.route (Paths'.postQuotesQuote ())
      (fun quote (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_9c06359ad3 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostQuotesQuote'")
           | _, None -> None in
         match H.postQuotesQuote ~quote _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_quote ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the quote with the given ID.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\} *)
  let getQuotesQuote = let _op = "GetQuotesQuote" in
    Routes.route (Paths'.getQuotesQuote ())
      (fun quote (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetQuotesQuote'")
           | _, None -> None in
         match H.getQuotesQuote ~quote ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_quote ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/credit_notes/\{id\}/void *)
  let postCreditNotesIdVoid = let _op = "PostCreditNotesIdVoid" in
    Routes.route (Paths'.postCreditNotesIdVoid ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_3bb839257d ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCreditNotesIdVoid'")
           | _, None -> None in
         match H.postCreditNotesIdVoid ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_credit_note ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>\[Deprecated\] Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow. 
      This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to approve an authorization</a>.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/issuing/authorizations/\{authorization\}/approve *)
  let postIssuingAuthorizationsAuthorizationApprove = let _op = "PostIssuingAuthorizationsAuthorizationApprove"
    in
    Routes.route (Paths'.postIssuingAuthorizationsAuthorizationApprove ())
      (fun authorization (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_e235b824c0 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIssuingAuthorizationsAuthorizationApprove'")
           | _, None -> None in
         match H.postIssuingAuthorizationsAuthorizationApprove ~authorization
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_authorization ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a ForwardingRequest object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/forwarding/requests/\{id\} *)
  let getForwardingRequestsId = let _op = "GetForwardingRequestsId" in
    Routes.route (Paths'.getForwardingRequestsId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetForwardingRequestsId'")
           | _, None -> None in
         match H.getForwardingRequestsId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_forwarding_request ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an early fraud warning that has previously been created. </p>
      
      <p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
      
      @param early_fraud_warning early_fraud_warning
      @see "openapi/spec3.json" /v1/radar/early_fraud_warnings/\{early_fraud_warning\} *)
  let getRadarEarlyFraudWarningsEarlyFraudWarning = let _op = "GetRadarEarlyFraudWarningsEarlyFraudWarning"
    in
    Routes.route (Paths'.getRadarEarlyFraudWarningsEarlyFraudWarning ())
      (fun early_fraud_warning (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetRadarEarlyFraudWarningsEarlyFraudWarning'")
           | _, None -> None in
         match H.getRadarEarlyFraudWarningsEarlyFraudWarning
           ~early_fraud_warning ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_radar_early_fraud_warning ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates a test mode created OutboundPayment with tracking details. The OutboundPayment must not be cancelable, and cannot be in the <code>canceled</code> or <code>failed</code> states.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_payments/\{id\} *)
  let postTestHelpersTreasuryOutboundPaymentsId = let _op = "PostTestHelpersTreasuryOutboundPaymentsId"
    in
    Routes.route (Paths'.postTestHelpersTreasuryOutboundPaymentsId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_c381952697 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersTreasuryOutboundPaymentsId'")
           | _, None -> None in
         match H.postTestHelpersTreasuryOutboundPaymentsId ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_outbound_payment ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/subscription_items/\{item\} *)
  let deleteSubscriptionItemsItem = let _op = "DeleteSubscriptionItemsItem"
    in
    Routes.route (Paths'.deleteSubscriptionItemsItem ())
      (fun item (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_bac8413461 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteSubscriptionItemsItem'")
           | _, None -> None in
         match H.deleteSubscriptionItemsItem ~item _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_subscription_item ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the plan or quantity of an item on a current subscription.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/subscription_items/\{item\} *)
  let postSubscriptionItemsItem = let _op = "PostSubscriptionItemsItem" in
    Routes.route (Paths'.postSubscriptionItemsItem ())
      (fun item (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_82f4439e13 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostSubscriptionItemsItem'")
           | _, None -> None in
         match H.postSubscriptionItemsItem ~item _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_subscription_item ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the subscription item with the given ID.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/subscription_items/\{item\} *)
  let getSubscriptionItemsItem = let _op = "GetSubscriptionItemsItem" in
    Routes.route (Paths'.getSubscriptionItemsItem ())
      (fun item (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetSubscriptionItemsItem'")
           | _, None -> None in
         match H.getSubscriptionItemsItem ~item ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_subscription_item ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>When you create a new refund, you must specify either a Charge or a PaymentIntent object.</p>
      
      <p>This action refunds a previously created charge that’s not refunded yet.
      Funds are refunded to the credit or debit card that’s originally charged.</p>
      
      <p>You can optionally refund only part of a charge.
      You can repeat this until the entire charge is refunded.</p>
      
      <p>After you entirely refund a charge, you can’t refund it again.
      This method raises an error when it’s called on an already-refunded charge,
      or when you attempt to refund more money than is left on a charge.</p>
      
      @param charge The identifier of the charge to refund.
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refund *)
  let postChargesChargeRefund = let _op = "PostChargesChargeRefund" in
    Routes.route (Paths'.postChargesChargeRefund ())
      (fun charge (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_6fb1415a2f ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostChargesChargeRefund'")
           | _, None -> None in
         match H.postChargesChargeRefund ~charge _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_charge ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a>.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/issuing/disputes/\{dispute\}/submit *)
  let postIssuingDisputesDisputeSubmit = let _op = "PostIssuingDisputesDisputeSubmit"
    in
    Routes.route (Paths'.postIssuingDisputesDisputeSubmit ())
      (fun dispute (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_7e671e2ddc ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIssuingDisputesDisputeSubmit'")
           | _, None -> None in
         match H.postIssuingDisputesDisputeSubmit ~dispute _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_dispute ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>When you create a new reversal, you must specify a transfer to create it on.</p>
      
      <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>
      
      <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/transfers/\{id\}/reversals *)
  let postTransfersIdReversals = let _op = "PostTransfersIdReversals" in
    Routes.route (Paths'.postTransfersIdReversals ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_e880d6c9c8 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTransfersIdReversals'")
           | _, None -> None in
         match H.postTransfersIdReversals ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_transfer_reversal ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/transfers/\{id\}/reversals *)
  let getTransfersIdReversals = let _op = "GetTransfersIdReversals" in
    Routes.route (Paths'.getTransfersIdReversals ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTransfersIdReversals'")
           | _, None -> None in 
         match H.getTransfersIdReversals ~id ?ending_before ?expand ?limit
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_2e23061d84 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a Country Spec for a given Country code.</p>
      
      @param country country
      @see "openapi/spec3.json" /v1/country_specs/\{country\} *)
  let getCountrySpecsCountry = let _op = "GetCountrySpecsCountry" in
    Routes.route (Paths'.getCountrySpecsCountry ())
      (fun country (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCountrySpecsCountry'")
           | _, None -> None in
         match H.getCountrySpecsCountry ~country ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_country_spec ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/linked_accounts/\{account\}/refresh *)
  let postLinkedAccountsAccountRefresh = let _op = "PostLinkedAccountsAccountRefresh"
    in
    Routes.route (Paths'.postLinkedAccountsAccountRefresh ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_7802e54b91 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostLinkedAccountsAccountRefresh'")
           | _, None -> None in
         match H.postLinkedAccountsAccountRefresh ~account _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_financial_connections_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>returned</code>.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/test_helpers/issuing/cards/\{card\}/shipping/return *)
  let postTestHelpersIssuingCardsCardShippingReturn = let _op = "PostTestHelpersIssuingCardsCardShippingReturn"
    in
    Routes.route (Paths'.postTestHelpersIssuingCardsCardShippingReturn ())
      (fun card (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_05e3124cdb ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersIssuingCardsCardShippingReturn'")
           | _, None -> None in
         match H.postTestHelpersIssuingCardsCardShippingReturn ~card _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_card ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>With <a href="/connect">Connect</a>, you can reject accounts that you have flagged as suspicious.</p>
      
      <p>Only accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are zero.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/reject *)
  let postAccountsAccountReject = let _op = "PostAccountsAccountReject" in
    Routes.route (Paths'.postAccountsAccountReject ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_bac46e226d ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostAccountsAccountReject'")
           | _, None -> None in
         match H.postAccountsAccountReject ~account _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/lines *)
  let getInvoicesInvoiceLines = let _op = "GetInvoicesInvoiceLines" in
    Routes.route (Paths'.getInvoicesInvoiceLines ())
      (fun invoice (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetInvoicesInvoiceLines'")
           | _, None -> None in 
         match H.getInvoicesInvoiceLines ~invoice ?ending_before ?expand
           ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_40aa9228af ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an existing Transaction.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/transactions/\{id\} *)
  let getTreasuryTransactionsId = let _op = "GetTreasuryTransactionsId" in
    Routes.route (Paths'.getTreasuryTransactionsId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryTransactionsId'")
           | _, None -> None in
         match H.getTreasuryTransactionsId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_transaction ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Capture a test-mode authorization.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations/\{authorization\}/capture *)
  let postTestHelpersIssuingAuthorizationsAuthorizationCapture = let _op = "PostTestHelpersIssuingAuthorizationsAuthorizationCapture"
    in
    Routes.route
      (Paths'.postTestHelpersIssuingAuthorizationsAuthorizationCapture ())
      (fun authorization (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_4113a1f78c ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersIssuingAuthorizationsAuthorizationCapture'")
           | _, None -> None in
         match H.postTestHelpersIssuingAuthorizationsAuthorizationCapture
           ~authorization _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_authorization ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Reverses a payout by debiting the destination bank account. At this time, you can only reverse payouts for connected accounts to US bank accounts. If the payout is manual and in the <code>pending</code> status, use <code>/v1/payouts/:id/cancel</code> instead.</p>
      
      <p>By requesting a reversal through <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account authorizes the debit on the bank account and that no other authorization is required.</p>
      
      @param payout payout
      @see "openapi/spec3.json" /v1/payouts/\{payout\}/reverse *)
  let postPayoutsPayoutReverse = let _op = "PostPayoutsPayoutReverse" in
    Routes.route (Paths'.postPayoutsPayoutReverse ())
      (fun payout (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_8eb20ab6f4 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPayoutsPayoutReverse'")
           | _, None -> None in
         match H.postPayoutsPayoutReverse ~payout _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payout ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Removes the currently applied discount on a subscription.</p>
      
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription_exposed_id\}/discount *)
  let deleteSubscriptionsSubscriptionExposedIdDiscount = let _op = "DeleteSubscriptionsSubscriptionExposedIdDiscount"
    in
    Routes.route (Paths'.deleteSubscriptionsSubscriptionExposedIdDiscount ())
      (fun subscription_exposed_id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteSubscriptionsSubscriptionExposedIdDiscount'")
           | _, None -> None in
         match H.deleteSubscriptionsSubscriptionExposedIdDiscount
           ~subscription_exposed_id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_discount ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new person.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons *)
  let postAccountsAccountPersons = let _op = "PostAccountsAccountPersons" in
    Routes.route (Paths'.postAccountsAccountPersons ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_8dfd49ec14 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostAccountsAccountPersons'")
           | _, None -> None in
         match H.postAccountsAccountPersons ~account _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_person ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons *)
  let getAccountsAccountPersons = let _op = "GetAccountsAccountPersons" in
    Routes.route (Paths'.getAccountsAccountPersons ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let relationship = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_52a890434c ~p:"relationship" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetAccountsAccountPersons'")
           | _, None -> None in 
         match H.getAccountsAccountPersons ~account ?ending_before ?expand
           ?limit ?relationship ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_adf6bacbbd ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Cancels the quote.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/cancel *)
  let postQuotesQuoteCancel = let _op = "PostQuotesQuoteCancel" in
    Routes.route (Paths'.postQuotesQuoteCancel ())
      (fun quote (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_4b0daf9ed9 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostQuotesQuoteCancel'")
           | _, None -> None in
         match H.postQuotesQuoteCancel ~quote _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_quote ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates an existing tax rate.</p>
      
      @param tax_rate tax_rate
      @see "openapi/spec3.json" /v1/tax_rates/\{tax_rate\} *)
  let postTaxRatesTaxRate = let _op = "PostTaxRatesTaxRate" in
    Routes.route (Paths'.postTaxRatesTaxRate ())
      (fun tax_rate (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_bd0ab56125 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTaxRatesTaxRate'")
           | _, None -> None in
         match H.postTaxRatesTaxRate ~tax_rate _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_tax_rate ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a tax rate with the given ID</p>
      
      @param tax_rate tax_rate
      @see "openapi/spec3.json" /v1/tax_rates/\{tax_rate\} *)
  let getTaxRatesTaxRate = let _op = "GetTaxRatesTaxRate" in
    Routes.route (Paths'.getTaxRatesTaxRate ())
      (fun tax_rate (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTaxRatesTaxRate'")
           | _, None -> None in
         match H.getTaxRatesTaxRate ~tax_rate ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_tax_rate ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>
      
      @param source source
      @see "openapi/spec3.json" /v1/sources/\{source\} *)
  let postSourcesSource = let _op = "PostSourcesSource" in
    Routes.route (Paths'.postSourcesSource ())
      (fun source (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_8b8321d428 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostSourcesSource'")
           | _, None -> None in
         match H.postSourcesSource ~source _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_source ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>
      
      @param source source
      @see "openapi/spec3.json" /v1/sources/\{source\} *)
  let getSourcesSource = let _op = "GetSourcesSource" in
    Routes.route (Paths'.getSourcesSource ())
      (fun source (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let client_secret = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"client_secret" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetSourcesSource'")
           | _, None -> None in 
         match H.getSourcesSource ~source ?client_secret ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_source ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Unsubscribes from periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/unsubscribe *)
  let postFinancialConnectionsAccountsAccountUnsubscribe = let _op = "PostFinancialConnectionsAccountsAccountUnsubscribe"
    in
    Routes.route
      (Paths'.postFinancialConnectionsAccountsAccountUnsubscribe ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_957eb39b31 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostFinancialConnectionsAccountsAccountUnsubscribe'")
           | _, None -> None in
         match H.postFinancialConnectionsAccountsAccountUnsubscribe ~account
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_financial_connections_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Verifies microdeposits on a PaymentIntent object.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/verify_microdeposits *)
  let postPaymentIntentsIntentVerifyMicrodeposits = let _op = "PostPaymentIntentsIntentVerifyMicrodeposits"
    in
    Routes.route (Paths'.postPaymentIntentsIntentVerifyMicrodeposits ())
      (fun intent (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_50eac85280 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentIntentsIntentVerifyMicrodeposits'")
           | _, None -> None in
         match H.postPaymentIntentsIntentVerifyMicrodeposits ~intent _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_intent ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>An OutboundTransfer can be canceled if the funds have not yet been paid out.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/treasury/outbound_transfers/\{outbound_transfer\}/cancel *)
  let postTreasuryOutboundTransfersOutboundTransferCancel = let _op = "PostTreasuryOutboundTransfersOutboundTransferCancel"
    in
    Routes.route
      (Paths'.postTreasuryOutboundTransfersOutboundTransferCancel ())
      (fun outbound_transfer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_e0e7761ff7 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTreasuryOutboundTransfersOutboundTransferCancel'")
           | _, None -> None in
         match H.postTreasuryOutboundTransfersOutboundTransferCancel
           ~outbound_transfer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_outbound_transfer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Transitions a test mode created OutboundPayment to the <code>posted</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_payments/\{id\}/post *)
  let postTestHelpersTreasuryOutboundPaymentsIdPost = let _op = "PostTestHelpersTreasuryOutboundPaymentsIdPost"
    in
    Routes.route (Paths'.postTestHelpersTreasuryOutboundPaymentsIdPost ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_9853c54b9d ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersTreasuryOutboundPaymentsIdPost'")
           | _, None -> None in
         match H.postTestHelpersTreasuryOutboundPaymentsIdPost ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_outbound_payment ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>
      
      <p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>
      
      <p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>
      
      <p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
      
      @param subscription_item subscription_item
      @see "openapi/spec3.json" /v1/subscription_items/\{subscription_item\}/usage_records *)
  let postSubscriptionItemsSubscriptionItemUsageRecords = let _op = "PostSubscriptionItemsSubscriptionItemUsageRecords"
    in
    Routes.route
      (Paths'.postSubscriptionItemsSubscriptionItemUsageRecords ())
      (fun subscription_item (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_19ad43629e ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostSubscriptionItemsSubscriptionItemUsageRecords'")
           | _, None -> None in
         match H.postSubscriptionItemsSubscriptionItemUsageRecords
           ~subscription_item _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_usage_record ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves an existing VerificationReport</p>
      
      @param report report
      @see "openapi/spec3.json" /v1/identity/verification_reports/\{report\} *)
  let getIdentityVerificationReportsReport = let _op = "GetIdentityVerificationReportsReport"
    in
    Routes.route (Paths'.getIdentityVerificationReportsReport ())
      (fun report (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIdentityVerificationReportsReport'")
           | _, None -> None in
         match H.getIdentityVerificationReportsReport ~report ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_identity_verification_report ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Some payment methods such as Apple Pay require additional steps to verify a domain. If the requirements weren’t satisfied when the domain was created, the payment method will be inactive on the domain.
      The payment method doesn’t appear in Elements for this domain until it is active.</p>
      
      <p>To activate a payment method on an existing payment method domain, complete the required validation steps specific to the payment method, and then validate the payment method domain with this endpoint.</p>
      
      <p>Related guides: <a href="/docs/payments/payment-methods/pmd-registration">Payment method domains</a>.</p>
      
      @param payment_method_domain payment_method_domain
      @see "openapi/spec3.json" /v1/payment_method_domains/\{payment_method_domain\}/validate *)
  let postPaymentMethodDomainsPaymentMethodDomainValidate = let _op = "PostPaymentMethodDomainsPaymentMethodDomainValidate"
    in
    Routes.route
      (Paths'.postPaymentMethodDomainsPaymentMethodDomainValidate ())
      (fun payment_method_domain (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_71e47b1b4e ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentMethodDomainsPaymentMethodDomainValidate'")
           | _, None -> None in
         match H.postPaymentMethodDomainsPaymentMethodDomainValidate
           ~payment_method_domain _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_method_domain ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Cancels the current reader action.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/cancel_action *)
  let postTerminalReadersReaderCancelAction = let _op = "PostTerminalReadersReaderCancelAction"
    in
    Routes.route (Paths'.postTerminalReadersReaderCancelAction ())
      (fun reader (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_0ca647b86f ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTerminalReadersReaderCancelAction'")
           | _, None -> None in
         match H.postTerminalReadersReaderCancelAction ~reader _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_terminal_reader ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/radar/value_list_items/\{item\} *)
  let deleteRadarValueListItemsItem = let _op = "DeleteRadarValueListItemsItem"
    in
    Routes.route (Paths'.deleteRadarValueListItemsItem ())
      (fun item (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteRadarValueListItemsItem'")
           | _, None -> None in
         match H.deleteRadarValueListItemsItem ~item _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_radar_value_list_item ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a <code>ValueListItem</code> object.</p>
      
      @param item item
      @see "openapi/spec3.json" /v1/radar/value_list_items/\{item\} *)
  let getRadarValueListItemsItem = let _op = "GetRadarValueListItemsItem" in
    Routes.route (Paths'.getRadarValueListItemsItem ())
      (fun item (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetRadarValueListItemsItem'")
           | _, None -> None in
         match H.getRadarValueListItemsItem ~item ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_radar_value_list_item ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{id\}/refund *)
  let postApplicationFeesIdRefund = let _op = "PostApplicationFeesIdRefund"
    in
    Routes.route (Paths'.postApplicationFeesIdRefund ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_fbe77ceb11 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostApplicationFeesIdRefund'")
           | _, None -> None in
         match H.postApplicationFeesIdRefund ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_application_fee ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates a card personalization object.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/issuing/personalization_designs/\{personalization_design\} *)
  let postIssuingPersonalizationDesignsPersonalizationDesign = let _op = "PostIssuingPersonalizationDesignsPersonalizationDesign"
    in
    Routes.route
      (Paths'.postIssuingPersonalizationDesignsPersonalizationDesign ())
      (fun personalization_design (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_51d6e29ed8 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIssuingPersonalizationDesignsPersonalizationDesign'")
           | _, None -> None in
         match H.postIssuingPersonalizationDesignsPersonalizationDesign
           ~personalization_design _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_personalization_design ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a personalization design object.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/issuing/personalization_designs/\{personalization_design\} *)
  let getIssuingPersonalizationDesignsPersonalizationDesign = let _op = "GetIssuingPersonalizationDesignsPersonalizationDesign"
    in
    Routes.route
      (Paths'.getIssuingPersonalizationDesignsPersonalizationDesign ())
      (fun personalization_design (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIssuingPersonalizationDesignsPersonalizationDesign'")
           | _, None -> None in
         match H.getIssuingPersonalizationDesignsPersonalizationDesign
           ~personalization_design ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_personalization_design ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
      
      <p>If the card’s owner has no default card, then the new card will become the default.
      However, if the owner already has a default, then it will not change.
      To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards *)
  let postCustomersCustomerCards = let _op = "PostCustomersCustomerCards" in
    Routes.route (Paths'.postCustomersCustomerCards ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_03bcd47aa2 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCustomersCustomerCards'")
           | _, None -> None in
         match H.postCustomersCustomerCards ~customer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_source ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>You can see a list of the cards belonging to a customer.
      Note that the 10 most recent sources are always available on the <code>Customer</code> object.
      If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards *)
  let getCustomersCustomerCards = let _op = "GetCustomersCustomerCards" in
    Routes.route (Paths'.getCustomersCustomerCards ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerCards'")
           | _, None -> None in 
         match H.getCustomersCustomerCards ~customer ?ending_before ?expand
           ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_935be5d592 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with <code>type=good</code> is only possible if it has no SKUs associated with it.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/products/\{id\} *)
  let deleteProductsId = let _op = "DeleteProductsId" in
    Routes.route (Paths'.deleteProductsId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteProductsId'")
           | _, None -> None in
         match H.deleteProductsId ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_product ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/products/\{id\} *)
  let postProductsId = let _op = "PostProductsId" in
    Routes.route (Paths'.postProductsId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_209218c363 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostProductsId'")
           | _, None -> None in
         match H.postProductsId ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_product ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/products/\{id\} *)
  let getProductsId = let _op = "GetProductsId" in
    Routes.route (Paths'.getProductsId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetProductsId'")
           | _, None -> None in
         match H.getProductsId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_product ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>active</code>.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/test_helpers/issuing/personalization_designs/\{personalization_design\}/activate *)
  let postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate = 
    let _op = "PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate"
    in
    Routes.route
      (Paths'.postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate ())
      (fun personalization_design (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_7cbe5b26ac ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate'")
           | _, None -> None in
         match H.postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate
           ~personalization_design _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_personalization_design ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>You can cancel a SetupIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>
      
      <p>After you cancel it, setup is abandoned and any operations on the SetupIntent fail with an error.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\}/cancel *)
  let postSetupIntentsIntentCancel = let _op = "PostSetupIntentsIntentCancel"
    in
    Routes.route (Paths'.postSetupIntentsIntentCancel ())
      (fun intent (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_05b947f5ee ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostSetupIntentsIntentCancel'")
           | _, None -> None in
         match H.postSetupIntentsIntentCancel ~intent _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_setup_intent ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p>
      
      @param coupon coupon
      @see "openapi/spec3.json" /v1/coupons/\{coupon\} *)
  let deleteCouponsCoupon = let _op = "DeleteCouponsCoupon" in
    Routes.route (Paths'.deleteCouponsCoupon ())
      (fun coupon (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteCouponsCoupon'")
           | _, None -> None in
         match H.deleteCouponsCoupon ~coupon _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_coupon ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p>
      
      @param coupon coupon
      @see "openapi/spec3.json" /v1/coupons/\{coupon\} *)
  let postCouponsCoupon = let _op = "PostCouponsCoupon" in
    Routes.route (Paths'.postCouponsCoupon ())
      (fun coupon (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_87e7e7fa42 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCouponsCoupon'")
           | _, None -> None in
         match H.postCouponsCoupon ~coupon _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_coupon ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the coupon with the given ID.</p>
      
      @param coupon coupon
      @see "openapi/spec3.json" /v1/coupons/\{coupon\} *)
  let getCouponsCoupon = let _op = "GetCouponsCoupon" in
    Routes.route (Paths'.getCouponsCoupon ())
      (fun coupon (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCouponsCoupon'")
           | _, None -> None in
         match H.getCouponsCoupon ~coupon ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_coupon ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/mark_uncollectible *)
  let postInvoicesInvoiceMarkUncollectible = let _op = "PostInvoicesInvoiceMarkUncollectible"
    in
    Routes.route (Paths'.postInvoicesInvoiceMarkUncollectible ())
      (fun invoice (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_1e3fe8c357 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostInvoicesInvoiceMarkUncollectible'")
           | _, None -> None in
         match H.postInvoicesInvoiceMarkUncollectible ~invoice _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_invoice ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit list</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/received_debits/\{id\} *)
  let getTreasuryReceivedDebitsId = let _op = "GetTreasuryReceivedDebitsId"
    in
    Routes.route (Paths'.getTreasuryReceivedDebitsId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryReceivedDebitsId'")
           | _, None -> None in
         match H.getTreasuryReceivedDebitsId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_received_debit ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Sets reader display to show cart details.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/set_reader_display *)
  let postTerminalReadersReaderSetReaderDisplay = let _op = "PostTerminalReadersReaderSetReaderDisplay"
    in
    Routes.route (Paths'.postTerminalReadersReaderSetReaderDisplay ())
      (fun reader (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_8d65e25082 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTerminalReadersReaderSetReaderDisplay'")
           | _, None -> None in
         match H.postTerminalReadersReaderSetReaderDisplay ~reader _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_terminal_reader ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact
      the VerificationSession and all objects related to it, including VerificationReports, Events,
      request logs, etc.</p>
      
      <p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code>
      <a href="/docs/identity/how-sessions-work">status</a>. Redacting a VerificationSession in <code>requires_action</code>
      state will automatically cancel it.</p>
      
      <p>The redaction process may take up to four days. When the redaction process is in progress, the
      VerificationSession’s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is
      finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event
      will be emitted.</p>
      
      <p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the
      fields that contain personal data will be replaced by the string <code>\[redacted\]</code> or a similar
      placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or
      used for any purpose.</p>
      
      <p><a href="/docs/identity/verification-sessions#redact">Learn more</a>.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/identity/verification_sessions/\{session\}/redact *)
  let postIdentityVerificationSessionsSessionRedact = let _op = "PostIdentityVerificationSessionsSessionRedact"
    in
    Routes.route (Paths'.postIdentityVerificationSessionsSessionRedact ())
      (fun session (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_247ea586be ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIdentityVerificationSessionsSessionRedact'")
           | _, None -> None in
         match H.postIdentityVerificationSessionsSessionRedact ~session _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_identity_verification_session ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the refund that you specify by setting the values of the passed parameters. Any parameters that you don’t provide remain unchanged.</p>
      
      <p>This request only accepts <code>metadata</code> as an argument.</p>
      
      @param refund refund
      @see "openapi/spec3.json" /v1/refunds/\{refund\} *)
  let postRefundsRefund = let _op = "PostRefundsRefund" in
    Routes.route (Paths'.postRefundsRefund ())
      (fun refund (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_000c001e81 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostRefundsRefund'")
           | _, None -> None in
         match H.postRefundsRefund ~refund _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_refund ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an existing refund.</p>
      
      @param refund refund
      @see "openapi/spec3.json" /v1/refunds/\{refund\} *)
  let getRefundsRefund = let _op = "GetRefundsRefund" in
    Routes.route (Paths'.getRefundsRefund ())
      (fun refund (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetRefundsRefund'")
           | _, None -> None in
         match H.getRefundsRefund ~refund ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_refund ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/checkout/sessions/\{session\}/line_items *)
  let getCheckoutSessionsSessionLineItems = let _op = "GetCheckoutSessionsSessionLineItems"
    in
    Routes.route (Paths'.getCheckoutSessionsSessionLineItems ())
      (fun session (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCheckoutSessionsSessionLineItems'")
           | _, None -> None in 
         match H.getCheckoutSessionsSessionLineItems ~session ?ending_before
           ?expand ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_b5bae8d183 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Transitions a test mode created OutboundTransfer to the <code>posted</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_transfers/\{outbound_transfer\}/post *)
  let postTestHelpersTreasuryOutboundTransfersOutboundTransferPost = 
    let _op = "PostTestHelpersTreasuryOutboundTransfersOutboundTransferPost"
    in
    Routes.route
      (Paths'.postTestHelpersTreasuryOutboundTransfersOutboundTransferPost ())
      (fun outbound_transfer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_2057b87ef0 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersTreasuryOutboundTransfersOutboundTransferPost'")
           | _, None -> None in
         match H.postTestHelpersTreasuryOutboundTransfersOutboundTransferPost
           ~outbound_transfer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_outbound_transfer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>
      
      @param schedule schedule
      @see "openapi/spec3.json" /v1/subscription_schedules/\{schedule\}/release *)
  let postSubscriptionSchedulesScheduleRelease = let _op = "PostSubscriptionSchedulesScheduleRelease"
    in
    Routes.route (Paths'.postSubscriptionSchedulesScheduleRelease ())
      (fun schedule (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_9438e1e97d ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostSubscriptionSchedulesScheduleRelease'")
           | _, None -> None in
         match H.postSubscriptionSchedulesScheduleRelease ~schedule _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_subscription_schedule ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param credit_note credit_note
      @see "openapi/spec3.json" /v1/credit_notes/\{credit_note\}/lines *)
  let getCreditNotesCreditNoteLines = let _op = "GetCreditNotesCreditNoteLines"
    in
    Routes.route (Paths'.getCreditNotesCreditNoteLines ())
      (fun credit_note (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCreditNotesCreditNoteLines'")
           | _, None -> None in 
         match H.getCreditNotesCreditNoteLines ~credit_note ?ending_before
           ?expand ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_17654892a5 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a payment or re-attached to a Customer.</p>
      
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/payment_methods/\{payment_method\}/detach *)
  let postPaymentMethodsPaymentMethodDetach = let _op = "PostPaymentMethodsPaymentMethodDetach"
    in
    Routes.route (Paths'.postPaymentMethodsPaymentMethodDetach ())
      (fun payment_method (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_189e25f024 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentMethodsPaymentMethodDetach'")
           | _, None -> None in
         match H.postPaymentMethodsPaymentMethodDetach ~payment_method _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_method ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a DebitReversal object.</p>
      
      @param debit_reversal debit_reversal
      @see "openapi/spec3.json" /v1/treasury/debit_reversals/\{debit_reversal\} *)
  let getTreasuryDebitReversalsDebitReversal = let _op = "GetTreasuryDebitReversalsDebitReversal"
    in
    Routes.route (Paths'.getTreasuryDebitReversalsDebitReversal ())
      (fun debit_reversal (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryDebitReversalsDebitReversal'")
           | _, None -> None in
         match H.getTreasuryDebitReversalsDebitReversal ~debit_reversal
           ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_debit_reversal ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax_codes/\{id\} *)
  let getTaxCodesId = let _op = "GetTaxCodesId" in
    Routes.route (Paths'.getTaxCodesId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTaxCodesId'")
           | _, None -> None in
         match H.getTaxCodesId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_tax_code ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/disconnect *)
  let postFinancialConnectionsAccountsAccountDisconnect = let _op = "PostFinancialConnectionsAccountsAccountDisconnect"
    in
    Routes.route
      (Paths'.postFinancialConnectionsAccountsAccountDisconnect ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_190bfbf094 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostFinancialConnectionsAccountsAccountDisconnect'")
           | _, None -> None in
         match H.postFinancialConnectionsAccountsAccountDisconnect ~account
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_financial_connections_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.</p>
      
      @param promotion_code promotion_code
      @see "openapi/spec3.json" /v1/promotion_codes/\{promotion_code\} *)
  let postPromotionCodesPromotionCode = let _op = "PostPromotionCodesPromotionCode"
    in
    Routes.route (Paths'.postPromotionCodesPromotionCode ())
      (fun promotion_code (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_8f07f499ed ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPromotionCodesPromotionCode'")
           | _, None -> None in
         match H.postPromotionCodesPromotionCode ~promotion_code _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_promotion_code ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing <code>code</code> use <a href="/docs/api/promotion_codes/list">list</a> with the desired <code>code</code>.</p>
      
      @param promotion_code promotion_code
      @see "openapi/spec3.json" /v1/promotion_codes/\{promotion_code\} *)
  let getPromotionCodesPromotionCode = let _op = "GetPromotionCodesPromotionCode"
    in
    Routes.route (Paths'.getPromotionCodesPromotionCode ())
      (fun promotion_code (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPromotionCodesPromotionCode'")
           | _, None -> None in
         match H.getPromotionCodesPromotionCode ~promotion_code ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_promotion_code ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates an existing shipping rate object.</p>
      
      @param shipping_rate_token shipping_rate_token
      @see "openapi/spec3.json" /v1/shipping_rates/\{shipping_rate_token\} *)
  let postShippingRatesShippingRateToken = let _op = "PostShippingRatesShippingRateToken"
    in
    Routes.route (Paths'.postShippingRatesShippingRateToken ())
      (fun shipping_rate_token (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_f0785efe33 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostShippingRatesShippingRateToken'")
           | _, None -> None in
         match H.postShippingRatesShippingRateToken ~shipping_rate_token _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_shipping_rate ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns the shipping rate object with the given ID.</p>
      
      @param shipping_rate_token shipping_rate_token
      @see "openapi/spec3.json" /v1/shipping_rates/\{shipping_rate_token\} *)
  let getShippingRatesShippingRateToken = let _op = "GetShippingRatesShippingRateToken"
    in
    Routes.route (Paths'.getShippingRatesShippingRateToken ())
      (fun shipping_rate_token (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetShippingRatesShippingRateToken'")
           | _, None -> None in
         match H.getShippingRatesShippingRateToken ~shipping_rate_token
           ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_shipping_rate ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Reactivates a billing meter</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\}/reactivate *)
  let postBillingMetersIdReactivate = let _op = "PostBillingMetersIdReactivate"
    in
    Routes.route (Paths'.postBillingMetersIdReactivate ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_e4fa4d38ff ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostBillingMetersIdReactivate'")
           | _, None -> None in
         match H.postBillingMetersIdReactivate ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_billing_meter ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>You can cancel a PaymentIntent object when it’s in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code> or, <a href="/docs/payments/intents">in rare cases</a>, <code>processing</code>. </p>
      
      <p>After it’s canceled, no additional charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents with a <code>status</code> of <code>requires_capture</code>, the remaining <code>amount_capturable</code> is automatically refunded. </p>
      
      <p>You can’t cancel the PaymentIntent for a Checkout Session. <a href="/docs/api/checkout/sessions/expire">Expire the Checkout Session</a> instead.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/cancel *)
  let postPaymentIntentsIntentCancel = let _op = "PostPaymentIntentsIntentCancel"
    in
    Routes.route (Paths'.postPaymentIntentsIntentCancel ())
      (fun intent (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_87beadc647 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentIntentsIntentCancel'")
           | _, None -> None in
         match H.postPaymentIntentsIntentCancel ~intent _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_intent ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the OutboundPayment creation request or OutboundPayment list.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/outbound_payments/\{id\} *)
  let getTreasuryOutboundPaymentsId = let _op = "GetTreasuryOutboundPaymentsId"
    in
    Routes.route (Paths'.getTreasuryOutboundPaymentsId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryOutboundPaymentsId'")
           | _, None -> None in
         match H.getTreasuryOutboundPaymentsId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_outbound_payment ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of a Financial Connections <code>Transaction</code></p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/financial_connections/transactions/\{transaction\} *)
  let getFinancialConnectionsTransactionsTransaction = let _op = "GetFinancialConnectionsTransactionsTransaction"
    in
    Routes.route (Paths'.getFinancialConnectionsTransactionsTransaction ())
      (fun transaction (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetFinancialConnectionsTransactionsTransaction'")
           | _, None -> None in
         match H.getFinancialConnectionsTransactionsTransaction ~transaction
           ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_financial_connections_transaction ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Download the PDF for a finalized quote. Explanation for special handling can be found <a href="https://docs.corp.stripe.com/quotes/overview#quote_pdf">here</a></p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/pdf *)
  let getQuotesQuotePdf = let _op = "GetQuotesQuotePdf" in
    Routes.route (Paths'.getQuotesQuotePdf ())
      (fun quote (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetQuotesQuotePdf'")
           | _, None -> None in
         match H.getQuotesQuotePdf ~quote ?expand _req
         with
         | Ok (`CH_OK (code,body,_headers)) ->
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/dispute *)
  let postChargesChargeDispute = let _op = "PostChargesChargeDispute" in
    Routes.route (Paths'.postChargesChargeDispute ())
      (fun charge (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_4636c13369 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostChargesChargeDispute'")
           | _, None -> None in
         match H.postChargesChargeDispute ~charge _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_dispute ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieve a dispute for a specified charge.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/dispute *)
  let getChargesChargeDispute = let _op = "GetChargesChargeDispute" in
    Routes.route (Paths'.getChargesChargeDispute ())
      (fun charge (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetChargesChargeDispute'")
           | _, None -> None in
         match H.getChargesChargeDispute ~charge ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_dispute ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Marks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The InboundTransfer must already be in the <code>succeeded</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/inbound_transfers/\{id\}/return *)
  let postTestHelpersTreasuryInboundTransfersIdReturn = let _op = "PostTestHelpersTreasuryInboundTransfersIdReturn"
    in
    Routes.route (Paths'.postTestHelpersTreasuryInboundTransfersIdReturn ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_c1768f47d2 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersTreasuryInboundTransfersIdReturn'")
           | _, None -> None in
         match H.postTestHelpersTreasuryInboundTransfersIdReturn ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_inbound_transfer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves an existing ConfirmationToken object</p>
      
      @param confirmation_token confirmation_token
      @see "openapi/spec3.json" /v1/confirmation_tokens/\{confirmation_token\} *)
  let getConfirmationTokensConfirmationToken = let _op = "GetConfirmationTokensConfirmationToken"
    in
    Routes.route (Paths'.getConfirmationTokensConfirmationToken ())
      (fun confirmation_token (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetConfirmationTokensConfirmationToken'")
           | _, None -> None in
         match H.getConfirmationTokensConfirmationToken ~confirmation_token
           ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_confirmation_token ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Verify a given source.</p>
      
      @param source source
      @see "openapi/spec3.json" /v1/sources/\{source\}/verify *)
  let postSourcesSourceVerify = let _op = "PostSourcesSourceVerify" in
    Routes.route (Paths'.postSourcesSourceVerify ())
      (fun source (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_8aa8f331cd ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostSourcesSourceVerify'")
           | _, None -> None in
         match H.postSourcesSourceVerify ~source _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_source ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Cancels a top-up. Only pending top-ups can be canceled.</p>
      
      @param topup topup
      @see "openapi/spec3.json" /v1/topups/\{topup\}/cancel *)
  let postTopupsTopupCancel = let _op = "PostTopupsTopupCancel" in
    Routes.route (Paths'.postTopupsTopupCancel ())
      (fun topup (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_4c666f30a4 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTopupsTopupCancel'")
           | _, None -> None in
         match H.postTopupsTopupCancel ~topup _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_topup ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new subscription on an existing customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions *)
  let postCustomersCustomerSubscriptions = let _op = "PostCustomersCustomerSubscriptions"
    in
    Routes.route (Paths'.postCustomersCustomerSubscriptions ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_02eb6abcb0 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCustomersCustomerSubscriptions'")
           | _, None -> None in
         match H.postCustomersCustomerSubscriptions ~customer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_subscription ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions *)
  let getCustomersCustomerSubscriptions = let _op = "GetCustomersCustomerSubscriptions"
    in
    Routes.route (Paths'.getCustomersCustomerSubscriptions ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerSubscriptions'")
           | _, None -> None in 
         match H.getCustomersCustomerSubscriptions ~customer ?ending_before
           ?expand ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_725e7e390f ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data associated with the account (e.g. balances, transactions).</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/linked_accounts/\{account\}/disconnect *)
  let postLinkedAccountsAccountDisconnect = let _op = "PostLinkedAccountsAccountDisconnect"
    in
    Routes.route (Paths'.postLinkedAccountsAccountDisconnect ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_004e372a90 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostLinkedAccountsAccountDisconnect'")
           | _, None -> None in
         match H.postLinkedAccountsAccountDisconnect ~account _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_financial_connections_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>delivered</code>.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/test_helpers/issuing/cards/\{card\}/shipping/deliver *)
  let postTestHelpersIssuingCardsCardShippingDeliver = let _op = "PostTestHelpersIssuingCardsCardShippingDeliver"
    in
    Routes.route (Paths'.postTestHelpersIssuingCardsCardShippingDeliver ())
      (fun card (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_d3fb355477 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersIssuingCardsCardShippingDeliver'")
           | _, None -> None in
         match H.postTestHelpersIssuingCardsCardShippingDeliver ~card _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_card ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>
      
      @param review review
      @see "openapi/spec3.json" /v1/reviews/\{review\}/approve *)
  let postReviewsReviewApprove = let _op = "PostReviewsReviewApprove" in
    Routes.route (Paths'.postReviewsReviewApprove ())
      (fun review (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_2fd5762094 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostReviewsReviewApprove'")
           | _, None -> None in
         match H.postReviewsReviewApprove ~review _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_review ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Delete an apple pay domain.</p>
      
      @param domain domain
      @see "openapi/spec3.json" /v1/apple_pay/domains/\{domain\} *)
  let deleteApplePayDomainsDomain = let _op = "DeleteApplePayDomainsDomain"
    in
    Routes.route (Paths'.deleteApplePayDomainsDomain ())
      (fun domain (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteApplePayDomainsDomain'")
           | _, None -> None in
         match H.deleteApplePayDomainsDomain ~domain _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_apple_pay_domain ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieve an apple pay domain.</p>
      
      @param domain domain
      @see "openapi/spec3.json" /v1/apple_pay/domains/\{domain\} *)
  let getApplePayDomainsDomain = let _op = "GetApplePayDomainsDomain" in
    Routes.route (Paths'.getApplePayDomainsDomain ())
      (fun domain (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetApplePayDomainsDomain'")
           | _, None -> None in
         match H.getApplePayDomainsDomain ~domain ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_apple_pay_domain ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a href="#void_invoice">voided</a>.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\} *)
  let deleteInvoicesInvoice = let _op = "DeleteInvoicesInvoice" in
    Routes.route (Paths'.deleteInvoicesInvoice ())
      (fun invoice (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteInvoicesInvoice'")
           | _, None -> None in
         match H.deleteInvoicesInvoice ~invoice _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_invoice ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>,
      monetary values, as well as <code>collection_method</code>, become uneditable.</p>
      
      <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
      sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass
      <code>auto_advance=false</code>.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\} *)
  let postInvoicesInvoice = let _op = "PostInvoicesInvoice" in
    Routes.route (Paths'.postInvoicesInvoice ())
      (fun invoice (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_9bd5268fc2 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostInvoicesInvoice'")
           | _, None -> None in
         match H.postInvoicesInvoice ~invoice _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_invoice ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the invoice with the given ID.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\} *)
  let getInvoicesInvoice = let _op = "GetInvoicesInvoice" in
    Routes.route (Paths'.getInvoicesInvoice ())
      (fun invoice (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetInvoicesInvoice'")
           | _, None -> None in
         match H.getInvoicesInvoice ~invoice ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_invoice ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Expire a test-mode Authorization.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations/\{authorization\}/expire *)
  let postTestHelpersIssuingAuthorizationsAuthorizationExpire = let _op = "PostTestHelpersIssuingAuthorizationsAuthorizationExpire"
    in
    Routes.route
      (Paths'.postTestHelpersIssuingAuthorizationsAuthorizationExpire ())
      (fun authorization (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_e813eb08ba ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersIssuingAuthorizationsAuthorizationExpire'")
           | _, None -> None in
         match H.postTestHelpersIssuingAuthorizationsAuthorizationExpire
           ~authorization _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_authorization ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of a Financial Connections <code>Session</code></p>
      
      @param session session
      @see "openapi/spec3.json" /v1/link_account_sessions/\{session\} *)
  let getLinkAccountSessionsSession = let _op = "GetLinkAccountSessionsSession"
    in
    Routes.route (Paths'.getLinkAccountSessionsSession ())
      (fun session (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetLinkAccountSessionsSession'")
           | _, None -> None in
         match H.getLinkAccountSessionsSession ~session ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_financial_connections_session ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of a Report Type. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
      
      @param report_type report_type
      @see "openapi/spec3.json" /v1/reporting/report_types/\{report_type\} *)
  let getReportingReportTypesReportType = let _op = "GetReportingReportTypesReportType"
    in
    Routes.route (Paths'.getReportingReportTypesReportType ())
      (fun report_type (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetReportingReportTypesReportType'")
           | _, None -> None in
         match H.getReportingReportTypesReportType ~report_type ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_reporting_report_type ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Invalidates a short-lived API key for a given resource.</p>
      
      @param key key
      @see "openapi/spec3.json" /v1/ephemeral_keys/\{key\} *)
  let deleteEphemeralKeysKey = let _op = "DeleteEphemeralKeysKey" in
    Routes.route (Paths'.deleteEphemeralKeysKey ())
      (fun key (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_9c3ca26028 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteEphemeralKeysKey'")
           | _, None -> None in
         match H.deleteEphemeralKeysKey ~key _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_ephemeral_key ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the token with the given ID.</p>
      
      @param token token
      @see "openapi/spec3.json" /v1/tokens/\{token\} *)
  let getTokensToken = let _op = "GetTokensToken" in
    Routes.route (Paths'.getTokensToken ())
      (fun token (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTokensToken'")
           | _, None -> None in
         match H.getTokensToken ~token ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_token ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Initiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations. If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused. If payment succeeds the subscription will become <code>active</code>, and if payment fails the subscription will be <code>past_due</code>. The resumption invoice will void automatically if not paid by the expiration date.</p>
      
      @param subscription subscription
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription\}/resume *)
  let postSubscriptionsSubscriptionResume = let _op = "PostSubscriptionsSubscriptionResume"
    in
    Routes.route (Paths'.postSubscriptionsSubscriptionResume ())
      (fun subscription (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_ad795eca9c ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostSubscriptionsSubscriptionResume'")
           | _, None -> None in
         match H.postSubscriptionsSubscriptionResume ~subscription _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_subscription ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an existing InboundTransfer.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/inbound_transfers/\{id\} *)
  let getTreasuryInboundTransfersId = let _op = "GetTreasuryInboundTransfersId"
    in
    Routes.route (Paths'.getTreasuryInboundTransfersId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryInboundTransfersId'")
           | _, None -> None in
         match H.getTreasuryInboundTransfersId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_inbound_transfer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param cardholder cardholder
      @see "openapi/spec3.json" /v1/issuing/cardholders/\{cardholder\} *)
  let postIssuingCardholdersCardholder = let _op = "PostIssuingCardholdersCardholder"
    in
    Routes.route (Paths'.postIssuingCardholdersCardholder ())
      (fun cardholder (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_5485d2e44c ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIssuingCardholdersCardholder'")
           | _, None -> None in
         match H.postIssuingCardholdersCardholder ~cardholder _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_cardholder ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves an Issuing <code>Cardholder</code> object.</p>
      
      @param cardholder cardholder
      @see "openapi/spec3.json" /v1/issuing/cardholders/\{cardholder\} *)
  let getIssuingCardholdersCardholder = let _op = "GetIssuingCardholdersCardholder"
    in
    Routes.route (Paths'.getIssuingCardholdersCardholder ())
      (fun cardholder (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIssuingCardholdersCardholder'")
           | _, None -> None in
         match H.getIssuingCardholdersCardholder ~cardholder ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_cardholder ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>When retrieving a quote, there is an includable <a href="https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items"><strong>computed.upfront.line_items</strong></a> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/computed_upfront_line_items *)
  let getQuotesQuoteComputedUpfrontLineItems = let _op = "GetQuotesQuoteComputedUpfrontLineItems"
    in
    Routes.route (Paths'.getQuotesQuoteComputedUpfrontLineItems ())
      (fun quote (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetQuotesQuoteComputedUpfrontLineItems'")
           | _, None -> None in 
         match H.getQuotesQuoteComputedUpfrontLineItems ~quote ?ending_before
           ?expand ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_61b163891b ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of a Climate product with the given ID.</p>
      
      @param product product
      @see "openapi/spec3.json" /v1/climate/products/\{product\} *)
  let getClimateProductsProduct = let _op = "GetClimateProductsProduct" in
    Routes.route (Paths'.getClimateProductsProduct ())
      (fun product (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetClimateProductsProduct'")
           | _, None -> None in
         match H.getClimateProductsProduct ~product ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_climate_product ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Deletes a test clock.</p>
      
      @param test_clock test_clock
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks/\{test_clock\} *)
  let deleteTestHelpersTestClocksTestClock = let _op = "DeleteTestHelpersTestClocksTestClock"
    in
    Routes.route (Paths'.deleteTestHelpersTestClocksTestClock ())
      (fun test_clock (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteTestHelpersTestClocksTestClock'")
           | _, None -> None in
         match H.deleteTestHelpersTestClocksTestClock ~test_clock _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_test_helpers_test_clock ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a test clock.</p>
      
      @param test_clock test_clock
      @see "openapi/spec3.json" /v1/test_helpers/test_clocks/\{test_clock\} *)
  let getTestHelpersTestClocksTestClock = let _op = "GetTestHelpersTestClocksTestClock"
    in
    Routes.route (Paths'.getTestHelpersTestClocksTestClock ())
      (fun test_clock (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTestHelpersTestClocksTestClock'")
           | _, None -> None in
         match H.getTestHelpersTestClocksTestClock ~test_clock ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_test_helpers_test_clock ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
      
      <p>If the card’s owner has no default card, then the new card will become the default.
      However, if the owner already has a default, then it will not change.
      To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources *)
  let postCustomersCustomerSources = let _op = "PostCustomersCustomerSources"
    in
    Routes.route (Paths'.postCustomersCustomerSources ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_25713982da ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCustomersCustomerSources'")
           | _, None -> None in
         match H.postCustomersCustomerSources ~customer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_source ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>List sources for a specified customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources *)
  let getCustomersCustomerSources = let _op = "GetCustomersCustomerSources"
    in
    Routes.route (Paths'.getCustomersCustomerSources ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let object_ = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"object" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerSources'")
           | _, None -> None in 
         match H.getCustomersCustomerSources ~customer ?ending_before ?expand
           ?limit ?object_ ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_08def66363 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Initiates a payment flow on a Reader.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/process_payment_intent *)
  let postTerminalReadersReaderProcessPaymentIntent = let _op = "PostTerminalReadersReaderProcessPaymentIntent"
    in
    Routes.route (Paths'.postTerminalReadersReaderProcessPaymentIntent ())
      (fun reader (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_bcad42072c ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTerminalReadersReaderProcessPaymentIntent'")
           | _, None -> None in
         match H.postTerminalReadersReaderProcessPaymentIntent ~reader _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_terminal_reader ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Transitions a test mode created OutboundPayment to the <code>returned</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_payments/\{id\}/return *)
  let postTestHelpersTreasuryOutboundPaymentsIdReturn = let _op = "PostTestHelpersTreasuryOutboundPaymentsIdReturn"
    in
    Routes.route (Paths'.postTestHelpersTreasuryOutboundPaymentsIdReturn ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_5e31eb0dbe ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersTreasuryOutboundPaymentsIdReturn'")
           | _, None -> None in
         match H.postTestHelpersTreasuryOutboundPaymentsIdReturn ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_outbound_payment ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a single-use login link for a connected account to access the Express Dashboard.</p>
      
      <p><strong>You can only create login links for accounts that use the <a href="/connect/express-dashboard">Express Dashboard</a> and are connected to your platform</strong>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/login_links *)
  let postAccountsAccountLoginLinks = let _op = "PostAccountsAccountLoginLinks"
    in
    Routes.route (Paths'.postAccountsAccountLoginLinks ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_5afb636173 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostAccountsAccountLoginLinks'")
           | _, None -> None in
         match H.postAccountsAccountLoginLinks ~account _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_login_link ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a Tax <code>Transaction</code> object.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/tax/transactions/\{transaction\} *)
  let getTaxTransactionsTransaction = let _op = "GetTaxTransactionsTransaction"
    in
    Routes.route (Paths'.getTaxTransactionsTransaction ())
      (fun transaction (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTaxTransactionsTransaction'")
           | _, None -> None in
         match H.getTaxTransactionsTransaction ~transaction ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_tax_transaction ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an existing file object. After you supply a unique file ID, Stripe returns the corresponding file object. Learn how to <a href="/docs/file-upload#download-file-contents">access file contents</a>.</p>
      
      @param file file
      @see "openapi/spec3.json" /v1/files/\{file\} *)
  let getFilesFile = let _op = "GetFilesFile" in
    Routes.route (Paths'.getFilesFile ())
      (fun file (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetFilesFile'")
           | _, None -> None in
         match H.getFilesFile ~file ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_file ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a product_feature, which represents a feature attachment to a product</p>
      
      @param product product
      @see "openapi/spec3.json" /v1/products/\{product\}/features *)
  let postProductsProductFeatures = let _op = "PostProductsProductFeatures"
    in
    Routes.route (Paths'.postProductsProductFeatures ())
      (fun product (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_a8fa6f704e ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostProductsProductFeatures'")
           | _, None -> None in
         match H.postProductsProductFeatures ~product _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_product_feature ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieve a list of features for a product</p>
      
      @param product product
      @see "openapi/spec3.json" /v1/products/\{product\}/features *)
  let getProductsProductFeatures = let _op = "GetProductsProductFeatures" in
    Routes.route (Paths'.getProductsProductFeatures ())
      (fun product (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetProductsProductFeatures'")
           | _, None -> None in 
         match H.getProductsProductFeatures ~product ?ending_before ?expand
           ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_7db760c7aa ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>inactive</code>.</p>
      
      @param personalization_design personalization_design
      @see "openapi/spec3.json" /v1/test_helpers/issuing/personalization_designs/\{personalization_design\}/deactivate *)
  let postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate = 
    let _op = "PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate"
    in
    Routes.route
      (Paths'.postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate ())
      (fun personalization_design (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_e40a5805ad ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate'")
           | _, None -> None in
         match H.postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate
           ~personalization_design _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_personalization_design ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Confirm that your customer intends to set up the current or
      provided payment method. For example, you would confirm a SetupIntent
      when a customer hits the “Save” button on a payment method management
      page on your website.</p>
      
      <p>If the selected payment method does not require any additional
      steps from the customer, the SetupIntent will transition to the
      <code>succeeded</code> status.</p>
      
      <p>Otherwise, it will transition to the <code>requires_action</code> status and
      suggest additional actions via <code>next_action</code>. If setup fails,
      the SetupIntent will transition to the
      <code>requires_payment_method</code> status or the <code>canceled</code> status if the
      confirmation limit is reached.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\}/confirm *)
  let postSetupIntentsIntentConfirm = let _op = "PostSetupIntentsIntentConfirm"
    in
    Routes.route (Paths'.postSetupIntentsIntentConfirm ())
      (fun intent (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_3fb2b8754f ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostSetupIntentsIntentConfirm'")
           | _, None -> None in
         match H.postSetupIntentsIntentConfirm ~intent _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_setup_intent ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates a billing meter</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\} *)
  let postBillingMetersId = let _op = "PostBillingMetersId" in
    Routes.route (Paths'.postBillingMetersId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_e54ad7b1b1 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostBillingMetersId'")
           | _, None -> None in
         match H.postBillingMetersId ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_billing_meter ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a billing meter given an ID</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\} *)
  let getBillingMetersId = let _op = "GetBillingMetersId" in
    Routes.route (Paths'.getBillingMetersId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetBillingMetersId'")
           | _, None -> None in
         match H.getBillingMetersId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_billing_meter ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/pay *)
  let postInvoicesInvoicePay = let _op = "PostInvoicesInvoicePay" in
    Routes.route (Paths'.postInvoicesInvoicePay ())
      (fun invoice (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_ea602f43e3 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostInvoicesInvoicePay'")
           | _, None -> None in
         match H.postInvoicesInvoicePay ~invoice _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_invoice ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Attempts to update the specified Issuing <code>Token</code> object to the status specified.</p>
      
      @param token token
      @see "openapi/spec3.json" /v1/issuing/tokens/\{token\} *)
  let postIssuingTokensToken = let _op = "PostIssuingTokensToken" in
    Routes.route (Paths'.postIssuingTokensToken ())
      (fun token (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_a2a369a5f3 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIssuingTokensToken'")
           | _, None -> None in
         match H.postIssuingTokensToken ~token _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_token ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves an Issuing <code>Token</code> object.</p>
      
      @param token token
      @see "openapi/spec3.json" /v1/issuing/tokens/\{token\} *)
  let getIssuingTokensToken = let _op = "GetIssuingTokensToken" in
    Routes.route (Paths'.getIssuingTokensToken ())
      (fun token (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIssuingTokensToken'")
           | _, None -> None in
         match H.getIssuingTokensToken ~token ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_token ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Cancels a refund with a status of <code>requires_action</code>.</p>
      
      <p>You can’t cancel refunds in other states. Only refunds for payment methods that require customer action can enter the <code>requires_action</code> state.</p>
      
      @param refund refund
      @see "openapi/spec3.json" /v1/refunds/\{refund\}/cancel *)
  let postRefundsRefundCancel = let _op = "PostRefundsRefundCancel" in
    Routes.route (Paths'.postRefundsRefundCancel ())
      (fun refund (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_c2338af3d2 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostRefundsRefundCancel'")
           | _, None -> None in
         match H.postRefundsRefundCancel ~refund _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_refund ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates an existing credit note.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/credit_notes/\{id\} *)
  let postCreditNotesId = let _op = "PostCreditNotesId" in
    Routes.route (Paths'.postCreditNotesId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_ca6b3dc196 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCreditNotesId'")
           | _, None -> None in
         match H.postCreditNotesId ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_credit_note ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the credit note object with the given identifier.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/credit_notes/\{id\} *)
  let getCreditNotesId = let _op = "GetCreditNotesId" in
    Routes.route (Paths'.getCreditNotesId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCreditNotesId'")
           | _, None -> None in
         match H.getCreditNotesId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_credit_note ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Transitions a test mode created OutboundTransfer to the <code>returned</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_transfers/\{outbound_transfer\}/return *)
  let postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn = 
    let _op = "PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturn"
    in
    Routes.route
      (Paths'.postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn ())
      (fun outbound_transfer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_3eca492c14 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturn'")
           | _, None -> None in
         match H.postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn
           ~outbound_transfer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_outbound_transfer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieve an active entitlement</p>
      
      @param id The ID of the entitlement.
      @see "openapi/spec3.json" /v1/entitlements/active_entitlements/\{id\} *)
  let getEntitlementsActiveEntitlementsId = let _op = "GetEntitlementsActiveEntitlementsId"
    in
    Routes.route (Paths'.getEntitlementsActiveEntitlementsId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetEntitlementsActiveEntitlementsId'")
           | _, None -> None in
         match H.getEntitlementsActiveEntitlementsId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_entitlements_active_entitlement ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/capabilities *)
  let getAccountsAccountCapabilities = let _op = "GetAccountsAccountCapabilities"
    in
    Routes.route (Paths'.getAccountsAccountCapabilities ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetAccountsAccountCapabilities'")
           | _, None -> None in
         match H.getAccountsAccountCapabilities ~account ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_05eeb89580 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Lists all owners for a given <code>Account</code></p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/owners *)
  let getFinancialConnectionsAccountsAccountOwners = let _op = "GetFinancialConnectionsAccountsAccountOwners"
    in
    Routes.route (Paths'.getFinancialConnectionsAccountsAccountOwners ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ownership = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ownership" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetFinancialConnectionsAccountsAccountOwners'")
           | _, None -> None in 
         let ownership = match ownership with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'ownership' is required by operation 'GetFinancialConnectionsAccountsAccountOwners'")
         in 
         match H.getFinancialConnectionsAccountsAccountOwners ~account
           ?ending_before ?expand ?limit ~ownership ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_cb70d0eeef ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>
      
      <p>Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after their creation.</p>
      
      <p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/capture *)
  let postPaymentIntentsIntentCapture = let _op = "PostPaymentIntentsIntentCapture"
    in
    Routes.route (Paths'.postPaymentIntentsIntentCapture ())
      (fun intent (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_0221580d23 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentIntentsIntentCapture'")
           | _, None -> None in
         match H.postPaymentIntentsIntentCapture ~intent _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_intent ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the balance transaction with the given ID.</p>
      
      <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/balance_transactions/\{id\} *)
  let getBalanceTransactionsId = let _op = "GetBalanceTransactionsId" in
    Routes.route (Paths'.getBalanceTransactionsId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetBalanceTransactionsId'")
           | _, None -> None in
         match H.getBalanceTransactionsId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_balance_transaction ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Refund a test-mode Transaction.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/test_helpers/issuing/transactions/\{transaction\}/refund *)
  let postTestHelpersIssuingTransactionsTransactionRefund = let _op = "PostTestHelpersIssuingTransactionsTransactionRefund"
    in
    Routes.route
      (Paths'.postTestHelpersIssuingTransactionsTransactionRefund ())
      (fun transaction (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_fe2456625b ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersIssuingTransactionsTransactionRefund'")
           | _, None -> None in
         match H.postTestHelpersIssuingTransactionsTransactionRefund
           ~transaction _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_transaction ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Removes the currently applied discount on a customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/discount *)
  let deleteCustomersCustomerDiscount = let _op = "DeleteCustomersCustomerDiscount"
    in
    Routes.route (Paths'.deleteCustomersCustomerDiscount ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteCustomersCustomerDiscount'")
           | _, None -> None in
         match H.deleteCustomersCustomerDiscount ~customer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_discount ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/discount *)
  let getCustomersCustomerDiscount = let _op = "GetCustomersCustomerDiscount"
    in
    Routes.route (Paths'.getCustomersCustomerDiscount ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerDiscount'")
           | _, None -> None in
         match H.getCustomersCustomerDiscount ~customer ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_discount ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/issuing/authorizations/\{authorization\} *)
  let postIssuingAuthorizationsAuthorization = let _op = "PostIssuingAuthorizationsAuthorization"
    in
    Routes.route (Paths'.postIssuingAuthorizationsAuthorization ())
      (fun authorization (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_335ed61920 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIssuingAuthorizationsAuthorization'")
           | _, None -> None in
         match H.postIssuingAuthorizationsAuthorization ~authorization _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_authorization ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves an Issuing <code>Authorization</code> object.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/issuing/authorizations/\{authorization\} *)
  let getIssuingAuthorizationsAuthorization = let _op = "GetIssuingAuthorizationsAuthorization"
    in
    Routes.route (Paths'.getIssuingAuthorizationsAuthorization ())
      (fun authorization (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIssuingAuthorizationsAuthorization'")
           | _, None -> None in
         match H.getIssuingAuthorizationsAuthorization ~authorization ?expand
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_authorization ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Cancel an OutboundPayment.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/treasury/outbound_payments/\{id\}/cancel *)
  let postTreasuryOutboundPaymentsIdCancel = let _op = "PostTreasuryOutboundPaymentsIdCancel"
    in
    Routes.route (Paths'.postTreasuryOutboundPaymentsIdCancel ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_fdc5092fe1 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTreasuryOutboundPaymentsIdCancel'")
           | _, None -> None in
         match H.postTreasuryOutboundPaymentsIdCancel ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_outbound_payment ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing in an empty string.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/issuing/disputes/\{dispute\} *)
  let postIssuingDisputesDispute = let _op = "PostIssuingDisputesDispute" in
    Routes.route (Paths'.postIssuingDisputesDispute ())
      (fun dispute (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_891f2f5132 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIssuingDisputesDispute'")
           | _, None -> None in
         match H.postIssuingDisputesDispute ~dispute _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_dispute ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves an Issuing <code>Dispute</code> object.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/issuing/disputes/\{dispute\} *)
  let getIssuingDisputesDispute = let _op = "GetIssuingDisputesDispute" in
    Routes.route (Paths'.getIssuingDisputesDispute ())
      (fun dispute (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIssuingDisputesDispute'")
           | _, None -> None in
         match H.getIssuingDisputesDispute ~dispute ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_dispute ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Deletes a <code>Location</code> object.</p>
      
      @param location location
      @see "openapi/spec3.json" /v1/terminal/locations/\{location\} *)
  let deleteTerminalLocationsLocation = let _op = "DeleteTerminalLocationsLocation"
    in
    Routes.route (Paths'.deleteTerminalLocationsLocation ())
      (fun location (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteTerminalLocationsLocation'")
           | _, None -> None in
         match H.deleteTerminalLocationsLocation ~location _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_terminal_location ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param location location
      @see "openapi/spec3.json" /v1/terminal/locations/\{location\} *)
  let postTerminalLocationsLocation = let _op = "PostTerminalLocationsLocation"
    in
    Routes.route (Paths'.postTerminalLocationsLocation ())
      (fun location (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_9854b54c89 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTerminalLocationsLocation'")
           | _, None -> None in
         match H.postTerminalLocationsLocation ~location _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_5cf0bd6b40 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a <code>Location</code> object.</p>
      
      @param location location
      @see "openapi/spec3.json" /v1/terminal/locations/\{location\} *)
  let getTerminalLocationsLocation = let _op = "GetTerminalLocationsLocation"
    in
    Routes.route (Paths'.getTerminalLocationsLocation ())
      (fun location (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTerminalLocationsLocation'")
           | _, None -> None in
         match H.getTerminalLocationsLocation ~location ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_9ea5160203 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Transitions a test mode created InboundTransfer to the <code>succeeded</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/inbound_transfers/\{id\}/succeed *)
  let postTestHelpersTreasuryInboundTransfersIdSucceed = let _op = "PostTestHelpersTreasuryInboundTransfersIdSucceed"
    in
    Routes.route (Paths'.postTestHelpersTreasuryInboundTransfersIdSucceed ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_bbe8140a62 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersTreasuryInboundTransfersIdSucceed'")
           | _, None -> None in
         match H.postTestHelpersTreasuryInboundTransfersIdSucceed ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_inbound_transfer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/dispute/close *)
  let postChargesChargeDisputeClose = let _op = "PostChargesChargeDisputeClose"
    in
    Routes.route (Paths'.postChargesChargeDisputeClose ())
      (fun charge (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_77d060fc3e ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostChargesChargeDisputeClose'")
           | _, None -> None in
         match H.postChargesChargeDisputeClose ~charge _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_dispute ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Update payment method configuration</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/payment_method_configurations/\{configuration\} *)
  let postPaymentMethodConfigurationsConfiguration = let _op = "PostPaymentMethodConfigurationsConfiguration"
    in
    Routes.route (Paths'.postPaymentMethodConfigurationsConfiguration ())
      (fun configuration (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_9c715047af ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentMethodConfigurationsConfiguration'")
           | _, None -> None in
         match H.postPaymentMethodConfigurationsConfiguration ~configuration
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_method_configuration ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieve payment method configuration</p>
      
      @param configuration configuration
      @see "openapi/spec3.json" /v1/payment_method_configurations/\{configuration\} *)
  let getPaymentMethodConfigurationsConfiguration = let _op = "GetPaymentMethodConfigurationsConfiguration"
    in
    Routes.route (Paths'.getPaymentMethodConfigurationsConfiguration ())
      (fun configuration (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPaymentMethodConfigurationsConfiguration'")
           | _, None -> None in
         match H.getPaymentMethodConfigurationsConfiguration ~configuration
           ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_method_configuration ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates an existing Tax <code>Registration</code> object.</p>
      
      <p>A registration cannot be deleted after it has been created. If you wish to end a registration you may do so by setting <code>expires_at</code>.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax/registrations/\{id\} *)
  let postTaxRegistrationsId = let _op = "PostTaxRegistrationsId" in
    Routes.route (Paths'.postTaxRegistrationsId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_25582b7d89 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTaxRegistrationsId'")
           | _, None -> None in
         match H.postTaxRegistrationsId ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_tax_registration ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a Tax <code>Registration</code> object.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/tax/registrations/\{id\} *)
  let getTaxRegistrationsId = let _op = "GetTaxRegistrationsId" in
    Routes.route (Paths'.getTaxRegistrationsId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTaxRegistrationsId'")
           | _, None -> None in
         match H.getTaxRegistrationsId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_tax_registration ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the exchange rates from the given currency to every supported currency.</p>
      
      @param rate_id rate_id
      @see "openapi/spec3.json" /v1/exchange_rates/\{rate_id\} *)
  let getExchangeRatesRateId = let _op = "GetExchangeRatesRateId" in
    Routes.route (Paths'.getExchangeRatesRateId ())
      (fun rate_id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetExchangeRatesRateId'")
           | _, None -> None in
         match H.getExchangeRatesRateId ~rate_id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_exchange_rate ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Lists all owners for a given <code>Account</code></p>
      
      @param account account
      @see "openapi/spec3.json" /v1/linked_accounts/\{account\}/owners *)
  let getLinkedAccountsAccountOwners = let _op = "GetLinkedAccountsAccountOwners"
    in
    Routes.route (Paths'.getLinkedAccountsAccountOwners ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ownership = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ownership" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetLinkedAccountsAccountOwners'")
           | _, None -> None in 
         let ownership = match ownership with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'ownership' is required by operation 'GetLinkedAccountsAccountOwners'")
         in 
         match H.getLinkedAccountsAccountOwners ~account ?ending_before
           ?expand ?limit ~ownership ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_606c2d05a7 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Refunds an application fee that has previously been collected but not yet refunded.
      Funds will be refunded to the Stripe account from which the fee was originally collected.</p>
      
      <p>You can optionally refund only part of an application fee.
      You can do so multiple times, until the entire fee has been refunded.</p>
      
      <p>Once entirely refunded, an application fee can’t be refunded again.
      This method will raise an error when called on an already-refunded application fee,
      or when trying to refund more money than is left on an application fee.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{id\}/refunds *)
  let postApplicationFeesIdRefunds = let _op = "PostApplicationFeesIdRefunds"
    in
    Routes.route (Paths'.postApplicationFeesIdRefunds ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_7cb28563a7 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostApplicationFeesIdRefunds'")
           | _, None -> None in
         match H.postApplicationFeesIdRefunds ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_fee_refund ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{id\}/refunds *)
  let getApplicationFeesIdRefunds = let _op = "GetApplicationFeesIdRefunds"
    in
    Routes.route (Paths'.getApplicationFeesIdRefunds ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetApplicationFeesIdRefunds'")
           | _, None -> None in 
         match H.getApplicationFeesIdRefunds ~id ?ending_before ?expand
           ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_b9e0aa198c ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>failure</code>.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/test_helpers/issuing/cards/\{card\}/shipping/fail *)
  let postTestHelpersIssuingCardsCardShippingFail = let _op = "PostTestHelpersIssuingCardsCardShippingFail"
    in
    Routes.route (Paths'.postTestHelpersIssuingCardsCardShippingFail ())
      (fun card (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_a72563115a ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersIssuingCardsCardShippingFail'")
           | _, None -> None in
         match H.postTestHelpersIssuingCardsCardShippingFail ~card _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_card ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.</p>
      
      @param price price
      @see "openapi/spec3.json" /v1/prices/\{price\} *)
  let postPricesPrice = let _op = "PostPricesPrice" in
    Routes.route (Paths'.postPricesPrice ())
      (fun price (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_a7fbbe89bf ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPricesPrice'")
           | _, None -> None in
         match H.postPricesPrice ~price _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_price ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the price with the given ID.</p>
      
      @param price price
      @see "openapi/spec3.json" /v1/prices/\{price\} *)
  let getPricesPrice = let _op = "GetPricesPrice" in
    Routes.route (Paths'.getPricesPrice ())
      (fun price (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPricesPrice'")
           | _, None -> None in
         match H.getPricesPrice ~price ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_price ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
      
      <p>If the card’s owner has no default card, then the new card will become the default.
      However, if the owner already has a default, then it will not change.
      To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts *)
  let postCustomersCustomerBankAccounts = let _op = "PostCustomersCustomerBankAccounts"
    in
    Routes.route (Paths'.postCustomersCustomerBankAccounts ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_c5d1d32dfc ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCustomersCustomerBankAccounts'")
           | _, None -> None in
         match H.postCustomersCustomerBankAccounts ~customer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_source ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts *)
  let getCustomersCustomerBankAccounts = let _op = "GetCustomersCustomerBankAccounts"
    in
    Routes.route (Paths'.getCustomersCustomerBankAccounts ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerBankAccounts'")
           | _, None -> None in 
         match H.getCustomersCustomerBankAccounts ~customer ?ending_before
           ?expand ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_f21a0fa679 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/finalize *)
  let postInvoicesInvoiceFinalize = let _op = "PostInvoicesInvoiceFinalize"
    in
    Routes.route (Paths'.postInvoicesInvoiceFinalize ())
      (fun invoice (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_a6714eec9b ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostInvoicesInvoiceFinalize'")
           | _, None -> None in
         match H.postInvoicesInvoiceFinalize ~invoice _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_invoice ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/issuing/transactions/\{transaction\} *)
  let postIssuingTransactionsTransaction = let _op = "PostIssuingTransactionsTransaction"
    in
    Routes.route (Paths'.postIssuingTransactionsTransaction ())
      (fun transaction (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_6dc541f3f4 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIssuingTransactionsTransaction'")
           | _, None -> None in
         match H.postIssuingTransactionsTransaction ~transaction _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_transaction ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves an Issuing <code>Transaction</code> object.</p>
      
      @param transaction transaction
      @see "openapi/spec3.json" /v1/issuing/transactions/\{transaction\} *)
  let getIssuingTransactionsTransaction = let _op = "GetIssuingTransactionsTransaction"
    in
    Routes.route (Paths'.getIssuingTransactionsTransaction ())
      (fun transaction (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIssuingTransactionsTransaction'")
           | _, None -> None in
         match H.getIssuingTransactionsTransaction ~transaction ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_transaction ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an existing Report Run.</p>
      
      @param report_run report_run
      @see "openapi/spec3.json" /v1/reporting/report_runs/\{report_run\} *)
  let getReportingReportRunsReportRun = let _op = "GetReportingReportRunsReportRun"
    in
    Routes.route (Paths'.getReportingReportRunsReportRun ())
      (fun report_run (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetReportingReportRunsReportRun'")
           | _, None -> None in
         match H.getReportingReportRunsReportRun ~report_run ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_reporting_report_run ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Update a feature’s metadata or permanently deactivate it.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/entitlements/features/\{id\} *)
  let postEntitlementsFeaturesId = let _op = "PostEntitlementsFeaturesId" in
    Routes.route (Paths'.postEntitlementsFeaturesId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_1b0e22ccbc ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostEntitlementsFeaturesId'")
           | _, None -> None in
         match H.postEntitlementsFeaturesId ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_entitlements_feature ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a feature</p>
      
      @param id The ID of the feature.
      @see "openapi/spec3.json" /v1/entitlements/features/\{id\} *)
  let getEntitlementsFeaturesId = let _op = "GetEntitlementsFeaturesId" in
    Routes.route (Paths'.getEntitlementsFeaturesId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetEntitlementsFeaturesId'")
           | _, None -> None in
         match H.getEntitlementsFeaturesId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_entitlements_feature ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>You can cancel a previously created payout if its status is <code>pending</code>. Stripe refunds the funds to your available balance. You can’t cancel automatic Stripe payouts.</p>
      
      @param payout payout
      @see "openapi/spec3.json" /v1/payouts/\{payout\}/cancel *)
  let postPayoutsPayoutCancel = let _op = "PostPayoutsPayoutCancel" in
    Routes.route (Paths'.postPayoutsPayoutCancel ())
      (fun payout (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_664ed968a8 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPayoutsPayoutCancel'")
           | _, None -> None in
         match H.postPayoutsPayoutCancel ~payout _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payout ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p>
      
      <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
      
      <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
      
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription_exposed_id\} *)
  let deleteSubscriptionsSubscriptionExposedId = let _op = "DeleteSubscriptionsSubscriptionExposedId"
    in
    Routes.route (Paths'.deleteSubscriptionsSubscriptionExposedId ())
      (fun subscription_exposed_id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_762524c8dc ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteSubscriptionsSubscriptionExposedId'")
           | _, None -> None in
         match H.deleteSubscriptionsSubscriptionExposedId
           ~subscription_exposed_id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_subscription ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates an existing subscription to match the specified parameters.
      When changing prices or quantities, we optionally prorate the price we charge next month to make up for any price changes.
      To preview how the proration is calculated, use the <a href="/docs/api/invoices/upcoming">upcoming invoice</a> endpoint.</p>
      
      <p>By default, we prorate subscription changes. For example, if a customer signs up on May 1 for a <currency>100</currency> price, they’ll be billed <currency>100</currency> immediately. If on May 15 they switch to a <currency>200</currency> price, then on June 1 they’ll be billed <currency>250</currency> (<currency>200</currency> for a renewal of her subscription, plus a <currency>50</currency> prorating adjustment for half of the previous month’s <currency>100</currency> difference). Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity changes.</p>
      
      <p>Switching prices does not normally change the billing date or generate an immediate charge unless:</p>
      
      <ul>
      <li>The billing interval is changed (for example, from monthly to yearly).</li>
      <li>The subscription moves from free to paid, or paid to free.</li>
      <li>A trial starts or ends.</li>
      </ul>
      
      <p>In these cases, we apply a credit for the unused time on the previous price, immediately charge the customer using the new price, and reset the billing date.</p>
      
      <p>If you want to charge for an upgrade immediately, pass <code>proration_behavior</code> as <code>always_invoice</code> to create prorations, automatically invoice the customer for those proration adjustments, and attempt to collect payment. If you pass <code>create_prorations</code>, the prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the subscription’s renewal date, you need to manually <a href="/docs/api/invoices/create">invoice the customer</a>.</p>
      
      <p>If you don’t want to prorate, set the <code>proration_behavior</code> option to <code>none</code>. With this option, the customer is billed <currency>100</currency> on May 1 and <currency>200</currency> on June 1. Similarly, if you set <code>proration_behavior</code> to <code>none</code> when switching between different billing intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time. We still reset the billing date and bill immediately for the new subscription.</p>
      
      <p>Updating the quantity on a subscription many times in an hour may result in <a href="/docs/rate-limits">rate limiting</a>. If you need to bill for a frequently changing quantity, consider integrating <a href="/docs/billing/subscriptions/usage-based">usage-based billing</a> instead.</p>
      
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription_exposed_id\} *)
  let postSubscriptionsSubscriptionExposedId = let _op = "PostSubscriptionsSubscriptionExposedId"
    in
    Routes.route (Paths'.postSubscriptionsSubscriptionExposedId ())
      (fun subscription_exposed_id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_90d08b81d8 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostSubscriptionsSubscriptionExposedId'")
           | _, None -> None in
         match H.postSubscriptionsSubscriptionExposedId
           ~subscription_exposed_id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_subscription ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the subscription with the given ID.</p>
      
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/subscriptions/\{subscription_exposed_id\} *)
  let getSubscriptionsSubscriptionExposedId = let _op = "GetSubscriptionsSubscriptionExposedId"
    in
    Routes.route (Paths'.getSubscriptionsSubscriptionExposedId ())
      (fun subscription_exposed_id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetSubscriptionsSubscriptionExposedId'")
           | _, None -> None in
         match H.getSubscriptionsSubscriptionExposedId
           ~subscription_exposed_id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_subscription ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Create an external account for a given account.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts *)
  let postAccountsAccountExternalAccounts = let _op = "PostAccountsAccountExternalAccounts"
    in
    Routes.route (Paths'.postAccountsAccountExternalAccounts ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_cdbc0083b6 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostAccountsAccountExternalAccounts'")
           | _, None -> None in
         match H.postAccountsAccountExternalAccounts ~account _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_external_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>List external accounts for an account.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts *)
  let getAccountsAccountExternalAccounts = let _op = "GetAccountsAccountExternalAccounts"
    in
    Routes.route (Paths'.getAccountsAccountExternalAccounts ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let object_ = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_4e604540e7 ~p:"object" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetAccountsAccountExternalAccounts'")
           | _, None -> None in 
         match H.getAccountsAccountExternalAccounts ~account ?ending_before
           ?expand ?limit ?object_ ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_ed7910ccf0 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the Features associated with a FinancialAccount.</p>
      
      @param financial_account financial_account
      @see "openapi/spec3.json" /v1/treasury/financial_accounts/\{financial_account\}/features *)
  let postTreasuryFinancialAccountsFinancialAccountFeatures = let _op = "PostTreasuryFinancialAccountsFinancialAccountFeatures"
    in
    Routes.route
      (Paths'.postTreasuryFinancialAccountsFinancialAccountFeatures ())
      (fun financial_account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_e0e1caabf4 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTreasuryFinancialAccountsFinancialAccountFeatures'")
           | _, None -> None in
         match H.postTreasuryFinancialAccountsFinancialAccountFeatures
           ~financial_account _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_financial_account_features ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves Features information associated with the FinancialAccount.</p>
      
      @param financial_account financial_account
      @see "openapi/spec3.json" /v1/treasury/financial_accounts/\{financial_account\}/features *)
  let getTreasuryFinancialAccountsFinancialAccountFeatures = let _op = "GetTreasuryFinancialAccountsFinancialAccountFeatures"
    in
    Routes.route
      (Paths'.getTreasuryFinancialAccountsFinancialAccountFeatures ())
      (fun financial_account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryFinancialAccountsFinancialAccountFeatures'")
           | _, None -> None in
         match H.getTreasuryFinancialAccountsFinancialAccountFeatures
           ~financial_account ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_financial_account_features ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Subscribes to periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\}/subscribe *)
  let postFinancialConnectionsAccountsAccountSubscribe = let _op = "PostFinancialConnectionsAccountsAccountSubscribe"
    in
    Routes.route (Paths'.postFinancialConnectionsAccountsAccountSubscribe ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_5e3733c22b ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostFinancialConnectionsAccountsAccountSubscribe'")
           | _, None -> None in
         match H.postFinancialConnectionsAccountsAccountSubscribe ~account
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_financial_connections_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Perform an incremental authorization on an eligible
      <a href="/docs/api/payment_intents/object">PaymentIntent</a>. To be eligible, the
      PaymentIntent’s status must be <code>requires_capture</code> and
      <a href="/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported">incremental_authorization_supported</a>
      must be <code>true</code>.</p>
      
      <p>Incremental authorizations attempt to increase the authorized amount on
      your customer’s card to the new, higher <code>amount</code> provided. Similar to the
      initial authorization, incremental authorizations can be declined. A
      single PaymentIntent can call this endpoint multiple times to further
      increase the authorized amount.</p>
      
      <p>If the incremental authorization succeeds, the PaymentIntent object
      returns with the updated
      <a href="/docs/api/payment_intents/object#payment_intent_object-amount">amount</a>.
      If the incremental authorization fails, a
      <a href="/docs/error-codes#card-declined">card_declined</a> error returns, and no other
      fields on the PaymentIntent or Charge update. The PaymentIntent
      object remains capturable for the previously authorized amount.</p>
      
      <p>Each PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines.
      After it’s captured, a PaymentIntent can no longer be incremented.</p>
      
      <p>Learn more about <a href="/docs/terminal/features/incremental-authorizations">incremental authorizations</a>.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/increment_authorization *)
  let postPaymentIntentsIntentIncrementAuthorization = let _op = "PostPaymentIntentsIntentIncrementAuthorization"
    in
    Routes.route (Paths'.postPaymentIntentsIntentIncrementAuthorization ())
      (fun intent (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_49208ce375 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentIntentsIntentIncrementAuthorization'")
           | _, None -> None in
         match H.postPaymentIntentsIntentIncrementAuthorization ~intent _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_intent ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Cancels a Climate order. You can cancel an order within 30 days of creation. Stripe refunds the
      reservation <code>amount_subtotal</code>, but not the <code>amount_fees</code> for user-triggered cancellations. Frontier
      might cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe
      provides 90 days advance notice and refunds the <code>amount_total</code>.</p>
      
      @param order Unique identifier of the order.
      @see "openapi/spec3.json" /v1/climate/orders/\{order\}/cancel *)
  let postClimateOrdersOrderCancel = let _op = "PostClimateOrdersOrderCancel"
    in
    Routes.route (Paths'.postClimateOrdersOrderCancel ())
      (fun order (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_443b3fa246 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostClimateOrdersOrderCancel'")
           | _, None -> None in
         match H.postClimateOrdersOrderCancel ~order _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_climate_order ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or refunding a transaction.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/test_helpers/terminal/readers/\{reader\}/present_payment_method *)
  let postTestHelpersTerminalReadersReaderPresentPaymentMethod = let _op = "PostTestHelpersTerminalReadersReaderPresentPaymentMethod"
    in
    Routes.route
      (Paths'.postTestHelpersTerminalReadersReaderPresentPaymentMethod ())
      (fun reader (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_97d6bcf429 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersTerminalReadersReaderPresentPaymentMethod'")
           | _, None -> None in
         match H.postTestHelpersTerminalReadersReaderPresentPaymentMethod
           ~reader _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_terminal_reader ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Accepts the specified quote.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/accept *)
  let postQuotesQuoteAccept = let _op = "PostQuotesQuoteAccept" in
    Routes.route (Paths'.postQuotesQuoteAccept ())
      (fun quote (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_7904238c21 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostQuotesQuoteAccept'")
           | _, None -> None in
         match H.postQuotesQuoteAccept ~quote _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_quote ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of PaymentMethods for a given Customer</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/payment_methods *)
  let getCustomersCustomerPaymentMethods = let _op = "GetCustomersCustomerPaymentMethods"
    in
    Routes.route (Paths'.getCustomersCustomerPaymentMethods ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let allow_redisplay = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_4f49500d45 ~p:"allow_redisplay"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let type_ = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_e03d9a444b ~p:"type" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerPaymentMethods'")
           | _, None -> None in 
         match H.getCustomersCustomerPaymentMethods ~customer
           ?allow_redisplay ?ending_before ?expand ?limit ?starting_after
           ?type_ _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_ad4081eaea ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>\[Deprecated\] Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.
      This method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond directly to the webhook request to decline an authorization</a>.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/issuing/authorizations/\{authorization\}/decline *)
  let postIssuingAuthorizationsAuthorizationDecline = let _op = "PostIssuingAuthorizationsAuthorizationDecline"
    in
    Routes.route (Paths'.postIssuingAuthorizationsAuthorizationDecline ())
      (fun authorization (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_9c4b9da4b4 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIssuingAuthorizationsAuthorizationDecline'")
           | _, None -> None in
         match H.postIssuingAuthorizationsAuthorizationDecline ~authorization
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_authorization ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the OutboundTransfer creation request or OutboundTransfer list.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/treasury/outbound_transfers/\{outbound_transfer\} *)
  let getTreasuryOutboundTransfersOutboundTransfer = let _op = "GetTreasuryOutboundTransfersOutboundTransfer"
    in
    Routes.route (Paths'.getTreasuryOutboundTransfersOutboundTransfer ())
      (fun outbound_transfer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTreasuryOutboundTransfersOutboundTransfer'")
           | _, None -> None in
         match H.getTreasuryOutboundTransfersOutboundTransfer
           ~outbound_transfer ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_outbound_transfer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Deletes a <code>Reader</code> object.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\} *)
  let deleteTerminalReadersReader = let _op = "DeleteTerminalReadersReader"
    in
    Routes.route (Paths'.deleteTerminalReadersReader ())
      (fun reader (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteTerminalReadersReader'")
           | _, None -> None in
         match H.deleteTerminalReadersReader ~reader _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_terminal_reader ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\} *)
  let postTerminalReadersReader = let _op = "PostTerminalReadersReader" in
    Routes.route (Paths'.postTerminalReadersReader ())
      (fun reader (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_d395ce2720 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTerminalReadersReader'")
           | _, None -> None in
         match H.postTerminalReadersReader ~reader _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_d2ba7ca387 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a <code>Reader</code> object.</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\} *)
  let getTerminalReadersReader = let _op = "GetTerminalReadersReader" in
    Routes.route (Paths'.getTerminalReadersReader ())
      (fun reader (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTerminalReadersReader'")
           | _, None -> None in
         match H.getTerminalReadersReader ~reader ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_2ca1ba2569 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates a new <code>tax_id</code> object for a customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/tax_ids *)
  let postCustomersCustomerTaxIds = let _op = "PostCustomersCustomerTaxIds"
    in
    Routes.route (Paths'.postCustomersCustomerTaxIds ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_3f758fb90a ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCustomersCustomerTaxIds'")
           | _, None -> None in
         match H.postCustomersCustomerTaxIds ~customer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_tax_id ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of tax IDs for a customer.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/tax_ids *)
  let getCustomersCustomerTaxIds = let _op = "GetCustomersCustomerTaxIds" in
    Routes.route (Paths'.getCustomersCustomerTaxIds ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerTaxIds'")
           | _, None -> None in 
         match H.getCustomersCustomerTaxIds ~customer ?ending_before ?expand
           ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_38c8f764f1 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Transitions a test mode created OutboundPayment to the <code>failed</code> status. The OutboundPayment must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_payments/\{id\}/fail *)
  let postTestHelpersTreasuryOutboundPaymentsIdFail = let _op = "PostTestHelpersTreasuryOutboundPaymentsIdFail"
    in
    Routes.route (Paths'.postTestHelpersTreasuryOutboundPaymentsIdFail ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_36bf1a8752 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersTreasuryOutboundPaymentsIdFail'")
           | _, None -> None in
         match H.postTestHelpersTreasuryOutboundPaymentsIdFail ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_outbound_payment ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates an existing payment method domain.</p>
      
      @param payment_method_domain payment_method_domain
      @see "openapi/spec3.json" /v1/payment_method_domains/\{payment_method_domain\} *)
  let postPaymentMethodDomainsPaymentMethodDomain = let _op = "PostPaymentMethodDomainsPaymentMethodDomain"
    in
    Routes.route (Paths'.postPaymentMethodDomainsPaymentMethodDomain ())
      (fun payment_method_domain (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_966b79b159 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentMethodDomainsPaymentMethodDomain'")
           | _, None -> None in
         match H.postPaymentMethodDomainsPaymentMethodDomain
           ~payment_method_domain _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_method_domain ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an existing payment method domain.</p>
      
      @param payment_method_domain payment_method_domain
      @see "openapi/spec3.json" /v1/payment_method_domains/\{payment_method_domain\} *)
  let getPaymentMethodDomainsPaymentMethodDomain = let _op = "GetPaymentMethodDomainsPaymentMethodDomain"
    in
    Routes.route (Paths'.getPaymentMethodDomainsPaymentMethodDomain ())
      (fun payment_method_domain (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPaymentMethodDomainsPaymentMethodDomain'")
           | _, None -> None in
         match H.getPaymentMethodDomainsPaymentMethodDomain
           ~payment_method_domain ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_method_domain ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).</p>
      
      <p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
      
      @param subscription_item subscription_item
      @see "openapi/spec3.json" /v1/subscription_items/\{subscription_item\}/usage_record_summaries *)
  let getSubscriptionItemsSubscriptionItemUsageRecordSummaries = let _op = "GetSubscriptionItemsSubscriptionItemUsageRecordSummaries"
    in
    Routes.route
      (Paths'.getSubscriptionItemsSubscriptionItemUsageRecordSummaries ())
      (fun subscription_item (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetSubscriptionItemsSubscriptionItemUsageRecordSummaries'")
           | _, None -> None in 
         match H.getSubscriptionItemsSubscriptionItemUsageRecordSummaries
           ~subscription_item ?ending_before ?expand ?limit ?starting_after
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_691092e518 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Create an external account for a given account.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/accounts/\{account\}/bank_accounts *)
  let postAccountsAccountBankAccounts = let _op = "PostAccountsAccountBankAccounts"
    in
    Routes.route (Paths'.postAccountsAccountBankAccounts ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_33b35c33e3 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostAccountsAccountBankAccounts'")
           | _, None -> None in
         match H.postAccountsAccountBankAccounts ~account _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_external_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      <p>This request accepts only metadata as an argument.</p>
      
      @param transfer transfer
      @see "openapi/spec3.json" /v1/transfers/\{transfer\} *)
  let postTransfersTransfer = let _op = "PostTransfersTransfer" in
    Routes.route (Paths'.postTransfersTransfer ())
      (fun transfer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_b6a545cdf2 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTransfersTransfer'")
           | _, None -> None in
         match H.postTransfersTransfer ~transfer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_transfer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p>
      
      @param transfer transfer
      @see "openapi/spec3.json" /v1/transfers/\{transfer\} *)
  let getTransfersTransfer = let _op = "GetTransfersTransfer" in
    Routes.route (Paths'.getTransfersTransfer ())
      (fun transfer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTransfersTransfer'")
           | _, None -> None in
         match H.getTransfersTransfer ~transfer ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_transfer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a Mandate object.</p>
      
      @param mandate mandate
      @see "openapi/spec3.json" /v1/mandates/\{mandate\} *)
  let getMandatesMandate = let _op = "GetMandatesMandate" in
    Routes.route (Paths'.getMandatesMandate ())
      (fun mandate (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetMandatesMandate'")
           | _, None -> None in
         match H.getMandatesMandate ~mandate ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_mandate ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>shipped</code>.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/test_helpers/issuing/cards/\{card\}/shipping/ship *)
  let postTestHelpersIssuingCardsCardShippingShip = let _op = "PostTestHelpersIssuingCardsCardShippingShip"
    in
    Routes.route (Paths'.postTestHelpersIssuingCardsCardShippingShip ())
      (fun card (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_5a52a204c1 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersIssuingCardsCardShippingShip'")
           | _, None -> None in
         match H.postTestHelpersIssuingCardsCardShippingShip ~card _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_card ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates a SetupIntent object.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\} *)
  let postSetupIntentsIntent = let _op = "PostSetupIntentsIntent" in
    Routes.route (Paths'.postSetupIntentsIntent ())
      (fun intent (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_cf96a999b4 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostSetupIntentsIntent'")
           | _, None -> None in
         match H.postSetupIntentsIntent ~intent _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_setup_intent ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of a SetupIntent that has previously been created. </p>
      
      <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
      
      <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/setup_intents/\{intent\} *)
  let getSetupIntentsIntent = let _op = "GetSetupIntentsIntent" in
    Routes.route (Paths'.getSetupIntentsIntent ())
      (fun intent (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let client_secret = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"client_secret" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetSetupIntentsIntent'")
           | _, None -> None in 
         match H.getSetupIntentsIntent ~intent ?client_secret ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_setup_intent ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
      
      <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
      Funds will be refunded to the credit or debit card that was originally charged.</p>
      
      <p>You can optionally refund only part of a charge.
      You can do so multiple times, until the entire charge has been refunded.</p>
      
      <p>Once entirely refunded, a charge can’t be refunded again.
      This method will raise an error when called on an already-refunded charge,
      or when trying to refund more money than is left on a charge.</p>
      
      @param charge The identifier of the charge to refund.
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refunds *)
  let postChargesChargeRefunds = let _op = "PostChargesChargeRefunds" in
    Routes.route (Paths'.postChargesChargeRefunds ())
      (fun charge (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_79e7f8c8c2 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostChargesChargeRefunds'")
           | _, None -> None in
         match H.postChargesChargeRefunds ~charge _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_refund ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refunds *)
  let getChargesChargeRefunds = let _op = "GetChargesChargeRefunds" in
    Routes.route (Paths'.getChargesChargeRefunds ())
      (fun charge (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetChargesChargeRefunds'")
           | _, None -> None in 
         match H.getChargesChargeRefunds ~charge ?ending_before ?expand
           ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_0fc9eda318 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates an existing file link object. Expired links can no longer be updated.</p>
      
      @param link link
      @see "openapi/spec3.json" /v1/file_links/\{link\} *)
  let postFileLinksLink = let _op = "PostFileLinksLink" in
    Routes.route (Paths'.postFileLinksLink ())
      (fun link (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_94fbd9b0fa ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostFileLinksLink'")
           | _, None -> None in
         match H.postFileLinksLink ~link _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_file_link ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the file link with the given ID.</p>
      
      @param link link
      @see "openapi/spec3.json" /v1/file_links/\{link\} *)
  let getFileLinksLink = let _op = "GetFileLinksLink" in
    Routes.route (Paths'.getFileLinksLink ())
      (fun link (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetFileLinksLink'")
           | _, None -> None in
         match H.getFileLinksLink ~link ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_file_link ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Initiates a refund on a Reader</p>
      
      @param reader reader
      @see "openapi/spec3.json" /v1/terminal/readers/\{reader\}/refund_payment *)
  let postTerminalReadersReaderRefundPayment = let _op = "PostTerminalReadersReaderRefundPayment"
    in
    Routes.route (Paths'.postTerminalReadersReaderRefundPayment ())
      (fun reader (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_bc1efb62b6 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTerminalReadersReaderRefundPayment'")
           | _, None -> None in
         match H.postTerminalReadersReaderRefundPayment ~reader _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_terminal_reader ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/financial_connections/accounts/\{account\} *)
  let getFinancialConnectionsAccountsAccount = let _op = "GetFinancialConnectionsAccountsAccount"
    in
    Routes.route (Paths'.getFinancialConnectionsAccountsAccount ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetFinancialConnectionsAccountsAccount'")
           | _, None -> None in
         match H.getFinancialConnectionsAccountsAccount ~account ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_financial_connections_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Manually reconcile the remaining amount for a <code>customer_balance</code> PaymentIntent.</p>
      
      @param intent intent
      @see "openapi/spec3.json" /v1/payment_intents/\{intent\}/apply_customer_balance *)
  let postPaymentIntentsIntentApplyCustomerBalance = let _op = "PostPaymentIntentsIntentApplyCustomerBalance"
    in
    Routes.route (Paths'.postPaymentIntentsIntentApplyCustomerBalance ())
      (fun intent (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_2a30856b32 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentIntentsIntentApplyCustomerBalance'")
           | _, None -> None in
         match H.postPaymentIntentsIntentApplyCustomerBalance ~intent _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_intent ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Capture the payment of an existing, uncaptured charge that was created with the <code>capture</code> option set to false.</p>
      
      <p>Uncaptured payments expire a set number of days after they are created (<a href="/docs/charges/placing-a-hold">7 by default</a>), after which they are marked as refunded and capture attempts will fail.</p>
      
      <p>Don’t use this method to capture a PaymentIntent-initiated charge. Use <a href="/docs/api/payment_intents/capture">Capture a PaymentIntent</a>.</p>
      
      @param charge charge
      @see "openapi/spec3.json" /v1/charges/\{charge\}/capture *)
  let postChargesChargeCapture = let _op = "PostChargesChargeCapture" in
    Routes.route (Paths'.postChargesChargeCapture ())
      (fun charge (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_0a23dd73f1 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostChargesChargeCapture'")
           | _, None -> None in
         match H.postChargesChargeCapture ~charge _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_charge ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Transitions a test mode created OutboundTransfer to the <code>failed</code> status. The OutboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param outbound_transfer outbound_transfer
      @see "openapi/spec3.json" /v1/test_helpers/treasury/outbound_transfers/\{outbound_transfer\}/fail *)
  let postTestHelpersTreasuryOutboundTransfersOutboundTransferFail = 
    let _op = "PostTestHelpersTreasuryOutboundTransfersOutboundTransferFail"
    in
    Routes.route
      (Paths'.postTestHelpersTreasuryOutboundTransfersOutboundTransferFail ())
      (fun outbound_transfer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_cd767fc4a9 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersTreasuryOutboundTransfersOutboundTransferFail'")
           | _, None -> None in
         match H.postTestHelpersTreasuryOutboundTransfersOutboundTransferFail
           ~outbound_transfer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_outbound_transfer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>
      
      @param schedule schedule
      @see "openapi/spec3.json" /v1/subscription_schedules/\{schedule\}/cancel *)
  let postSubscriptionSchedulesScheduleCancel = let _op = "PostSubscriptionSchedulesScheduleCancel"
    in
    Routes.route (Paths'.postSubscriptionSchedulesScheduleCancel ())
      (fun schedule (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_11a645720c ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostSubscriptionSchedulesScheduleCancel'")
           | _, None -> None in
         match H.postSubscriptionSchedulesScheduleCancel ~schedule _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_subscription_schedule ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of transactions that modified the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cash_balance_transactions *)
  let getCustomersCustomerCashBalanceTransactions = let _op = "GetCustomersCustomerCashBalanceTransactions"
    in
    Routes.route (Paths'.getCustomersCustomerCashBalanceTransactions ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerCashBalanceTransactions'")
           | _, None -> None in 
         match H.getCustomersCustomerCashBalanceTransactions ~customer
           ?ending_before ?expand ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_34ac9bd06d ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>
      
      <p>Consult with local regulations to determine whether and how an invoice might be amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to <a href="#create_invoice">issue another invoice</a> or <a href="#create_credit_note">credit note</a> instead. Stripe recommends that you consult with your legal counsel for advice specific to your business.</p>
      
      @param invoice invoice
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/void *)
  let postInvoicesInvoiceVoid = let _op = "PostInvoicesInvoiceVoid" in
    Routes.route (Paths'.postInvoicesInvoiceVoid ())
      (fun invoice (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_f804a131e1 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostInvoicesInvoiceVoid'")
           | _, None -> None in
         match H.postInvoicesInvoiceVoid ~invoice _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_invoice ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>
      
      <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
      
      @param dispute dispute
      @see "openapi/spec3.json" /v1/disputes/\{dispute\}/close *)
  let postDisputesDisputeClose = let _op = "PostDisputesDisputeClose" in
    Routes.route (Paths'.postDisputesDisputeClose ())
      (fun dispute (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_c5198a426a ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostDisputesDisputeClose'")
           | _, None -> None in
         match H.postDisputesDisputeClose ~dispute _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_dispute ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param settlement settlement
      @see "openapi/spec3.json" /v1/issuing/settlements/\{settlement\} *)
  let postIssuingSettlementsSettlement = let _op = "PostIssuingSettlementsSettlement"
    in
    Routes.route (Paths'.postIssuingSettlementsSettlement ())
      (fun settlement (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_fc73a4ef65 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIssuingSettlementsSettlement'")
           | _, None -> None in
         match H.postIssuingSettlementsSettlement ~settlement _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_settlement ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves an Issuing <code>Settlement</code> object.</p>
      
      @param settlement settlement
      @see "openapi/spec3.json" /v1/issuing/settlements/\{settlement\} *)
  let getIssuingSettlementsSettlement = let _op = "GetIssuingSettlementsSettlement"
    in
    Routes.route (Paths'.getIssuingSettlementsSettlement ())
      (fun settlement (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIssuingSettlementsSettlement'")
           | _, None -> None in
         match H.getIssuingSettlementsSettlement ~settlement ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_settlement ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the balance transaction with the given ID.</p>
      
      <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/balance/history/\{id\} *)
  let getBalanceHistoryId = let _op = "GetBalanceHistoryId" in
    Routes.route (Paths'.getBalanceHistoryId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetBalanceHistoryId'")
           | _, None -> None in
         match H.getBalanceHistoryId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_balance_transaction ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Attaches a PaymentMethod object to a Customer.</p>
      
      <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
      or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
      These approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the <code>/v1/payment_methods/:id/attach</code>
      endpoint without first using a SetupIntent or PaymentIntent with <code>setup_future_usage</code> does not optimize the PaymentMethod for
      future use, which makes later declines and payment friction more likely.
      See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up
      future payments.</p>
      
      <p>To use this PaymentMethod as the default for invoice or subscription payments,
      set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
      on the Customer to the PaymentMethod’s ID.</p>
      
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/payment_methods/\{payment_method\}/attach *)
  let postPaymentMethodsPaymentMethodAttach = let _op = "PostPaymentMethodsPaymentMethodAttach"
    in
    Routes.route (Paths'.postPaymentMethodsPaymentMethodAttach ())
      (fun payment_method (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_a2cd932c31 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostPaymentMethodsPaymentMethodAttach'")
           | _, None -> None in
         match H.postPaymentMethodsPaymentMethodAttach ~payment_method _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_method ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a Climate supplier object.</p>
      
      @param supplier supplier
      @see "openapi/spec3.json" /v1/climate/suppliers/\{supplier\} *)
  let getClimateSuppliersSupplier = let _op = "GetClimateSuppliersSupplier"
    in
    Routes.route (Paths'.getClimateSuppliersSupplier ())
      (fun supplier (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetClimateSuppliersSupplier'")
           | _, None -> None in
         match H.getClimateSuppliersSupplier ~supplier ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_climate_supplier ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a href="/docs/identity/how-sessions-work">status</a>.</p>
      
      <p>Once canceled, future submission attempts are disabled. This cannot be undone. <a href="/docs/identity/verification-sessions#cancel">Learn more</a>.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/identity/verification_sessions/\{session\}/cancel *)
  let postIdentityVerificationSessionsSessionCancel = let _op = "PostIdentityVerificationSessionsSessionCancel"
    in
    Routes.route (Paths'.postIdentityVerificationSessionsSessionCancel ())
      (fun session (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_63ae974194 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIdentityVerificationSessionsSessionCancel'")
           | _, None -> None in
         match H.postIdentityVerificationSessionsSessionCancel ~session _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_identity_verification_session ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param quote quote
      @see "openapi/spec3.json" /v1/quotes/\{quote\}/line_items *)
  let getQuotesQuoteLineItems = let _op = "GetQuotesQuoteLineItems" in
    Routes.route (Paths'.getQuotesQuoteLineItems ())
      (fun quote (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetQuotesQuoteLineItems'")
           | _, None -> None in 
         match H.getQuotesQuoteLineItems ~quote ?ending_before ?expand ?limit
           ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_b05b9010db ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/events/\{id\} *)
  let getEventsId = let _op = "GetEventsId" in
    Routes.route (Paths'.getEventsId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetEventsId'")
           | _, None -> None in
         match H.getEventsId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_event ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>When retrieving a payment link, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
      
      @param payment_link payment_link
      @see "openapi/spec3.json" /v1/payment_links/\{payment_link\}/line_items *)
  let getPaymentLinksPaymentLinkLineItems = let _op = "GetPaymentLinksPaymentLinkLineItems"
    in
    Routes.route (Paths'.getPaymentLinksPaymentLinkLineItems ())
      (fun payment_link (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetPaymentLinksPaymentLinkLineItems'")
           | _, None -> None in 
         match H.getPaymentLinksPaymentLinkLineItems ~payment_link
           ?ending_before ?expand ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_1a3b6929f1 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Transitions a test mode created InboundTransfer to the <code>failed</code> status. The InboundTransfer must already be in the <code>processing</code> state.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/test_helpers/treasury/inbound_transfers/\{id\}/fail *)
  let postTestHelpersTreasuryInboundTransfersIdFail = let _op = "PostTestHelpersTreasuryInboundTransfersIdFail"
    in
    Routes.route (Paths'.postTestHelpersTreasuryInboundTransfersIdFail ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_7ee7f99a15 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersTreasuryInboundTransfersIdFail'")
           | _, None -> None in
         match H.postTestHelpersTreasuryInboundTransfersIdFail ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_treasury_inbound_transfer ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/issuing/cards/\{card\} *)
  let postIssuingCardsCard = let _op = "PostIssuingCardsCard" in
    Routes.route (Paths'.postIssuingCardsCard ())
      (fun card (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_af6348f16b ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostIssuingCardsCard'")
           | _, None -> None in
         match H.postIssuingCardsCard ~card _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_card ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves an Issuing <code>Card</code> object.</p>
      
      @param card card
      @see "openapi/spec3.json" /v1/issuing/cards/\{card\} *)
  let getIssuingCardsCard = let _op = "GetIssuingCardsCard" in
    Routes.route (Paths'.getIssuingCardsCard ())
      (fun card (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetIssuingCardsCard'")
           | _, None -> None in
         match H.getIssuingCardsCard ~card ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_card ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieve a list of billing meter event summaries.</p>
      
      @param id Unique identifier for the object.
      @see "openapi/spec3.json" /v1/billing/meters/\{id\}/event_summaries *)
  let getBillingMetersIdEventSummaries = let _op = "GetBillingMetersIdEventSummaries"
    in
    Routes.route (Paths'.getBillingMetersIdEventSummaries ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let customer = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"customer" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let end_time = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Ptime_t ~p:"end_time" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let start_time = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Ptime_t ~p:"start_time" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let value_grouping_window = let _nvs = _queries in
         ParamSerDe'.namevalues_to_t_2ef034b1cb ~p:"value_grouping_window"
           ~loc:`Query ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetBillingMetersIdEventSummaries'")
           | _, None -> None in
         let customer = match customer with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'customer' is required by operation 'GetBillingMetersIdEventSummaries'")
         in 
         let end_time = match end_time with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'end_time' is required by operation 'GetBillingMetersIdEventSummaries'")
         in 
         let start_time = match start_time with
           | Some v -> v
           | None -> raise
                       (Invalid_request "Parameter 'start_time' is required by operation 'GetBillingMetersIdEventSummaries'")
         in 
         match H.getBillingMetersIdEventSummaries ~id ~customer ~end_time
           ?ending_before ?expand ?limit ~start_time ?starting_after
           ?value_grouping_window _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_d9b8cfd01d ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p>
      
      @param topup topup
      @see "openapi/spec3.json" /v1/topups/\{topup\} *)
  let postTopupsTopup = let _op = "PostTopupsTopup" in
    Routes.route (Paths'.postTopupsTopup ())
      (fun topup (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_4336fe6b25 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTopupsTopup'")
           | _, None -> None in
         match H.postTopupsTopup ~topup _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_topup ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p>
      
      @param topup topup
      @see "openapi/spec3.json" /v1/topups/\{topup\} *)
  let getTopupsTopup = let _op = "GetTopupsTopup" in
    Routes.route (Paths'.getTopupsTopup ())
      (fun topup (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTopupsTopup'")
           | _, None -> None in
         match H.getTopupsTopup ~topup ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_topup ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Creates an immutable transaction that updates the customer’s credit <a href="/docs/billing/customer/balance">balance</a>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/balance_transactions *)
  let postCustomersCustomerBalanceTransactions = let _op = "PostCustomersCustomerBalanceTransactions"
    in
    Routes.route (Paths'.postCustomersCustomerBalanceTransactions ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_3cf7957d1b ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCustomersCustomerBalanceTransactions'")
           | _, None -> None in
         match H.postCustomersCustomerBalanceTransactions ~customer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_customer_balance_transaction ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Returns a list of transactions that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
      
      @param customer customer
      @see "openapi/spec3.json" /v1/customers/\{customer\}/balance_transactions *)
  let getCustomersCustomerBalanceTransactions = let _op = "GetCustomersCustomerBalanceTransactions"
    in
    Routes.route (Paths'.getCustomersCustomerBalanceTransactions ())
      (fun customer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerBalanceTransactions'")
           | _, None -> None in 
         match H.getCustomersCustomerBalanceTransactions ~customer
           ?ending_before ?expand ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_0ff9c6b16b ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the line items of a persisted tax calculation as a collection.</p>
      
      @param calculation calculation
      @see "openapi/spec3.json" /v1/tax/calculations/\{calculation\}/line_items *)
  let getTaxCalculationsCalculationLineItems = let _op = "GetTaxCalculationsCalculationLineItems"
    in
    Routes.route (Paths'.getTaxCalculationsCalculationLineItems ())
      (fun calculation (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let ending_before = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"ending_before" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in 
       let limit = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_Int ~p:"limit" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in 
       let starting_after = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_String_ ~p:"starting_after" ~loc:`Query
           ~style:`Form ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTaxCalculationsCalculationLineItems'")
           | _, None -> None in 
         match H.getTaxCalculationsCalculationLineItems ~calculation
           ?ending_before ?expand ?limit ?starting_after _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_8db77c995a ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p>
      
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{id\} *)
  let getApplicationFeesId = let _op = "GetApplicationFeesId" in
    Routes.route (Paths'.getApplicationFeesId ())
      (fun id (_uri:Uri.t) (_resp:_resp) (_req_ctype:BodySerDe'._body_type)
       _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetApplicationFeesId'")
           | _, None -> None in
         match H.getApplicationFeesId ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_application_fee ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Reverse a test-mode Authorization.</p>
      
      @param authorization authorization
      @see "openapi/spec3.json" /v1/test_helpers/issuing/authorizations/\{authorization\}/reverse *)
  let postTestHelpersIssuingAuthorizationsAuthorizationReverse = let _op = "PostTestHelpersIssuingAuthorizationsAuthorizationReverse"
    in
    Routes.route
      (Paths'.postTestHelpersIssuingAuthorizationsAuthorizationReverse ())
      (fun authorization (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_71368f28f0 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTestHelpersIssuingAuthorizationsAuthorizationReverse'")
           | _, None -> None in
         match H.postTestHelpersIssuingAuthorizationsAuthorizationReverse
           ~authorization _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_issuing_authorization ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a <code>Review</code> object.</p>
      
      @param review review
      @see "openapi/spec3.json" /v1/reviews/\{review\} *)
  let getReviewsReview = let _op = "GetReviewsReview" in
    Routes.route (Paths'.getReviewsReview ())
      (fun review (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetReviewsReview'")
           | _, None -> None in
         match H.getReviewsReview ~review ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_review ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>A Session can be expired when it is in one of these statuses: <code>open</code> </p>
      
      <p>After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.</p>
      
      @param session session
      @see "openapi/spec3.json" /v1/checkout/sessions/\{session\}/expire *)
  let postCheckoutSessionsSessionExpire = let _op = "PostCheckoutSessionsSessionExpire"
    in
    Routes.route (Paths'.postCheckoutSessionsSessionExpire ())
      (fun session (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_b43e6c27b9 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCheckoutSessionsSessionExpire'")
           | _, None -> None in
         match H.postCheckoutSessionsSessionExpire ~session _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_checkout_session ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
      
      @param account account
      @see "openapi/spec3.json" /v1/linked_accounts/\{account\} *)
  let getLinkedAccountsAccount = let _op = "GetLinkedAccountsAccount" in
    Routes.route (Paths'.getLinkedAccountsAccount ())
      (fun account (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetLinkedAccountsAccount'")
           | _, None -> None in
         match H.getLinkedAccountsAccount ~account ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_financial_connections_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Delete a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources/\{id\} *)
  let deleteCustomersCustomerSourcesId = let _op = "DeleteCustomersCustomerSourcesId"
    in
    Routes.route (Paths'.deleteCustomersCustomerSourcesId ())
      (fun customer id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_86637173ac ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteCustomersCustomerSourcesId'")
           | _, None -> None in
         match H.deleteCustomersCustomerSourcesId ~customer ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_856459704a ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Update a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources/\{id\} *)
  let postCustomersCustomerSourcesId = let _op = "PostCustomersCustomerSourcesId"
    in
    Routes.route (Paths'.postCustomersCustomerSourcesId ())
      (fun customer id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_8d2f372785 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCustomersCustomerSourcesId'")
           | _, None -> None in
         match H.postCustomersCustomerSourcesId ~customer ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_7f9b4fe25c ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieve a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources/\{id\} *)
  let getCustomersCustomerSourcesId = let _op = "GetCustomersCustomerSourcesId"
    in
    Routes.route (Paths'.getCustomersCustomerSourcesId ())
      (fun customer id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerSourcesId'")
           | _, None -> None in
         match H.getCustomersCustomerSourcesId ~customer ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_source ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      <p>This request only accepts metadata as an argument.</p>
      
      @param fee fee
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{fee\}/refunds/\{id\} *)
  let postApplicationFeesFeeRefundsId = let _op = "PostApplicationFeesFeeRefundsId"
    in
    Routes.route (Paths'.postApplicationFeesFeeRefundsId ())
      (fun fee id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_4c8a52d117 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostApplicationFeesFeeRefundsId'")
           | _, None -> None in
         match H.postApplicationFeesFeeRefundsId ~fee ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_fee_refund ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p>
      
      @param fee fee
      @param id id
      @see "openapi/spec3.json" /v1/application_fees/\{fee\}/refunds/\{id\} *)
  let getApplicationFeesFeeRefundsId = let _op = "GetApplicationFeesFeeRefundsId"
    in
    Routes.route (Paths'.getApplicationFeesFeeRefundsId ())
      (fun fee id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetApplicationFeesFeeRefundsId'")
           | _, None -> None in
         match H.getApplicationFeesFeeRefundsId ~fee ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_fee_refund ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Deletes the feature attachment to a product</p>
      
      @param product product
      @param id id
      @see "openapi/spec3.json" /v1/products/\{product\}/features/\{id\} *)
  let deleteProductsProductFeaturesId = let _op = "DeleteProductsProductFeaturesId"
    in
    Routes.route (Paths'.deleteProductsProductFeaturesId ())
      (fun id product (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteProductsProductFeaturesId'")
           | _, None -> None in
         match H.deleteProductsProductFeaturesId ~id ~product _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_product_feature ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a product_feature, which represents a feature attachment to a product</p>
      
      @param product The ID of the product.
      @param id The ID of the product_feature.
      @see "openapi/spec3.json" /v1/products/\{product\}/features/\{id\} *)
  let getProductsProductFeaturesId = let _op = "GetProductsProductFeaturesId"
    in
    Routes.route (Paths'.getProductsProductFeaturesId ())
      (fun id product (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetProductsProductFeaturesId'")
           | _, None -> None in
         match H.getProductsProductFeaturesId ~id ~product ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_product_feature ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Removes the currently applied discount on a customer.</p>
      
      @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\}/discount *)
  let deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount = 
    let _op = "DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount"
    in
    Routes.route
      (Paths'.deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount ())
      (fun customer subscription_exposed_id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount'")
           | _, None -> None in
         match H.deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount
           ~customer ~subscription_exposed_id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_discount ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\}/discount *)
  let getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount = 
    let _op = "GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount"
    in
    Routes.route
      (Paths'.getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount ())
      (fun customer subscription_exposed_id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount'")
           | _, None -> None in
         match H.getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount
           ~customer ~subscription_exposed_id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_discount ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates an existing Account Capability. Request or remove a capability by updating its <code>requested</code> parameter.</p>
      
      @param account account
      @param capability capability
      @see "openapi/spec3.json" /v1/accounts/\{account\}/capabilities/\{capability\} *)
  let postAccountsAccountCapabilitiesCapability = let _op = "PostAccountsAccountCapabilitiesCapability"
    in
    Routes.route (Paths'.postAccountsAccountCapabilitiesCapability ())
      (fun account capability (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_710cc66740 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostAccountsAccountCapabilitiesCapability'")
           | _, None -> None in
         match H.postAccountsAccountCapabilitiesCapability ~account
           ~capability _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_capability ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves information about the specified Account Capability.</p>
      
      @param account account
      @param capability capability
      @see "openapi/spec3.json" /v1/accounts/\{account\}/capabilities/\{capability\} *)
  let getAccountsAccountCapabilitiesCapability = let _op = "GetAccountsAccountCapabilitiesCapability"
    in
    Routes.route (Paths'.getAccountsAccountCapabilitiesCapability ())
      (fun account capability (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetAccountsAccountCapabilitiesCapability'")
           | _, None -> None in
         match H.getAccountsAccountCapabilitiesCapability ~account
           ~capability ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_capability ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Delete a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts/\{id\} *)
  let deleteCustomersCustomerBankAccountsId = let _op = "DeleteCustomersCustomerBankAccountsId"
    in
    Routes.route (Paths'.deleteCustomersCustomerBankAccountsId ())
      (fun customer id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_a53acb8ec8 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteCustomersCustomerBankAccountsId'")
           | _, None -> None in
         match H.deleteCustomersCustomerBankAccountsId ~customer ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_f45fcafdae ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Update a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts/\{id\} *)
  let postCustomersCustomerBankAccountsId = let _op = "PostCustomersCustomerBankAccountsId"
    in
    Routes.route (Paths'.postCustomersCustomerBankAccountsId ())
      (fun customer id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_e2011092a6 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCustomersCustomerBankAccountsId'")
           | _, None -> None in
         match H.postCustomersCustomerBankAccountsId ~customer ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_2bc92fc692 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts/\{id\} *)
  let getCustomersCustomerBankAccountsId = let _op = "GetCustomersCustomerBankAccountsId"
    in
    Routes.route (Paths'.getCustomersCustomerBankAccountsId ())
      (fun customer id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerBankAccountsId'")
           | _, None -> None in
         match H.getCustomersCustomerBankAccountsId ~customer ~id ?expand
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_bank_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a PaymentMethod object for a given Customer.</p>
      
      @param customer customer
      @param payment_method payment_method
      @see "openapi/spec3.json" /v1/customers/\{customer\}/payment_methods/\{payment_method\} *)
  let getCustomersCustomerPaymentMethodsPaymentMethod = let _op = "GetCustomersCustomerPaymentMethodsPaymentMethod"
    in
    Routes.route (Paths'.getCustomersCustomerPaymentMethodsPaymentMethod ())
      (fun customer payment_method (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerPaymentMethodsPaymentMethod'")
           | _, None -> None in
         match H.getCustomersCustomerPaymentMethodsPaymentMethod ~customer
           ~payment_method ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_payment_method ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Deletes an existing <code>tax_id</code> object.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/tax_ids/\{id\} *)
  let deleteCustomersCustomerTaxIdsId = let _op = "DeleteCustomersCustomerTaxIdsId"
    in
    Routes.route (Paths'.deleteCustomersCustomerTaxIdsId ())
      (fun customer id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteCustomersCustomerTaxIdsId'")
           | _, None -> None in
         match H.deleteCustomersCustomerTaxIdsId ~customer ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_tax_id ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the <code>tax_id</code> object with the given identifier.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/tax_ids/\{id\} *)
  let getCustomersCustomerTaxIdsId = let _op = "GetCustomersCustomerTaxIdsId"
    in
    Routes.route (Paths'.getCustomersCustomerTaxIdsId ())
      (fun customer id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerTaxIdsId'")
           | _, None -> None in
         match H.getCustomersCustomerTaxIdsId ~customer ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_tax_id ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Delete a specified external account for a given account.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/bank_accounts/\{id\} *)
  let deleteAccountsAccountBankAccountsId = let _op = "DeleteAccountsAccountBankAccountsId"
    in
    Routes.route (Paths'.deleteAccountsAccountBankAccountsId ())
      (fun account id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteAccountsAccountBankAccountsId'")
           | _, None -> None in
         match H.deleteAccountsAccountBankAccountsId ~account ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_external_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the metadata, account holder name, account holder type of a bank account belonging to
      a connected account and optionally sets it as the default for its currency. Other bank account
      details are not editable by design.</p>
      
      <p>You can only update bank accounts when <a href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a> is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>
      
      <p>You can re-enable a disabled bank account by performing an update call without providing any
      arguments or changes.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/bank_accounts/\{id\} *)
  let postAccountsAccountBankAccountsId = let _op = "PostAccountsAccountBankAccountsId"
    in
    Routes.route (Paths'.postAccountsAccountBankAccountsId ())
      (fun account id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_6bfc2fe3c9 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostAccountsAccountBankAccountsId'")
           | _, None -> None in
         match H.postAccountsAccountBankAccountsId ~account ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_external_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieve a specified external account for a given account.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/bank_accounts/\{id\} *)
  let getAccountsAccountBankAccountsId = let _op = "GetAccountsAccountBankAccountsId"
    in
    Routes.route (Paths'.getAccountsAccountBankAccountsId ())
      (fun account id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetAccountsAccountBankAccountsId'")
           | _, None -> None in
         match H.getAccountsAccountBankAccountsId ~account ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_external_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
      
      <p>This request only accepts metadata and description as arguments.</p>
      
      @param transfer transfer
      @param id id
      @see "openapi/spec3.json" /v1/transfers/\{transfer\}/reversals/\{id\} *)
  let postTransfersTransferReversalsId = let _op = "PostTransfersTransferReversalsId"
    in
    Routes.route (Paths'.postTransfersTransferReversalsId ())
      (fun id transfer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_77c2de13de ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostTransfersTransferReversalsId'")
           | _, None -> None in
         match H.postTransfersTransferReversalsId ~id ~transfer _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_transfer_reversal ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p>
      
      @param transfer transfer
      @param id id
      @see "openapi/spec3.json" /v1/transfers/\{transfer\}/reversals/\{id\} *)
  let getTransfersTransferReversalsId = let _op = "GetTransfersTransferReversalsId"
    in
    Routes.route (Paths'.getTransfersTransferReversalsId ())
      (fun id transfer (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetTransfersTransferReversalsId'")
           | _, None -> None in
         match H.getTransfersTransferReversalsId ~id ~transfer ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_transfer_reversal ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Update a specified refund.</p>
      
      @param charge charge
      @param refund refund
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refunds/\{refund\} *)
  let postChargesChargeRefundsRefund = let _op = "PostChargesChargeRefundsRefund"
    in
    Routes.route (Paths'.postChargesChargeRefundsRefund ())
      (fun charge refund (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_4688cef40c ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostChargesChargeRefundsRefund'")
           | _, None -> None in
         match H.postChargesChargeRefundsRefund ~charge ~refund _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_refund ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the details of an existing refund.</p>
      
      @param charge charge
      @param refund refund
      @see "openapi/spec3.json" /v1/charges/\{charge\}/refunds/\{refund\} *)
  let getChargesChargeRefundsRefund = let _op = "GetChargesChargeRefundsRefund"
    in
    Routes.route (Paths'.getChargesChargeRefundsRefund ())
      (fun charge refund (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetChargesChargeRefundsRefund'")
           | _, None -> None in
         match H.getChargesChargeRefundsRefund ~charge ~refund ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_refund ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Delete a specified external account for a given account.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts/\{id\} *)
  let deleteAccountsAccountExternalAccountsId = let _op = "DeleteAccountsAccountExternalAccountsId"
    in
    Routes.route (Paths'.deleteAccountsAccountExternalAccountsId ())
      (fun account id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteAccountsAccountExternalAccountsId'")
           | _, None -> None in
         match H.deleteAccountsAccountExternalAccountsId ~account ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_external_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates the metadata, account holder name, account holder type of a bank account belonging to
      a connected account and optionally sets it as the default for its currency. Other bank account
      details are not editable by design.</p>
      
      <p>You can only update bank accounts when <a href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a> is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>
      
      <p>You can re-enable a disabled bank account by performing an update call without providing any
      arguments or changes.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts/\{id\} *)
  let postAccountsAccountExternalAccountsId = let _op = "PostAccountsAccountExternalAccountsId"
    in
    Routes.route (Paths'.postAccountsAccountExternalAccountsId ())
      (fun account id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_adc038ebfb ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostAccountsAccountExternalAccountsId'")
           | _, None -> None in
         match H.postAccountsAccountExternalAccountsId ~account ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_external_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieve a specified external account for a given account.</p>
      
      @param account account
      @param id id
      @see "openapi/spec3.json" /v1/accounts/\{account\}/external_accounts/\{id\} *)
  let getAccountsAccountExternalAccountsId = let _op = "GetAccountsAccountExternalAccountsId"
    in
    Routes.route (Paths'.getAccountsAccountExternalAccountsId ())
      (fun account id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetAccountsAccountExternalAccountsId'")
           | _, None -> None in
         match H.getAccountsAccountExternalAccountsId ~account ~id ?expand
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_external_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a specific cash balance transaction, which updated the customer’s <a href="/docs/payments/customer-balance">cash balance</a>.</p>
      
      @param customer customer
      @param transaction transaction
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cash_balance_transactions/\{transaction\} *)
  let getCustomersCustomerCashBalanceTransactionsTransaction = let _op = "GetCustomersCustomerCashBalanceTransactionsTransaction"
    in
    Routes.route
      (Paths'.getCustomersCustomerCashBalanceTransactionsTransaction ())
      (fun customer transaction (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerCashBalanceTransactionsTransaction'")
           | _, None -> None in
         match H.getCustomersCustomerCashBalanceTransactionsTransaction
           ~customer ~transaction ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_customer_cash_balance_transaction ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Most credit balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p>
      
      @param customer customer
      @param transaction transaction
      @see "openapi/spec3.json" /v1/customers/\{customer\}/balance_transactions/\{transaction\} *)
  let postCustomersCustomerBalanceTransactionsTransaction = let _op = "PostCustomersCustomerBalanceTransactionsTransaction"
    in
    Routes.route
      (Paths'.postCustomersCustomerBalanceTransactionsTransaction ())
      (fun customer transaction (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_ab61fbafe1 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCustomersCustomerBalanceTransactionsTransaction'")
           | _, None -> None in
         match H.postCustomersCustomerBalanceTransactionsTransaction
           ~customer ~transaction _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_customer_balance_transaction ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a specific customer balance transaction that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
      
      @param customer customer
      @param transaction transaction
      @see "openapi/spec3.json" /v1/customers/\{customer\}/balance_transactions/\{transaction\} *)
  let getCustomersCustomerBalanceTransactionsTransaction = let _op = "GetCustomersCustomerBalanceTransactionsTransaction"
    in
    Routes.route
      (Paths'.getCustomersCustomerBalanceTransactionsTransaction ())
      (fun customer transaction (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerBalanceTransactionsTransaction'")
           | _, None -> None in
         match H.getCustomersCustomerBalanceTransactionsTransaction ~customer
           ~transaction ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_customer_balance_transaction ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves a new Source MandateNotification.</p>
      
      @param source source
      @param mandate_notification mandate_notification
      @see "openapi/spec3.json" /v1/sources/\{source\}/mandate_notifications/\{mandate_notification\} *)
  let getSourcesSourceMandateNotificationsMandateNotification = let _op = "GetSourcesSourceMandateNotificationsMandateNotification"
    in
    Routes.route
      (Paths'.getSourcesSourceMandateNotificationsMandateNotification ())
      (fun mandate_notification source (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetSourcesSourceMandateNotificationsMandateNotification'")
           | _, None -> None in
         match H.getSourcesSourceMandateNotificationsMandateNotification
           ~mandate_notification ~source ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_source_mandate_notification ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Delete a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards/\{id\} *)
  let deleteCustomersCustomerCardsId = let _op = "DeleteCustomersCustomerCardsId"
    in
    Routes.route (Paths'.deleteCustomersCustomerCardsId ())
      (fun customer id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_73e3595823 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteCustomersCustomerCardsId'")
           | _, None -> None in
         match H.deleteCustomersCustomerCardsId ~customer ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_d58cff0cff ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Update a specified source for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards/\{id\} *)
  let postCustomersCustomerCardsId = let _op = "PostCustomersCustomerCardsId"
    in
    Routes.route (Paths'.postCustomersCustomerCardsId ())
      (fun customer id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_0d61aaaa53 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCustomersCustomerCardsId'")
           | _, None -> None in
         match H.postCustomersCustomerCardsId ~customer ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_t_8bf295c604 ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/cards/\{id\} *)
  let getCustomersCustomerCardsId = let _op = "GetCustomersCustomerCardsId"
    in
    Routes.route (Paths'.getCustomersCustomerCardsId ())
      (fun customer id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerCardsId'")
           | _, None -> None in
         match H.getCustomersCustomerCardsId ~customer ~id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_card ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>
      
      <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
      
      <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
      
      @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\} *)
  let deleteCustomersCustomerSubscriptionsSubscriptionExposedId = let _op = "DeleteCustomersCustomerSubscriptionsSubscriptionExposedId"
    in
    Routes.route
      (Paths'.deleteCustomersCustomerSubscriptionsSubscriptionExposedId ())
      (fun customer subscription_exposed_id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_d83a6d8f1b ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteCustomersCustomerSubscriptionsSubscriptionExposedId'")
           | _, None -> None in
         match H.deleteCustomersCustomerSubscriptionsSubscriptionExposedId
           ~customer ~subscription_exposed_id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_subscription ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>
      
      @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\} *)
  let postCustomersCustomerSubscriptionsSubscriptionExposedId = let _op = "PostCustomersCustomerSubscriptionsSubscriptionExposedId"
    in
    Routes.route
      (Paths'.postCustomersCustomerSubscriptionsSubscriptionExposedId ())
      (fun customer subscription_exposed_id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_6a54c2e4bd ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCustomersCustomerSubscriptionsSubscriptionExposedId'")
           | _, None -> None in
         match H.postCustomersCustomerSubscriptionsSubscriptionExposedId
           ~customer ~subscription_exposed_id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_subscription ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves the subscription with the given ID.</p>
      
      @param customer customer
      @param subscription_exposed_id subscription_exposed_id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/subscriptions/\{subscription_exposed_id\} *)
  let getCustomersCustomerSubscriptionsSubscriptionExposedId = let _op = "GetCustomersCustomerSubscriptionsSubscriptionExposedId"
    in
    Routes.route
      (Paths'.getCustomersCustomerSubscriptionsSubscriptionExposedId ())
      (fun customer subscription_exposed_id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetCustomersCustomerSubscriptionsSubscriptionExposedId'")
           | _, None -> None in
         match H.getCustomersCustomerSubscriptionsSubscriptionExposedId
           ~customer ~subscription_exposed_id ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_subscription ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons/\{person\} *)
  let deleteAccountsAccountPersonsPerson = let _op = "DeleteAccountsAccountPersonsPerson"
    in
    Routes.route (Paths'.deleteAccountsAccountPersonsPerson ())
      (fun account person (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteAccountsAccountPersonsPerson'")
           | _, None -> None in
         match H.deleteAccountsAccountPersonsPerson ~account ~person _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_person ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates an existing person.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons/\{person\} *)
  let postAccountsAccountPersonsPerson = let _op = "PostAccountsAccountPersonsPerson"
    in
    Routes.route (Paths'.postAccountsAccountPersonsPerson ())
      (fun account person (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_fcf9823b71 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostAccountsAccountPersonsPerson'")
           | _, None -> None in
         match H.postAccountsAccountPersonsPerson ~account ~person _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_person ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves an existing person.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/persons/\{person\} *)
  let getAccountsAccountPersonsPerson = let _op = "GetAccountsAccountPersonsPerson"
    in
    Routes.route (Paths'.getAccountsAccountPersonsPerson ())
      (fun account person (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetAccountsAccountPersonsPerson'")
           | _, None -> None in
         match H.getAccountsAccountPersonsPerson ~account ~person ?expand
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_person ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates an invoice’s line item. Some fields, such as <code>tax_amounts</code>, only live on the invoice line item,
      so they can only be updated through this endpoint. Other fields, such as <code>amount</code>, live on both the invoice
      item and the invoice line item, so updates on this endpoint will propagate to the invoice item as well.
      Updating an invoice’s line item is only possible before the invoice is finalized.</p>
      
      @param invoice Invoice ID of line item
      @param line_item_id Invoice line item ID
      @see "openapi/spec3.json" /v1/invoices/\{invoice\}/lines/\{line_item_id\} *)
  let postInvoicesInvoiceLinesLineItemId = let _op = "PostInvoicesInvoiceLinesLineItemId"
    in
    Routes.route (Paths'.postInvoicesInvoiceLinesLineItemId ())
      (fun invoice line_item_id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_05b4eca2cd ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostInvoicesInvoiceLinesLineItemId'")
           | _, None -> None in
         match H.postInvoicesInvoiceLinesLineItemId ~invoice ~line_item_id
           _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_line_item ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Verify a specified bank account for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/bank_accounts/\{id\}/verify *)
  let postCustomersCustomerBankAccountsIdVerify = let _op = "PostCustomersCustomerBankAccountsIdVerify"
    in
    Routes.route (Paths'.postCustomersCustomerBankAccountsIdVerify ())
      (fun customer id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_62de8cc6bb ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCustomersCustomerBankAccountsIdVerify'")
           | _, None -> None in
         match H.postCustomersCustomerBankAccountsIdVerify ~customer ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_bank_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people/\{person\} *)
  let deleteAccountsAccountPeoplePerson = let _op = "DeleteAccountsAccountPeoplePerson"
    in
    Routes.route (Paths'.deleteAccountsAccountPeoplePerson ())
      (fun account person (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'DeleteAccountsAccountPeoplePerson'")
           | _, None -> None in
         match H.deleteAccountsAccountPeoplePerson ~account ~person _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_deleted_person ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Updates an existing person.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people/\{person\} *)
  let postAccountsAccountPeoplePerson = let _op = "PostAccountsAccountPeoplePerson"
    in
    Routes.route (Paths'.postAccountsAccountPeoplePerson ())
      (fun account person (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_f8ce442641 ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostAccountsAccountPeoplePerson'")
           | _, None -> None in
         match H.postAccountsAccountPeoplePerson ~account ~person _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_person ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieves an existing person.</p>
      
      @param account account
      @param person person
      @see "openapi/spec3.json" /v1/accounts/\{account\}/people/\{person\} *)
  let getAccountsAccountPeoplePerson = let _op = "GetAccountsAccountPeoplePerson"
    in
    Routes.route (Paths'.getAccountsAccountPeoplePerson ())
      (fun account person (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetAccountsAccountPeoplePerson'")
           | _, None -> None in
         match H.getAccountsAccountPeoplePerson ~account ~person ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_person ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Verify a specified bank account for a given customer.</p>
      
      @param customer customer
      @param id id
      @see "openapi/spec3.json" /v1/customers/\{customer\}/sources/\{id\}/verify *)
  let postCustomersCustomerSourcesIdVerify = let _op = "PostCustomersCustomerSourcesIdVerify"
    in
    Routes.route (Paths'.postCustomersCustomerSourcesIdVerify ())
      (fun customer id (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_t_60553c2dee ~ctype:_req_ctype body
             in Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'PostCustomersCustomerSourcesIdVerify'")
           | _, None -> None in
         match H.postCustomersCustomerSourcesIdVerify ~customer ~id _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_bank_account ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
  
  (** <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p>
      
      @param source source
      @param source_transaction source_transaction
      @see "openapi/spec3.json" /v1/sources/\{source\}/source_transactions/\{source_transaction\} *)
  let getSourcesSourceSourceTransactionsSourceTransaction = let _op = "GetSourcesSourceSourceTransactionsSourceTransaction"
    in
    Routes.route
      (Paths'.getSourcesSourceSourceTransactionsSourceTransaction ())
      (fun source source_transaction (_uri:Uri.t) (_resp:_resp)
       (_req_ctype:BodySerDe'._body_type) _resp_ctype _req_hdrs _body ->
       let _queries, _cookies, _headers =
         EncBase'.query_cookie_header_nvs _uri _req_hdrs in
       let expand = let _nvs = _queries in
         ParamSerDe'.namevalues_to_p_StringList ~p:"expand" ~loc:`Query
           ~style:`DeepObject ~explode:true _nvs
       in let exception Invalid_request of string in
       try
         let _req = match _req_ctype, _body with
           | `FormUrlEncoded, Some body ->
             let body = BodySerDe'.body_to_p_Unit ~ctype:_req_ctype body in
             Option.map (fun x -> `FormUrlEncoded x) body
           | `Json, Some _ ->
             raise
               (Invalid_request "The Content-Type 'application/json' is not valid for operation 'GetSourcesSourceSourceTransactionsSourceTransaction'")
           | _, None -> None in
         match H.getSourcesSourceSourceTransactionsSourceTransaction ~source
           ~source_transaction ?expand _req
         with
         | Ok (`CH_OK (content,_headers)) -> let code = 200 in
           let body = BodySerDe'.body_of_source_transaction ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Ok (`CH_Default (code,content,_headers)) ->
           let body = BodySerDe'.body_of_error ~op:_op ~ctype:_resp_ctype content in
           let headers = [] in _resp ~code ~headers body
         | Error (`Nonconforming_request (msg1,msg2)) ->
           _resp ~code:400 ~headers:[]
           (msg1 ^ match msg2 with None -> "" | Some msg2 -> " " ^ msg2)
       with | Invalid_request msg ->  _resp ~code:400 ~headers:[] msg
       | BodySerDe'.Invalid_body msg -> _resp ~code:400 ~headers:[] msg
       | ParamSerDe'.Invalid_parameter msg -> _resp ~code:400 ~headers:[] msg)
end

(** Maker of REST servers.

    A server backend is a low-level actor that receives web
    requests and sends responses on your behalf.

    You provide an [Backend] module as the functor parameter.
    The [Backend] module must be able to receive web requests
    in [Backend.receive], and interfaces to the web backend's
    concurrency and notification model in [Backend.bind] and
    [Backend.return].

    An [Backend] is available that uses the cohttp curl web client.

    Regardless of which [Backend] you use, when you receive
    a web request from a server backend you can response with a
    [Error (`Nonconforming_request ("error message", Some loc))]
    when the request does not match its OpenAPI specification.
    For example, the [not] composition operator can not be handled
    by the OCaml type system, and is best handled at runtime during
    the web request.
    [Some loc] should be the JSON pointer location in the OpenAPI
    specification of the Schema Object that could not be matched.
    If the JSON pointer is not known then [None] can be used. *)
module Server (Backend : sig
  type 'a thread

  val receive :
       [ `Headers of (string * string) list
       | `HttpVersion_1_1
       | `Method of
         [`DELETE | `GET | `HEAD | `OPTIONS | `PATCH | `POST | `PUT | `TRACE]
       | `Path of string
       | `RequestBody of string * string
       | `Server of string ]
       list
    -> ( [> `Headers of (string * string) list
         | `HttpStatus of int
         | `ResponseBody of string ]
         list
       , [> `Nonconforming_request of string * string option] )
       result
       thread

  val bind : 'a thread -> ('a -> 'b thread) -> 'b thread

  val return : 'c -> 'c thread
end)
 =
struct

  open StripeTypes
  open StripeBodies
  open StripeEncdrs
  open StripeParams
  open StripePaths
  
end [@@warning "-unused-open"] [@@warning "-unused-value-declaration"] 